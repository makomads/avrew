
avrewbridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000078  000006d0  2**0
                  ALLOC
  2 .bss          00000017  00800060  00800060  00000864  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b49  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000578  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e9  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ef  00000000  00000000  0000248b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  000007ae  000007ae  00000862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000030  0000077e  0000077e  00000832  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_13 000000b8  0000061c  0000061c  000006d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_4 0000005c  000006d4  000006d4  00000788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_exchange 0000004e  00000730  00000730  000007e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    000005a4  00000078  00000078  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	d5 c3       	rjmp	.+1962   	; 0x7ae <__bad_interrupt>
   4:	bc c3       	rjmp	.+1912   	; 0x77e <__vector_2>
   6:	d3 c3       	rjmp	.+1958   	; 0x7ae <__bad_interrupt>
   8:	65 c3       	rjmp	.+1738   	; 0x6d4 <__vector_4>
   a:	d1 c3       	rjmp	.+1954   	; 0x7ae <__bad_interrupt>
   c:	d0 c3       	rjmp	.+1952   	; 0x7ae <__bad_interrupt>
   e:	cf c3       	rjmp	.+1950   	; 0x7ae <__bad_interrupt>
  10:	ce c3       	rjmp	.+1948   	; 0x7ae <__bad_interrupt>
  12:	cd c3       	rjmp	.+1946   	; 0x7ae <__bad_interrupt>
  14:	cc c3       	rjmp	.+1944   	; 0x7ae <__bad_interrupt>
  16:	cb c3       	rjmp	.+1942   	; 0x7ae <__bad_interrupt>
  18:	ca c3       	rjmp	.+1940   	; 0x7ae <__bad_interrupt>
  1a:	00 c3       	rjmp	.+1536   	; 0x61c <__vector_13>
  1c:	c8 c3       	rjmp	.+1936   	; 0x7ae <__bad_interrupt>
  1e:	c7 c3       	rjmp	.+1934   	; 0x7ae <__bad_interrupt>
  20:	c6 c3       	rjmp	.+1932   	; 0x7ae <__bad_interrupt>
  22:	c5 c3       	rjmp	.+1930   	; 0x7ae <__bad_interrupt>
  24:	c4 c3       	rjmp	.+1928   	; 0x7ae <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 77       	andi	r16, 0x70	; 112
  2a:	80 00       	.word	0x0080	; ????

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf ed       	ldi	r28, 0xDF	; 223
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	e6 e2       	ldi	r30, 0x26	; 38
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	17 c0       	rjmp	.+46     	; 0x6a <__do_clear_bss+0x8>
  3c:	b5 91       	lpm	r27, Z+
  3e:	a5 91       	lpm	r26, Z+
  40:	35 91       	lpm	r19, Z+
  42:	25 91       	lpm	r18, Z+
  44:	05 91       	lpm	r16, Z+
  46:	07 fd       	sbrc	r16, 7
  48:	0c c0       	rjmp	.+24     	; 0x62 <__do_clear_bss>
  4a:	95 91       	lpm	r25, Z+
  4c:	85 91       	lpm	r24, Z+
  4e:	ef 01       	movw	r28, r30
  50:	f9 2f       	mov	r31, r25
  52:	e8 2f       	mov	r30, r24
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 17       	cp	r26, r18
  5a:	b3 07       	cpc	r27, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__SREG__+0x15>
  5e:	fe 01       	movw	r30, r28
  60:	04 c0       	rjmp	.+8      	; 0x6a <__do_clear_bss+0x8>

00000062 <__do_clear_bss>:
  62:	1d 92       	st	X+, r1
  64:	a2 17       	cp	r26, r18
  66:	b3 07       	cpc	r27, r19
  68:	e1 f7       	brne	.-8      	; 0x62 <__do_clear_bss>
  6a:	eb 32       	cpi	r30, 0x2B	; 43
  6c:	f4 07       	cpc	r31, r20
  6e:	31 f7       	brne	.-52     	; 0x3c <__do_copy_data+0x8>
  70:	03 d0       	rcall	.+6      	; 0x78 <_etext>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_exit>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>

Disassembly of section .text:

000007ae <__bad_interrupt>:
 7ae:	28 cc       	rjmp	.-1968   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

0000077e <__vector_2>:


//外部割り込み1(INT1)
//ソフトUART受信スタートビット検出
ISR(INT1_vect)
{
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	8f 93       	push	r24
	suarxbuf = 0;
 78a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <suarxbuf>
	suarxbit = 0;
 78e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	//ピン変化割り込み不許可
	cbi(GIMSK, INT1);
 792:	8b b7       	in	r24, 0x3b	; 59
 794:	8f 77       	andi	r24, 0x7F	; 127
 796:	8b bf       	out	0x3b, r24	; 59

	//タイマ開始
	TCNT0 = 15;	//パルスの真ん中で採取するためのウエイト
 798:	8f e0       	ldi	r24, 0x0F	; 15
 79a:	82 bf       	out	0x32, r24	; 50
	TCCR0B |= 0b00000011;
 79c:	83 b7       	in	r24, 0x33	; 51
 79e:	83 60       	ori	r24, 0x03	; 3
 7a0:	83 bf       	out	0x33, r24	; 51
}
 7a2:	8f 91       	pop	r24
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti

Disassembly of section .text.__vector_13:

0000061c <__vector_13>:


//タイマー0比較A一致
//ソフトUART受信データビット検出
ISR(TIMER0_COMPA_vect)
{	
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
	uint8_t f_bitset;
	
	//ピンのhigh, low取得
	f_bitset = bit_is_set(PIND,3);
 62a:	80 b3       	in	r24, 0x10	; 16
 62c:	88 70       	andi	r24, 0x08	; 8
	
	//スタートビットを再確認し不正なスタートビットを検出
	if(suarxbit == 0 && f_bitset){
 62e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 632:	91 11       	cpse	r25, r1
 634:	0f c0       	rjmp	.+30     	; 0x654 <__vector_13+0x38>
 636:	88 23       	and	r24, r24
 638:	e1 f1       	breq	.+120    	; 0x6b2 <__vector_13+0x96>
		//タイマ停止
		TCCR0B &= 0b11111000;
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	88 7f       	andi	r24, 0xF8	; 248
 63e:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 640:	8a b7       	in	r24, 0x3a	; 58
 642:	80 68       	ori	r24, 0x80	; 128
 644:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 646:	8b b7       	in	r24, 0x3b	; 59
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	8b bf       	out	0x3b, r24	; 59
		suarxbit = -1;
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return;
 652:	39 c0       	rjmp	.+114    	; 0x6c6 <__vector_13+0xaa>
	}
	//ストップビット
	else if(suarxbit == 9){
 654:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 658:	99 30       	cpi	r25, 0x09	; 9
 65a:	79 f4       	brne	.+30     	; 0x67a <__vector_13+0x5e>
		//タイマ停止
		TCCR0B &= 0b11111000;
 65c:	93 b7       	in	r25, 0x33	; 51
 65e:	98 7f       	andi	r25, 0xF8	; 248
 660:	93 bf       	out	0x33, r25	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 662:	9a b7       	in	r25, 0x3a	; 58
 664:	90 68       	ori	r25, 0x80	; 128
 666:	9a bf       	out	0x3a, r25	; 58
		sbi(GIMSK, INT1);
 668:	9b b7       	in	r25, 0x3b	; 59
 66a:	90 68       	ori	r25, 0x80	; 128
 66c:	9b bf       	out	0x3b, r25	; 59
		
		//不正なストップビット検出
		if(!f_bitset){
 66e:	81 11       	cpse	r24, r1
 670:	10 c0       	rjmp	.+32     	; 0x692 <__vector_13+0x76>
			suarxbit = -1;	//こうするとメインループでホストに送信しない
 672:	8f ef       	ldi	r24, 0xFF	; 255
 674:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			return;
 678:	26 c0       	rjmp	.+76     	; 0x6c6 <__vector_13+0xaa>
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 67a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <suarxbuf>
 67e:	96 95       	lsr	r25
 680:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <suarxbuf>
		if(f_bitset){
 684:	88 23       	and	r24, r24
 686:	29 f0       	breq	.+10     	; 0x692 <__vector_13+0x76>
			suarxbuf |= 0b10000000;
 688:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
		}
	}
	
	//次のビットへ
	suarxbit++;
 692:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 696:	8f 5f       	subi	r24, 0xFF	; 255
 698:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 69c:	14 c0       	rjmp	.+40     	; 0x6c6 <__vector_13+0xaa>
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
		//タイマ停止
		TCCR0B &= 0b11111000;
 69e:	83 b7       	in	r24, 0x33	; 51
 6a0:	88 7f       	andi	r24, 0xF8	; 248
 6a2:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 6a4:	8a b7       	in	r24, 0x3a	; 58
 6a6:	80 68       	ori	r24, 0x80	; 128
 6a8:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 6aa:	8b b7       	in	r24, 0x3b	; 59
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	8b bf       	out	0x3b, r24	; 59
 6b0:	e0 cf       	rjmp	.-64     	; 0x672 <__vector_13+0x56>
		sbi(GIMSK, INT1);
		suarxbit = -1;
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
 6b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6b6:	89 30       	cpi	r24, 0x09	; 9
 6b8:	91 f3       	breq	.-28     	; 0x69e <__vector_13+0x82>
			return;
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 6ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 6be:	86 95       	lsr	r24
 6c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
 6c4:	e6 cf       	rjmp	.-52     	; 0x692 <__vector_13+0x76>
		}
	}
	
	//次のビットへ
	suarxbit++;
}
 6c6:	9f 91       	pop	r25
 6c8:	8f 91       	pop	r24
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

Disassembly of section .text.__vector_4:

000006d4 <__vector_4>:


//タイマー1比較A一致
//ソフトUART送信
ISR(TIMER1_COMPA_vect)
{
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	11 24       	eor	r1, r1
 6de:	8f 93       	push	r24
	//ストップビット
	if(suatxbit==9){
 6e0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 6e4:	89 30       	cpi	r24, 0x09	; 9
 6e6:	11 f4       	brne	.+4      	; 0x6ec <__vector_4+0x18>
		sbi(PORTD,4);
 6e8:	94 9a       	sbi	0x12, 4	; 18
 6ea:	17 c0       	rjmp	.+46     	; 0x71a <__vector_4+0x46>
	}
	//送出完了
	else if(suatxbit==10){
 6ec:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 6f0:	8a 30       	cpi	r24, 0x0A	; 10
 6f2:	39 f4       	brne	.+14     	; 0x702 <__vector_4+0x2e>
		//タイマ停止する
		TCCR1B &= 0b11111000;
 6f4:	8e b5       	in	r24, 0x2e	; 46
 6f6:	88 7f       	andi	r24, 0xF8	; 248
 6f8:	8e bd       	out	0x2e, r24	; 46
		suatxbit = -1;
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
		return;
 700:	11 c0       	rjmp	.+34     	; 0x724 <__vector_4+0x50>
	}
	//データビット
	else{
		if(suatxbuf & 1)
 702:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 706:	80 ff       	sbrs	r24, 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <__vector_4+0x3a>
			sbi(PORTD,4);
 70a:	94 9a       	sbi	0x12, 4	; 18
 70c:	01 c0       	rjmp	.+2      	; 0x710 <__vector_4+0x3c>
		else
			cbi(PORTD,4);
 70e:	94 98       	cbi	0x12, 4	; 18
		suatxbuf >>= 1;			
 710:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 714:	86 95       	lsr	r24
 716:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <suatxbuf>
	}
	
	//次のビットへ
	suatxbit++;
 71a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 71e:	8f 5f       	subi	r24, 0xFF	; 255
 720:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
}
 724:	8f 91       	pop	r24
 726:	0f 90       	pop	r0
 728:	0f be       	out	0x3f, r0	; 63
 72a:	0f 90       	pop	r0
 72c:	1f 90       	pop	r1
 72e:	18 95       	reti

Disassembly of section .text.spi_exchange:

00000730 <spi_exchange>:


//4バイトSPIで交換する
//USIは使わず任意のピンを使う
void spi_exchange(uint8_t *poutdata, uint8_t *pindata)
{
 730:	fc 01       	movw	r30, r24
 732:	a6 2f       	mov	r26, r22
 734:	b7 2f       	mov	r27, r23
 736:	bc 01       	movw	r22, r24
 738:	6c 5f       	subi	r22, 0xFC	; 252
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t		indata;
	uint8_t		delaycnt;

	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
 73c:	41 91       	ld	r20, Z+
 73e:	38 e0       	ldi	r19, 0x08	; 8
		indata = 0;
 740:	20 e0       	ldi	r18, 0x00	; 0
		bitcount = 8;
		while(bitcount){
			//送信データ(MSB先行)
			if(outdata&0x80)
 742:	44 23       	and	r20, r20
 744:	14 f4       	brge	.+4      	; 0x74a <spi_exchange+0x1a>
				sbi(PORTD,4);
 746:	94 9a       	sbi	0x12, 4	; 18
 748:	01 c0       	rjmp	.+2      	; 0x74c <spi_exchange+0x1c>
			else
				cbi(PORTD,4);
 74a:	94 98       	cbi	0x12, 4	; 18
			outdata <<= 1;
 74c:	44 0f       	add	r20, r20
			//クロック上昇
			sbi(PORTB, 4);
 74e:	c4 9a       	sbi	0x18, 4	; 24
			delaycnt = spidelay;
 750:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;//カウント1あたり3クロック=0.15us
 754:	99 23       	and	r25, r25
 756:	11 f0       	breq	.+4      	; 0x75c <spi_exchange+0x2c>
 758:	91 50       	subi	r25, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <spi_exchange+0x28>
			//受信データ
			indata <<= 1;
 75c:	22 0f       	add	r18, r18
			if(PIND & 0b00001000)
 75e:	83 99       	sbic	0x10, 3	; 16
				indata |= 1;
 760:	21 60       	ori	r18, 0x01	; 1
			//クロック下降
			bitcount--;
			cbi(PORTB, 4);
 762:	c4 98       	cbi	0x18, 4	; 24
			delaycnt = spidelay;
 764:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;	//カウント1あたり3クロック=0.15us
 768:	99 23       	and	r25, r25
 76a:	11 f0       	breq	.+4      	; 0x770 <spi_exchange+0x40>
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <spi_exchange+0x3c>
 770:	31 50       	subi	r19, 0x01	; 1
	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
		indata = 0;
		bitcount = 8;
		while(bitcount){
 772:	39 f7       	brne	.-50     	; 0x742 <spi_exchange+0x12>
			bitcount--;
			cbi(PORTB, 4);
			delaycnt = spidelay;
			while(delaycnt) delaycnt--;	//カウント1あたり3クロック=0.15us
		}
		pindata[4-bytecount] = indata;
 774:	2d 93       	st	X+, r18
	uint8_t		outdata;
	uint8_t		indata;
	uint8_t		delaycnt;

	bytecount = 4;
	while(bytecount){
 776:	e6 17       	cp	r30, r22
 778:	f7 07       	cpc	r31, r23
 77a:	01 f7       	brne	.-64     	; 0x73c <spi_exchange+0xc>
		}
		pindata[4-bytecount] = indata;
		bytecount--;
	}

}
 77c:	08 95       	ret

Disassembly of section .text.main:

00000078 <main>:
#endif



int main(void) 
{
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	dd 27       	eor	r29, r29
  80:	ce 52       	subi	r28, 0x2E	; 46
  82:	cd bf       	out	0x3d, r28	; 61
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
				if(rxbuf[0]!=0xFF && GIMSK==0){
					//SPIでターゲットと4バイト交換する
					spi_exchange(rxbuf, cmdresp);
  84:	9e 01       	movw	r18, r28
  86:	2f 5f       	subi	r18, 0xFF	; 255
  88:	3f 4f       	sbci	r19, 0xFF	; 255
  8a:	3a a7       	std	Y+42, r19	; 0x2a
  8c:	29 a7       	std	Y+41, r18	; 0x29
  8e:	59 a4       	ldd	r5, Y+41	; 0x29
  90:	6a a4       	ldd	r6, Y+42	; 0x2a
	uint16_t pagepos;		//ページ内の走査位置


reset:
	//マスター割り込み禁止
	cli();
  92:	f8 94       	cli
   GND ┃GN  D6┃SpeedSW
       ┗━━━┛
*/

	//IO方向セット(0入力,1出力)
	DDRB  = 0b00010000;
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	87 bb       	out	0x17, r24	; 23
	DDRD  = 0b00110010;
  98:	82 e3       	ldi	r24, 0x32	; 50
  9a:	81 bb       	out	0x11, r24	; 17

	//ポート初期化
	//出力の場合1でHigh、0でLow
	//入力の場合1を書くとプルアップ抵抗活性化、0を書くとハイインピーダンス
	PORTB = 0b00000000;
  9c:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b01010001;
  9e:	81 e5       	ldi	r24, 0x51	; 81
  a0:	82 bb       	out	0x12, r24	; 18
	//タイマ設定
	
	//TCCR0
	//B3,A1,A0	動作種別、CTC動作は010
	//B210	プリスケーラ(000:停止, 001:1, 010:8, 011:64, 100:256, 101:1024, 110,111:予約)
	TCCR0A = 0b00000010;
  a2:	92 e0       	ldi	r25, 0x02	; 2
  a4:	90 bf       	out	0x30, r25	; 48
	TCCR0B = 0b00000000;
  a6:	13 be       	out	0x33, r1	; 51

	//タイマ0比較値(AVRのクロック/UART速度/プリスケーラ)
	OCR0A = 31;
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	86 bf       	out	0x36, r24	; 54
	TCNT0 = 0;
  ac:	12 be       	out	0x32, r1	; 50
	
	//TCCR1
	//B4,B3,A1,A0 動作種別 	CTCは0100(比較A一致)か1100(捕獲一致)
	//B210	プリスケーラ 設定値はタイマ0と同じ
	TCCR1A = 0;
  ae:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001000;
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	8e bd       	out	0x2e, r24	; 46
	OCR1A  = 32;
  b4:	40 e2       	ldi	r20, 0x20	; 32
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	5b bd       	out	0x2b, r21	; 43
  ba:	4a bd       	out	0x2a, r20	; 42
	TCNT1  = 0;
  bc:	1d bc       	out	0x2d, r1	; 45
  be:	1c bc       	out	0x2c, r1	; 44

	//タイマ割り込みはここで許可するが、タイマーが動いていないので割り込みはまだ発生しない
	TIMSK = 1<<OCIE0A | 1<<OCIE1A;
  c0:	21 e4       	ldi	r18, 0x41	; 65
  c2:	29 bf       	out	0x39, r18	; 57
	//MCU制御
	//7		1を書くとプルアップ禁止
	//6,5,4	休止種別、休止許可
	//3,2	INT1割り込み条件(00:Low,01:両端,10:下降,11:上昇)
	//1,0	INT0割り込み条件
	MCUCR = 0b00001000;
  c4:	85 bf       	out	0x35, r24	; 53
	//ピン割り込みは実行モードになったら許可するのでここではまだ不許可
	GIMSK = 0;
  c6:	1b be       	out	0x3b, r1	; 59

	//////////////////////////////////////////////////////////////////////
	//USART設定

	//初期化時はボーレート0にする必要がある
	UBRRH = 0;
  c8:	12 b8       	out	0x02, r1	; 2
	UBRRL = 0;
  ca:	19 b8       	out	0x09, r1	; 9

	//データレジスタ
	UDR = 0;
  cc:	1c b8       	out	0x0c, r1	; 12
	//4	フレーミングエラーフラグ
	//3	データオーバーランフラグ
	//2	パリティエラーフラグ
	//1	倍速許可
	//0	マルチプロセッサ許可
	UCSRA = 0b00000000;
  ce:	1b b8       	out	0x0b, r1	; 11
	//4	受信(RXD0pin)許可
	//3	送信(TXD0pin)許可
	//2	データビット長選択2
	//1	受信追加データビット(9ビットフレームの時使用)
	//0	送信追加データビット(9ビットフレームの時使用)
	UCSRB = 0b00011000;
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	8a b9       	out	0x0a, r24	; 10
	//76 動作モード選択(00:非同期(調歩), 01:同期, 11:SPI)
	//54 パリティ選択(00:パリティなし, 10:偶数, 11:奇数)
	//3	 ストップビット(0:1bit, 1:2bit)
	//21 データビット長選択10(8bitは011)
	//0	 クロック極性(0:送信立ち上がり,受信立下り, 1:その逆、同期動作時のみ有効)
	UCSRC = 0b00000110;
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	83 b9       	out	0x03, r24	; 3

	//ボーレート
	UBRRH = 0;
  d8:	12 b8       	out	0x02, r1	; 2
	UBRRL = UBRR_VAL;
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	89 b9       	out	0x09, r24	; 9

	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
  de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <txinpos>
	txoutpos = 0;
  e2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <txoutpos>
	rxpos = 0;
	rxbuf[0] = 0x55;
  e6:	85 e5       	ldi	r24, 0x55	; 85
  e8:	89 83       	std	Y+1, r24	; 0x01
	rxbuf[1] = 0x55;
  ea:	8a 83       	std	Y+2, r24	; 0x02
	cmdresp[0] = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8d 83       	std	Y+5, r24	; 0x05
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
  f0:	1e 82       	std	Y+6, r1	; 0x06
	cmdresp[2] = 0;
  f2:	1f 82       	std	Y+7, r1	; 0x07
	cmdresp[3] = 0;
  f4:	18 86       	std	Y+8, r1	; 0x08
	suarxbit = -1;
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	suatxbit = -1;
  fa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
	blkmodetype = 0;
	spidelay = 2;
  fe:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <spidelay>
	

	//マスター割り込み許可
	sei();
 102:	78 94       	sei
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	suarxbit = -1;
	suatxbit = -1;
	blkmodetype = 0;
 104:	10 e0       	ldi	r17, 0x00	; 0
	spidelay = 2;
	

	//マスター割り込み許可
	sei();
 106:	e1 2c       	mov	r14, r1
 108:	f1 2c       	mov	r15, r1
	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
	txoutpos = 0;
	rxpos = 0;
 10a:	b1 2c       	mov	r11, r1
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
			suarxbit = -1;
 10c:	77 24       	eor	r7, r7
 10e:	7a 94       	dec	r7
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 110:	a1 2c       	mov	r10, r1
	while(1){
		///////////////////////////////////////////////////////////////////////
		//UART送信
		
		//ブリッジからホストへ送信
		if(txinpos != txoutpos){
 112:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txinpos>
 116:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 11a:	98 17       	cp	r25, r24
 11c:	91 f0       	breq	.+36     	; 0x142 <__stack+0x63>
			//UART送信レジスタ空き待ちフラグ(UDRE)
			if(bit_is_set(UCSRA,UDRE)){
 11e:	5d 9b       	sbis	0x0b, 5	; 11
 120:	10 c0       	rjmp	.+32     	; 0x142 <__stack+0x63>
				//送信データセット
				//同時に送信が開始され、UDREは解除される
				UDR = txbuf[txoutpos++];
 122:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <txoutpos>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8e 0f       	add	r24, r30
 12a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <txoutpos>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e9 59       	subi	r30, 0x99	; 153
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	80 81       	ld	r24, Z
 136:	8c b9       	out	0x0c, r24	; 12
				txoutpos &= TXBUFMAXMASK; //if(txoutpos==TXBUFSIZE) txoutpos = 0;と同じ効果
 138:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <txoutpos>
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
 142:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 146:	8a 30       	cpi	r24, 0x0A	; 10
 148:	39 f5       	brne	.+78     	; 0x198 <__stack+0xb9>
			suarxbit = -1;
 14a:	70 92 60 00 	sts	0x0060, r7	; 0x800060 <__DATA_REGION_ORIGIN__>
			txbuf[txinpos] = 0xFF;
 14e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e9 59       	subi	r30, 0x99	; 153
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	70 82       	st	Z, r7
			txbuf[txinpos+1] = 0xF2;
 15a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e8 59       	subi	r30, 0x98	; 152
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	52 ef       	ldi	r21, 0xF2	; 242
 166:	50 83       	st	Z, r21
			txbuf[txinpos+2] = suarxbuf;
 168:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 172:	e7 59       	subi	r30, 0x97	; 151
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 83       	st	Z, r24
			txbuf[txinpos+3] = 0;
 178:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	e6 59       	subi	r30, 0x96	; 150
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	10 82       	st	Z, r1
			txinpos += 4;
 184:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 188:	8c 5f       	subi	r24, 0xFC	; 252
 18a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
			txinpos &= TXBUFMAXMASK; //if(txinpos==TXBUFSIZE) txinpos = 0;と同じ効果
 18e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>

		///////////////////////////////////////////////////////////////////////
		//UART受信

		//ブロック転送のときは4バイト固定ではなく指定したブロック長になる
		if(blkmodetype!=0){
 198:	11 23       	and	r17, r17
 19a:	09 f4       	brne	.+2      	; 0x19e <__stack+0xbf>
 19c:	cd c0       	rjmp	.+410    	; 0x338 <__stack+0x259>
			switch(blkmodetype){
 19e:	11 3c       	cpi	r17, 0xC1	; 193
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <__stack+0xc5>
 1a2:	9e c0       	rjmp	.+316    	; 0x2e0 <__stack+0x201>
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <__stack+0xcd>
 1a6:	10 3c       	cpi	r17, 0xC0	; 192
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <__stack+0xd9>
 1aa:	c7 c1       	rjmp	.+910    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 1ac:	12 3c       	cpi	r17, 0xC2	; 194
 1ae:	21 f0       	breq	.+8      	; 0x1b8 <__stack+0xd9>
 1b0:	13 3c       	cpi	r17, 0xC3	; 195
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <__stack+0xd7>
 1b4:	95 c0       	rjmp	.+298    	; 0x2e0 <__stack+0x201>
 1b6:	c1 c1       	rjmp	.+898    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			case 0xC0:
			case 0xC2:
				//連続書き込み
				if(UCSRA & 0b10000000){	//UART受信データがあるか
 1b8:	5f 9b       	sbis	0x0b, 7	; 11
 1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <__stack+0xf5>
					blkbuf[blkwritepos] = UDR;
 1bc:	8c b1       	in	r24, 0x0c	; 12
 1be:	e9 e0       	ldi	r30, 0x09	; 9
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	ec 0f       	add	r30, r28
 1c4:	fd 1f       	adc	r31, r29
 1c6:	e4 0d       	add	r30, r4
 1c8:	f1 1d       	adc	r31, r1
 1ca:	80 83       	st	Z, r24
					blkwritepos++;
 1cc:	43 94       	inc	r4
					cnttimeout = MAX_TIMEOUT;
 1ce:	ee 24       	eor	r14, r14
 1d0:	ea 94       	dec	r14
 1d2:	fe 2c       	mov	r15, r14
				}
				if(blkreadpos < blkwritepos){
 1d4:	04 15       	cp	r16, r4
 1d6:	08 f0       	brcs	.+2      	; 0x1da <__stack+0xfb>
 1d8:	b0 c1       	rjmp	.+864    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
 1da:	10 3c       	cpi	r17, 0xC0	; 192
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <__stack+0x105>
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 1de:	00 ff       	sbrs	r16, 0
 1e0:	db c1       	rjmp	.+950    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 1e2:	ef c1       	rjmp	.+990    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
					else if(blkmodetype==0xC2)	//EEPROMページ設定
 1e4:	12 3c       	cpi	r17, 0xC2	; 194
 1e6:	09 f0       	breq	.+2      	; 0x1ea <__stack+0x10b>
 1e8:	ae c1       	rjmp	.+860    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
						spibuf[0] = 0xC1;
 1ea:	81 ec       	ldi	r24, 0xC1	; 193
 1ec:	89 83       	std	Y+1, r24	; 0x01
					spibuf[1] = pagepos>>8;
 1ee:	8c a5       	ldd	r24, Y+44	; 0x2c
 1f0:	8a 83       	std	Y+2, r24	; 0x02
					spibuf[2] = pagepos&0xFF;
 1f2:	9b a5       	ldd	r25, Y+43	; 0x2b
 1f4:	9b 83       	std	Y+3, r25	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 1f6:	e9 e0       	ldi	r30, 0x09	; 9
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ec 0f       	add	r30, r28
 1fc:	fd 1f       	adc	r31, r29
 1fe:	e0 0f       	add	r30, r16
 200:	f1 1d       	adc	r31, r1
 202:	80 81       	ld	r24, Z
 204:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 206:	be 01       	movw	r22, r28
 208:	6b 5f       	subi	r22, 0xFB	; 251
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	85 2d       	mov	r24, r5
 20e:	96 2d       	mov	r25, r6
 210:	8f d2       	rcall	.+1310   	; 0x730 <spi_exchange>
				
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
 212:	2b a5       	ldd	r18, Y+43	; 0x2b
 214:	3c a5       	ldd	r19, Y+44	; 0x2c
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	3c a7       	std	Y+44, r19	; 0x2c
 21c:	2b a7       	std	Y+43, r18	; 0x2b
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 21e:	4d a5       	ldd	r20, Y+45	; 0x2d
 220:	5e a5       	ldd	r21, Y+46	; 0x2e
 222:	8b a5       	ldd	r24, Y+43	; 0x2b
 224:	9c a5       	ldd	r25, Y+44	; 0x2c
 226:	48 17       	cp	r20, r24
 228:	59 07       	cpc	r21, r25
 22a:	f1 f4       	brne	.+60     	; 0x268 <__stack+0x189>
						pagepos = 0;
						if(blkmodetype==0xC0)
 22c:	10 3c       	cpi	r17, 0xC0	; 192
 22e:	19 f4       	brne	.+6      	; 0x236 <__stack+0x157>
							spibuf[0] = 0x4C;	//Flash書き込み
 230:	8c e4       	ldi	r24, 0x4C	; 76
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	04 c0       	rjmp	.+8      	; 0x23e <__stack+0x15f>
						else if(blkmodetype==0xC2)
 236:	12 3c       	cpi	r17, 0xC2	; 194
 238:	11 f4       	brne	.+4      	; 0x23e <__stack+0x15f>
							spibuf[0] = 0xC2;	//EEPROM書き込み
 23a:	82 ec       	ldi	r24, 0xC2	; 194
 23c:	89 83       	std	Y+1, r24	; 0x01
						spibuf[1] = addr>>8;
 23e:	da 82       	std	Y+2, r13	; 0x02
						spibuf[2] = addr&0xFF;
 240:	cb 82       	std	Y+3, r12	; 0x03
						spibuf[3] = 0;
 242:	ac 82       	std	Y+4, r10	; 0x04
						spi_exchange(spibuf, cmdresp);
 244:	be 01       	movw	r22, r28
 246:	6b 5f       	subi	r22, 0xFB	; 251
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	85 2d       	mov	r24, r5
 24c:	96 2d       	mov	r25, r6
 24e:	70 d2       	rcall	.+1248   	; 0x730 <spi_exchange>
						addr += pagesize;
 250:	2d a5       	ldd	r18, Y+45	; 0x2d
 252:	3e a5       	ldd	r19, Y+46	; 0x2e
 254:	c2 0e       	add	r12, r18
 256:	d3 1e       	adc	r13, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	87 ea       	ldi	r24, 0xA7	; 167
 25a:	91 e6       	ldi	r25, 0x61	; 97
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <__stack+0x17d>
 260:	00 c0       	rjmp	.+0      	; 0x262 <__stack+0x183>
 262:	00 00       	nop
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
						pagepos = 0;
 264:	1c a6       	std	Y+44, r1	; 0x2c
 266:	1b a6       	std	Y+43, r1	; 0x2b
						addr += pagesize;
						_delay_ms(5);
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
 268:	0f 5f       	subi	r16, 0xFF	; 255
					if(blkreadpos==BLKSIZE){
 26a:	00 32       	cpi	r16, 0x20	; 32
 26c:	09 f0       	breq	.+2      	; 0x270 <__stack+0x191>
 26e:	65 c1       	rjmp	.+714    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
						blkreadpos=0;
						blkwritepos=0;
						txbuf[txinpos++] = 0xFF;
 270:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	8e 0f       	add	r24, r30
 278:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	e9 59       	subi	r30, 0x99	; 153
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	70 82       	st	Z, r7
						txbuf[txinpos++] = blkmodetype;
 284:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	8e 0f       	add	r24, r30
 28c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	e9 59       	subi	r30, 0x99	; 153
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	10 83       	st	Z, r17
						txbuf[txinpos++] = (addr>>8)&0xFF;
 298:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	8e 0f       	add	r24, r30
 2a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	e9 59       	subi	r30, 0x99	; 153
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	d0 82       	st	Z, r13
						txbuf[txinpos++] = addr&0xFF;
 2ac:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	8e 0f       	add	r24, r30
 2b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e9 59       	subi	r30, 0x99	; 153
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	c0 82       	st	Z, r12
						txinpos &= TXBUFMAXMASK;
 2c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 2c4:	8f 70       	andi	r24, 0x0F	; 15
 2c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
						
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	89 1a       	sub	r8, r25
 2ce:	99 0a       	sbc	r9, r25
						if(cntblk == nblks){
 2d0:	28 14       	cp	r2, r8
 2d2:	39 04       	cpc	r3, r9
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <__stack+0x1f9>
 2d6:	2d c1       	rjmp	.+602    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
						blkwritepos=0;
 2d8:	41 2c       	mov	r4, r1
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
 2da:	00 e0       	ldi	r16, 0x00	; 0
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
						if(cntblk == nblks){
							blkmodetype = 0;
 2dc:	1a 2d       	mov	r17, r10
 2de:	2d c1       	rjmp	.+602    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
				}
				break;
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
 2e0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txinpos>
 2e4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 2e8:	98 13       	cpse	r25, r24
 2ea:	27 c1       	rjmp	.+590    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
					do{
						if(blkmodetype==0xC1)
 2ec:	11 3c       	cpi	r17, 0xC1	; 193
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <__stack+0x217>
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 2f0:	00 ff       	sbrs	r16, 0
 2f2:	88 c1       	rjmp	.+784    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 2f4:	7b c1       	rjmp	.+758    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
						else if(blkmodetype==0xC3)
 2f6:	13 3c       	cpi	r17, 0xC3	; 195
 2f8:	09 f0       	breq	.+2      	; 0x2fc <__stack+0x21d>
 2fa:	40 c1       	rjmp	.+640    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
							spibuf[0] = 0xA0;
 2fc:	20 ea       	ldi	r18, 0xA0	; 160
 2fe:	29 83       	std	Y+1, r18	; 0x01
						spibuf[1] = addr>>8;	//アドレス上位
 300:	da 82       	std	Y+2, r13	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 302:	cb 82       	std	Y+3, r12	; 0x03
						spibuf[3] = 0;
 304:	ac 82       	std	Y+4, r10	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 306:	be 01       	movw	r22, r28
 308:	6b 5f       	subi	r22, 0xFB	; 251
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	85 2d       	mov	r24, r5
 30e:	96 2d       	mov	r25, r6
 310:	0f d2       	rcall	.+1054   	; 0x730 <spi_exchange>
						//アドレスを進める
						if( (blkmodetype==0xC1 && (blkreadpos&1)==1) || blkmodetype==0xC3){
							addr++;
 312:	3f ef       	ldi	r19, 0xFF	; 255
 314:	c3 1a       	sub	r12, r19
 316:	d3 0a       	sbc	r13, r19
						}
						
						//読み込みはブロック単位ではないがカウンタとして使う
						blkreadpos++;
 318:	0f 5f       	subi	r16, 0xFF	; 255
						if(blkreadpos==BLKSIZE){
 31a:	00 32       	cpi	r16, 0x20	; 32
 31c:	21 f4       	brne	.+8      	; 0x326 <__stack+0x247>
							cntblk++;
 31e:	4f ef       	ldi	r20, 0xFF	; 255
 320:	84 1a       	sub	r8, r20
 322:	94 0a       	sbc	r9, r20
							blkreadpos = 0;
 324:	00 e0       	ldi	r16, 0x00	; 0
						}
						
						//ホストへ戻し
						while(bit_is_clear(UCSRA,UDRE));
 326:	5d 9b       	sbis	0x0b, 5	; 11
 328:	fe cf       	rjmp	.-4      	; 0x326 <__stack+0x247>
						UDR = cmdresp[3];
 32a:	88 85       	ldd	r24, Y+8	; 0x08
 32c:	8c b9       	out	0x0c, r24	; 12
						
					}while(cntblk != nblks);
 32e:	28 14       	cp	r2, r8
 330:	39 04       	cpc	r3, r9
 332:	e1 f6       	brne	.-72     	; 0x2ec <__stack+0x20d>
					blkmodetype = 0;
 334:	1a 2d       	mov	r17, r10
 336:	01 c1       	rjmp	.+514    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			//UART受信完了待ち	
#if _DEBUG
			rxbuf[rxpos++] = DBGUDR;
#else
			//UART受信あり
			if(bit_is_set(UCSRA,RXC)){
 338:	5f 9b       	sbis	0x0b, 7	; 11
 33a:	0c c0       	rjmp	.+24     	; 0x354 <__stack+0x275>
				//受信バッファ異常フラグ
				//現時点では特に処理しない
				//uarterr |= (UCSRA & 0b00011000);	//bit4=フレーム異常, bit3=オーバーラン
				
				//UDRを読むと自動的に受信完了フラグは消える
				rxbuf[rxpos++] = UDR;
 33c:	8c b1       	in	r24, 0x0c	; 12
 33e:	e1 e0       	ldi	r30, 0x01	; 1
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ec 0f       	add	r30, r28
 344:	fd 1f       	adc	r31, r29
 346:	eb 0d       	add	r30, r11
 348:	f1 1d       	adc	r31, r1
 34a:	80 83       	st	Z, r24
 34c:	b3 94       	inc	r11
				cnttimeout = MAX_TIMEOUT;
 34e:	ee 24       	eor	r14, r14
 350:	ea 94       	dec	r14
 352:	fe 2c       	mov	r15, r14
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
 354:	54 e0       	ldi	r21, 0x04	; 4
 356:	b5 12       	cpse	r11, r21
 358:	f0 c0       	rjmp	.+480    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
				rxpos=0;
				if(rxbuf[0]!=0xFF && GIMSK==0){
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	8f 3f       	cpi	r24, 0xFF	; 255
 35e:	61 f0       	breq	.+24     	; 0x378 <__stack+0x299>
 360:	8b b7       	in	r24, 0x3b	; 59
 362:	81 11       	cpse	r24, r1
 364:	09 c0       	rjmp	.+18     	; 0x378 <__stack+0x299>
					//SPIでターゲットと4バイト交換する
					spi_exchange(rxbuf, cmdresp);
 366:	be 01       	movw	r22, r28
 368:	6b 5f       	subi	r22, 0xFB	; 251
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	85 2d       	mov	r24, r5
 36e:	96 2d       	mov	r25, r6
 370:	df d1       	rcall	.+958    	; 0x730 <spi_exchange>
					cmdresp[0] = 0x6F;
 372:	8f e6       	ldi	r24, 0x6F	; 111
 374:	8d 83       	std	Y+5, r24	; 0x05
 376:	0c c1       	rjmp	.+536    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
 378:	7d 82       	std	Y+5, r7	; 0x05
					cmdresp[1] = rxbuf[1];
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	8e 83       	std	Y+6, r24	; 0x06
					cmdresp[2] = 0;
 37e:	af 82       	std	Y+7, r10	; 0x07
					cmdresp[3] = 0;
 380:	a8 86       	std	Y+8, r10	; 0x08

					//コマンド振り分け
					switch(rxbuf[1]){
 382:	8e 30       	cpi	r24, 0x0E	; 14
 384:	09 f4       	brne	.+2      	; 0x388 <__stack+0x2a9>
 386:	5b c0       	rjmp	.+182    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 388:	70 f4       	brcc	.+28     	; 0x3a6 <__stack+0x2c7>
 38a:	8a 30       	cpi	r24, 0x0A	; 10
 38c:	09 f4       	brne	.+2      	; 0x390 <__stack+0x2b1>
 38e:	41 c0       	rjmp	.+130    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 390:	28 f4       	brcc	.+10     	; 0x39c <__stack+0x2bd>
 392:	88 23       	and	r24, r24
 394:	f1 f0       	breq	.+60     	; 0x3d2 <__stack+0x2f3>
 396:	86 30       	cpi	r24, 0x06	; 6
 398:	f9 f0       	breq	.+62     	; 0x3d8 <__stack+0x2f9>
 39a:	96 c0       	rjmp	.+300    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 39c:	8c 30       	cpi	r24, 0x0C	; 12
 39e:	09 f4       	brne	.+2      	; 0x3a2 <__stack+0x2c3>
 3a0:	43 c0       	rjmp	.+134    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3a2:	f0 f1       	brcs	.+124    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3a4:	48 c0       	rjmp	.+144    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3a6:	84 3c       	cpi	r24, 0xC4	; 196
 3a8:	50 f4       	brcc	.+20     	; 0x3be <__stack+0x2df>
 3aa:	80 3c       	cpi	r24, 0xC0	; 192
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <__stack+0x2d1>
 3ae:	52 c0       	rjmp	.+164    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3b0:	84 31       	cpi	r24, 0x14	; 20
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <__stack+0x2d7>
 3b4:	48 c0       	rjmp	.+144    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3b6:	85 31       	cpi	r24, 0x15	; 21
 3b8:	09 f4       	brne	.+2      	; 0x3bc <__stack+0x2dd>
 3ba:	48 c0       	rjmp	.+144    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3bc:	85 c0       	rjmp	.+266    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3be:	81 3f       	cpi	r24, 0xF1	; 241
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <__stack+0x2e5>
 3c2:	6c c0       	rjmp	.+216    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 3c4:	8f 3f       	cpi	r24, 0xFF	; 255
 3c6:	09 f4       	brne	.+2      	; 0x3ca <__stack+0x2eb>
 3c8:	7c c0       	rjmp	.+248    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 3ca:	8e 3c       	cpi	r24, 0xCE	; 206
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <__stack+0x2f1>
 3ce:	7c c0       	rjmp	.+248    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3d0:	5a c0       	rjmp	.+180    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
					case 0:	//null command
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 3d2:	8e ef       	ldi	r24, 0xFE	; 254
 3d4:	8d 83       	std	Y+5, r24	; 0x05
						break;
 3d6:	de c0       	rjmp	.+444    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
					case 6:
						//ターゲットリセットピン切り替え
						if(rxbuf[2]==0){
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	81 11       	cpse	r24, r1
 3dc:	06 c0       	rjmp	.+12     	; 0x3ea <__stack+0x30b>
							//プログラミングモードに切り替え
							//外部割り込み不許可でソフトUART使用不可に
							cbi(GIMSK, INT1);
 3de:	8b b7       	in	r24, 0x3b	; 59
 3e0:	8f 77       	andi	r24, 0x7F	; 127
 3e2:	8b bf       	out	0x3b, r24	; 59
							//ソフトSPI MOSI Low
							cbi(PORTD, 4);
 3e4:	94 98       	cbi	0x12, 4	; 18
							//RESETをlow
							cbi(PORTD, 5);
 3e6:	95 98       	cbi	0x12, 5	; 18
 3e8:	6f c0       	rjmp	.+222    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
						}
						else if(rxbuf[2]==1){
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	49 f4       	brne	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
							//実行モードに切り替え
							//ソフトUART Tx High(アイドル)
							sbi(PORTD, 4);
 3ee:	94 9a       	sbi	0x12, 4	; 18
							//RESETをhiにして実行モードへ
							sbi(PORTD, 5);
 3f0:	95 9a       	sbi	0x12, 5	; 18
							//外部割り込み許可でソフトウェアUARTに
							sbi(EIFR, INTF1);	//1を書き込むと割り込みフラグ強制解除
 3f2:	8a b7       	in	r24, 0x3a	; 58
 3f4:	80 68       	ori	r24, 0x80	; 128
 3f6:	8a bf       	out	0x3a, r24	; 58
							sbi(GIMSK, INT1);
 3f8:	8b b7       	in	r24, 0x3b	; 59
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	8b bf       	out	0x3b, r24	; 59
 3fe:	64 c0       	rjmp	.+200    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
						}
						else if(rxbuf[2]==2){
 400:	82 30       	cpi	r24, 0x02	; 2
 402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
							//RESETをlow
							cbi(PORTD, 5);
 404:	95 98       	cbi	0x12, 5	; 18
 406:	60 c0       	rjmp	.+192    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
						}
						else if(rxbuf[2]==3){
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	c1 c0       	rjmp	.+386    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
							//RESETをhigh
							sbi(PORTD, 5);					
 40e:	95 9a       	sbi	0x12, 5	; 18
 410:	5b c0       	rjmp	.+182    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
						}
						break;
					case 10: //0x0A
						//ポートB下位ニブル変更
						PORTB = (PORTB & 0xF0) | (rxbuf[2] & 0x0F);
 412:	88 b3       	in	r24, 0x18	; 24
 414:	9b 81       	ldd	r25, Y+3	; 0x03
 416:	9f 70       	andi	r25, 0x0F	; 15
 418:	80 7f       	andi	r24, 0xF0	; 240
 41a:	89 2b       	or	r24, r25
 41c:	88 bb       	out	0x18, r24	; 24
						break;
 41e:	54 c0       	rjmp	.+168    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
					case 11: //0x0B
						//ポートB下位ニブル読み取り
						cmdresp[2] = PORTB & 0x0F;
 420:	88 b3       	in	r24, 0x18	; 24
 422:	8f 70       	andi	r24, 0x0F	; 15
 424:	8f 83       	std	Y+7, r24	; 0x07
						break;
 426:	b4 c0       	rjmp	.+360    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
					case 12: //0x0C
						//ポートB下位ニブル方向変更
						DDRB = (DDRB & 0xF0) | (rxbuf[2] & 0x0F);
 428:	87 b3       	in	r24, 0x17	; 23
 42a:	9b 81       	ldd	r25, Y+3	; 0x03
 42c:	9f 70       	andi	r25, 0x0F	; 15
 42e:	80 7f       	andi	r24, 0xF0	; 240
 430:	89 2b       	or	r24, r25
 432:	87 bb       	out	0x17, r24	; 23
						break;
 434:	49 c0       	rjmp	.+146    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
					case 13: //0x0D
						//ポートB下位ニブル方向読み取り
						cmdresp[2] = DDRB & 0x0F;
 436:	87 b3       	in	r24, 0x17	; 23
 438:	8f 70       	andi	r24, 0x0F	; 15
 43a:	8f 83       	std	Y+7, r24	; 0x07
						break;
 43c:	a9 c0       	rjmp	.+338    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
					case 14: //0x0E
						//ポートB下位ニブル読み取り
						cmdresp[2] = PINB & 0x0F;
 43e:	86 b3       	in	r24, 0x16	; 22
 440:	8f 70       	andi	r24, 0x0F	; 15
 442:	8f 83       	std	Y+7, r24	; 0x07
						break;
 444:	a5 c0       	rjmp	.+330    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
					//このブリッジのバージョン
					case 20: //0x14
						cmdresp[2] = VERSION;
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	8f 83       	std	Y+7, r24	; 0x07
						break;
 44a:	a2 c0       	rjmp	.+324    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
					case 21:
						//SPIディレイ設定
						spidelay = rxbuf[2];
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <spidelay>
						break;
 452:	9e c0       	rjmp	.+316    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード開始
						blkmodetype = rxbuf[1];
						if(rxbuf[1] == 0xC0)
 454:	80 3c       	cpi	r24, 0xC0	; 192
 456:	31 f4       	brne	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
							pagesize /= 2; //flash書き込みはword単位
 458:	2d a5       	ldd	r18, Y+45	; 0x2d
 45a:	3e a5       	ldd	r19, Y+46	; 0x2e
 45c:	36 95       	lsr	r19
 45e:	27 95       	ror	r18
 460:	3e a7       	std	Y+46, r19	; 0x2e
 462:	2d a7       	std	Y+45, r18	; 0x2d
						nblks = rxbuf[2];
 464:	2b 80       	ldd	r2, Y+3	; 0x03
 466:	31 2c       	mov	r3, r1
						nblks <<= 8;
 468:	32 2c       	mov	r3, r2
 46a:	22 24       	eor	r2, r2
						nblks += rxbuf[3];
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	29 0e       	add	r2, r25
 470:	31 1c       	adc	r3, r1
					case 0xC0:
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード開始
						blkmodetype = rxbuf[1];
 472:	18 2f       	mov	r17, r24
						
						addr = 0;
						blkwritepos = 0;
						blkreadpos = 0;
						cntblk = 0;
						pagepos = 0;
 474:	1c a6       	std	Y+44, r1	; 0x2c
 476:	1b a6       	std	Y+43, r1	; 0x2b
							pagesize /= 2; //flash書き込みはword単位
						nblks = rxbuf[2];
						nblks <<= 8;
						nblks += rxbuf[3];
						
						addr = 0;
 478:	c1 2c       	mov	r12, r1
 47a:	d1 2c       	mov	r13, r1
						blkwritepos = 0;
 47c:	41 2c       	mov	r4, r1
						blkreadpos = 0;
 47e:	00 e0       	ldi	r16, 0x00	; 0
						cntblk = 0;
 480:	81 2c       	mov	r8, r1
 482:	91 2c       	mov	r9, r1
						pagepos = 0;
						break;
 484:	85 c0       	rjmp	.+266    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
					case 0xCE:
						//ページサイズ設定
						//rxbuf[2]に上位8bit、[3]に下位8bit
						pagesize = rxbuf[2];
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	90 e0       	ldi	r25, 0x00	; 0
						pagesize <<= 8;
 48a:	98 2f       	mov	r25, r24
 48c:	88 27       	eor	r24, r24
						pagesize += rxbuf[3];
 48e:	2c 81       	ldd	r18, Y+4	; 0x04
 490:	ac 01       	movw	r20, r24
 492:	42 0f       	add	r20, r18
 494:	51 1d       	adc	r21, r1
 496:	5e a7       	std	Y+46, r21	; 0x2e
 498:	4d a7       	std	Y+45, r20	; 0x2d
						break;
 49a:	7a c0       	rjmp	.+244    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
					case 0xF1:
						//ホストからターゲットへソフトUARTでデータ送信
						if(suatxbit != -1){
 49c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 4a0:	8f 3f       	cpi	r24, 0xFF	; 255
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
							//すでに送信中
							cmdresp[3] = 0xFF;
 4a4:	78 86       	std	Y+8, r7	; 0x08
 4a6:	74 c0       	rjmp	.+232    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
						}
						else{
							suatxbuf = rxbuf[2];
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <suatxbuf>
							//タイマを開始
							TCNT1 = 0;
 4ae:	1d bc       	out	0x2d, r1	; 45
 4b0:	1c bc       	out	0x2c, r1	; 44
							TCCR1B |= 0b00000011;
 4b2:	8e b5       	in	r24, 0x2e	; 46
 4b4:	83 60       	ori	r24, 0x03	; 3
 4b6:	8e bd       	out	0x2e, r24	; 46
							//スタートビット送出
							cbi(PORTD,4);
 4b8:	94 98       	cbi	0x12, 4	; 18
							suatxbit = 1;
 4ba:	51 e0       	ldi	r21, 0x01	; 1
 4bc:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <suatxbit>
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
						}
						break;
					case 0xFF:
						//padding command
						//no response
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 4c2:	8e ef       	ldi	r24, 0xFE	; 254
 4c4:	8d 83       	std	Y+5, r24	; 0x05
						break;
 4c6:	66 c0       	rjmp	.+204    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 4c8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ca:	8e 3f       	cpi	r24, 0xFE	; 254
 4cc:	a9 f1       	breq	.+106    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
					txbuf[txinpos++] = cmdresp[0];
 4ce:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	9e 0f       	add	r25, r30
 4d6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <txinpos>
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	e9 59       	subi	r30, 0x99	; 153
 4de:	ff 4f       	sbci	r31, 0xFF	; 255
 4e0:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[1];
 4e2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	8e 0f       	add	r24, r30
 4ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	8e 81       	ldd	r24, Y+6	; 0x06
 4f2:	e9 59       	subi	r30, 0x99	; 153
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[2];
 4f8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	8e 0f       	add	r24, r30
 500:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	8f 81       	ldd	r24, Y+7	; 0x07
 508:	e9 59       	subi	r30, 0x99	; 153
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[3];
 50e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	8e 0f       	add	r24, r30
 516:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	88 85       	ldd	r24, Y+8	; 0x08
 51e:	e9 59       	subi	r30, 0x99	; 153
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	80 83       	st	Z, r24
					txinpos &= TXBUFMAXMASK;
 524:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 528:	8f 70       	andi	r24, 0x0F	; 15
 52a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 52e:	ba 2c       	mov	r11, r10
 530:	04 c0       	rjmp	.+8      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
						blkwritepos=0;
 532:	41 2c       	mov	r4, r1
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
 534:	00 e0       	ldi	r16, 0x00	; 0
 536:	01 c0       	rjmp	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 538:	ba 2c       	mov	r11, r10
			} //if(rxpos==4)
		} // if(!blockmode)
		
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	e8 1a       	sub	r14, r24
 53e:	f1 08       	sbc	r15, r1
		if(cnttimeout==0){
 540:	09 f0       	breq	.+2      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 542:	e7 cd       	rjmp	.-1074   	; 0x112 <__stack+0x33>
 544:	a6 cd       	rjmp	.-1204   	; 0x92 <__DATA_REGION_LENGTH__+0x12>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 546:	9c a5       	ldd	r25, Y+44	; 0x2c
 548:	9a 83       	std	Y+2, r25	; 0x02
					spibuf[2] = pagepos&0xFF;
 54a:	2b a5       	ldd	r18, Y+43	; 0x2b
 54c:	2b 83       	std	Y+3, r18	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 54e:	e9 e0       	ldi	r30, 0x09	; 9
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	ec 0f       	add	r30, r28
 554:	fd 1f       	adc	r31, r29
 556:	e0 0f       	add	r30, r16
 558:	f1 1d       	adc	r31, r1
 55a:	80 81       	ld	r24, Z
 55c:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 55e:	be 01       	movw	r22, r28
 560:	6b 5f       	subi	r22, 0xFB	; 251
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	85 2d       	mov	r24, r5
 566:	96 2d       	mov	r25, r6
 568:	e3 d0       	rcall	.+454    	; 0x730 <spi_exchange>
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 56a:	4d a5       	ldd	r20, Y+45	; 0x2d
 56c:	5e a5       	ldd	r21, Y+46	; 0x2e
 56e:	8b a5       	ldd	r24, Y+43	; 0x2b
 570:	9c a5       	ldd	r25, Y+44	; 0x2c
 572:	48 17       	cp	r20, r24
 574:	59 07       	cpc	r21, r25
 576:	09 f0       	breq	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 578:	77 ce       	rjmp	.-786    	; 0x268 <__stack+0x189>
 57a:	61 ce       	rjmp	.-830    	; 0x23e <__stack+0x15f>
					do{
						if(blkmodetype==0xC1)
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
						else if(blkmodetype==0xC3)
							spibuf[0] = 0xA0;
						spibuf[1] = addr>>8;	//アドレス上位
 57c:	da 82       	std	Y+2, r13	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 57e:	cb 82       	std	Y+3, r12	; 0x03
						spibuf[3] = 0;
 580:	ac 82       	std	Y+4, r10	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 582:	be 01       	movw	r22, r28
 584:	6b 5f       	subi	r22, 0xFB	; 251
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	85 2d       	mov	r24, r5
 58a:	96 2d       	mov	r25, r6
 58c:	d1 d0       	rcall	.+418    	; 0x730 <spi_exchange>
 58e:	c4 ce       	rjmp	.-632    	; 0x318 <__stack+0x239>
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 590:	8d 81       	ldd	r24, Y+5	; 0x05
 592:	9d cf       	rjmp	.-198    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 594:	ba 2c       	mov	r11, r10
 596:	d1 cf       	rjmp	.-94     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
					cnttimeout = MAX_TIMEOUT;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 598:	80 e4       	ldi	r24, 0x40	; 64
 59a:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 59c:	9c a5       	ldd	r25, Y+44	; 0x2c
 59e:	9a 83       	std	Y+2, r25	; 0x02
					spibuf[2] = pagepos&0xFF;
 5a0:	2b a5       	ldd	r18, Y+43	; 0x2b
 5a2:	2b 83       	std	Y+3, r18	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 5a4:	e9 e0       	ldi	r30, 0x09	; 9
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	ec 0f       	add	r30, r28
 5aa:	fd 1f       	adc	r31, r29
 5ac:	e0 0f       	add	r30, r16
 5ae:	f1 1d       	adc	r31, r1
 5b0:	80 81       	ld	r24, Z
 5b2:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 5b4:	be 01       	movw	r22, r28
 5b6:	6b 5f       	subi	r22, 0xFB	; 251
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	85 2d       	mov	r24, r5
 5bc:	96 2d       	mov	r25, r6
 5be:	b8 d0       	rcall	.+368    	; 0x730 <spi_exchange>
 5c0:	2e ce       	rjmp	.-932    	; 0x21e <__stack+0x13f>
					cnttimeout = MAX_TIMEOUT;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 5c2:	88 e4       	ldi	r24, 0x48	; 72
 5c4:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 5c6:	3c a5       	ldd	r19, Y+44	; 0x2c
 5c8:	3a 83       	std	Y+2, r19	; 0x02
					spibuf[2] = pagepos&0xFF;
 5ca:	4b a5       	ldd	r20, Y+43	; 0x2b
 5cc:	4b 83       	std	Y+3, r20	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 5ce:	e9 e0       	ldi	r30, 0x09	; 9
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	ec 0f       	add	r30, r28
 5d4:	fd 1f       	adc	r31, r29
 5d6:	e0 0f       	add	r30, r16
 5d8:	f1 1d       	adc	r31, r1
 5da:	80 81       	ld	r24, Z
 5dc:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 5de:	be 01       	movw	r22, r28
 5e0:	6b 5f       	subi	r22, 0xFB	; 251
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	85 2d       	mov	r24, r5
 5e6:	96 2d       	mov	r25, r6
 5e8:	a3 d0       	rcall	.+326    	; 0x730 <spi_exchange>
 5ea:	13 ce       	rjmp	.-986    	; 0x212 <__stack+0x133>
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					do{
						if(blkmodetype==0xC1)
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 5ec:	58 e2       	ldi	r21, 0x28	; 40
 5ee:	59 83       	std	Y+1, r21	; 0x01
						else if(blkmodetype==0xC3)
							spibuf[0] = 0xA0;
						spibuf[1] = addr>>8;	//アドレス上位
 5f0:	da 82       	std	Y+2, r13	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 5f2:	cb 82       	std	Y+3, r12	; 0x03
						spibuf[3] = 0;
 5f4:	ac 82       	std	Y+4, r10	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 5f6:	be 01       	movw	r22, r28
 5f8:	6b 5f       	subi	r22, 0xFB	; 251
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	85 2d       	mov	r24, r5
 5fe:	96 2d       	mov	r25, r6
 600:	97 d0       	rcall	.+302    	; 0x730 <spi_exchange>
 602:	87 ce       	rjmp	.-754    	; 0x312 <__stack+0x233>
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					do{
						if(blkmodetype==0xC1)
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 604:	80 e2       	ldi	r24, 0x20	; 32
 606:	89 83       	std	Y+1, r24	; 0x01
						else if(blkmodetype==0xC3)
							spibuf[0] = 0xA0;
						spibuf[1] = addr>>8;	//アドレス上位
 608:	da 82       	std	Y+2, r13	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 60a:	cb 82       	std	Y+3, r12	; 0x03
						spibuf[3] = 0;
 60c:	ac 82       	std	Y+4, r10	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 60e:	be 01       	movw	r22, r28
 610:	6b 5f       	subi	r22, 0xFB	; 251
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	85 2d       	mov	r24, r5
 616:	96 2d       	mov	r25, r6
 618:	8b d0       	rcall	.+278    	; 0x730 <spi_exchange>
 61a:	7e ce       	rjmp	.-772    	; 0x318 <__stack+0x239>
