
avrewbridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000078  0000066e  2**0
                  ALLOC
  2 .bss          00000037  00800060  00800060  00000802  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000831  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b98  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056b  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008bd  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000050f  00000000  00000000  0000243f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000294e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  0000074c  0000074c  00000800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000030  0000071c  0000071c  000007d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_13 000000b8  000005ba  000005ba  0000066e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_4 0000005c  00000672  00000672  00000726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_exchange 0000004e  000006ce  000006ce  00000782  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000542  00000078  00000078  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	a4 c3       	rjmp	.+1864   	; 0x74c <__bad_interrupt>
   4:	8b c3       	rjmp	.+1814   	; 0x71c <__vector_2>
   6:	a2 c3       	rjmp	.+1860   	; 0x74c <__bad_interrupt>
   8:	34 c3       	rjmp	.+1640   	; 0x672 <__vector_4>
   a:	a0 c3       	rjmp	.+1856   	; 0x74c <__bad_interrupt>
   c:	9f c3       	rjmp	.+1854   	; 0x74c <__bad_interrupt>
   e:	9e c3       	rjmp	.+1852   	; 0x74c <__bad_interrupt>
  10:	9d c3       	rjmp	.+1850   	; 0x74c <__bad_interrupt>
  12:	9c c3       	rjmp	.+1848   	; 0x74c <__bad_interrupt>
  14:	9b c3       	rjmp	.+1846   	; 0x74c <__bad_interrupt>
  16:	9a c3       	rjmp	.+1844   	; 0x74c <__bad_interrupt>
  18:	99 c3       	rjmp	.+1842   	; 0x74c <__bad_interrupt>
  1a:	cf c2       	rjmp	.+1438   	; 0x5ba <__vector_13>
  1c:	97 c3       	rjmp	.+1838   	; 0x74c <__bad_interrupt>
  1e:	96 c3       	rjmp	.+1836   	; 0x74c <__bad_interrupt>
  20:	95 c3       	rjmp	.+1834   	; 0x74c <__bad_interrupt>
  22:	94 c3       	rjmp	.+1832   	; 0x74c <__bad_interrupt>
  24:	93 c3       	rjmp	.+1830   	; 0x74c <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	80 00       	.word	0x0080	; ????

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf ed       	ldi	r28, 0xDF	; 223
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	e6 e2       	ldi	r30, 0x26	; 38
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	17 c0       	rjmp	.+46     	; 0x6a <__do_clear_bss+0x8>
  3c:	b5 91       	lpm	r27, Z+
  3e:	a5 91       	lpm	r26, Z+
  40:	35 91       	lpm	r19, Z+
  42:	25 91       	lpm	r18, Z+
  44:	05 91       	lpm	r16, Z+
  46:	07 fd       	sbrc	r16, 7
  48:	0c c0       	rjmp	.+24     	; 0x62 <__do_clear_bss>
  4a:	95 91       	lpm	r25, Z+
  4c:	85 91       	lpm	r24, Z+
  4e:	ef 01       	movw	r28, r30
  50:	f9 2f       	mov	r31, r25
  52:	e8 2f       	mov	r30, r24
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 17       	cp	r26, r18
  5a:	b3 07       	cpc	r27, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__SREG__+0x15>
  5e:	fe 01       	movw	r30, r28
  60:	04 c0       	rjmp	.+8      	; 0x6a <__do_clear_bss+0x8>

00000062 <__do_clear_bss>:
  62:	1d 92       	st	X+, r1
  64:	a2 17       	cp	r26, r18
  66:	b3 07       	cpc	r27, r19
  68:	e1 f7       	brne	.-8      	; 0x62 <__do_clear_bss>
  6a:	eb 32       	cpi	r30, 0x2B	; 43
  6c:	f4 07       	cpc	r31, r20
  6e:	31 f7       	brne	.-52     	; 0x3c <__do_copy_data+0x8>
  70:	03 d0       	rcall	.+6      	; 0x78 <_etext>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_exit>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>

Disassembly of section .text:

0000074c <__bad_interrupt>:
 74c:	59 cc       	rjmp	.-1870   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

0000071c <__vector_2>:


//外部割り込み1(INT1)
//ソフトUART受信スタートビット検出
ISR(INT1_vect)
{
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	8f 93       	push	r24
	suarxbuf = 0;
 728:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <suarxbuf>
	suarxbit = 0;
 72c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <suarxbit>
	
	//ピン変化割り込み不許可
	cbi(GIMSK, INT1);
 730:	8b b7       	in	r24, 0x3b	; 59
 732:	8f 77       	andi	r24, 0x7F	; 127
 734:	8b bf       	out	0x3b, r24	; 59

	//タイマ開始
	TCNT0 = 15;	//パルスの真ん中で採取するためのウエイト
 736:	8f e0       	ldi	r24, 0x0F	; 15
 738:	82 bf       	out	0x32, r24	; 50
	TCCR0B |= 0b00000011;
 73a:	83 b7       	in	r24, 0x33	; 51
 73c:	83 60       	ori	r24, 0x03	; 3
 73e:	83 bf       	out	0x33, r24	; 51
}
 740:	8f 91       	pop	r24
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

Disassembly of section .text.__vector_13:

000005ba <__vector_13>:


//タイマー0比較A一致
//ソフトUART受信データビット検出
ISR(TIMER0_COMPA_vect)
{	
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
	uint8_t f_bitset;
	
	//ピンのhigh, low取得
	f_bitset = bit_is_set(PIND,3);
 5c8:	80 b3       	in	r24, 0x10	; 16
 5ca:	88 70       	andi	r24, 0x08	; 8
	
	//スタートビットを再確認し不正なスタートビットを検出
	if(suarxbit == 0 && f_bitset){
 5cc:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <suarxbit>
 5d0:	91 11       	cpse	r25, r1
 5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <__vector_13+0x38>
 5d4:	88 23       	and	r24, r24
 5d6:	e1 f1       	breq	.+120    	; 0x650 <__vector_13+0x96>
		//タイマ停止
		TCCR0B &= 0b11111000;
 5d8:	83 b7       	in	r24, 0x33	; 51
 5da:	88 7f       	andi	r24, 0xF8	; 248
 5dc:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 5de:	8a b7       	in	r24, 0x3a	; 58
 5e0:	80 68       	ori	r24, 0x80	; 128
 5e2:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 5e4:	8b b7       	in	r24, 0x3b	; 59
 5e6:	80 68       	ori	r24, 0x80	; 128
 5e8:	8b bf       	out	0x3b, r24	; 59
		suarxbit = -1;
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <suarxbit>
		return;
 5f0:	39 c0       	rjmp	.+114    	; 0x664 <__vector_13+0xaa>
	}
	//ストップビット
	else if(suarxbit == 9){
 5f2:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <suarxbit>
 5f6:	99 30       	cpi	r25, 0x09	; 9
 5f8:	79 f4       	brne	.+30     	; 0x618 <__vector_13+0x5e>
		//タイマ停止
		TCCR0B &= 0b11111000;
 5fa:	93 b7       	in	r25, 0x33	; 51
 5fc:	98 7f       	andi	r25, 0xF8	; 248
 5fe:	93 bf       	out	0x33, r25	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 600:	9a b7       	in	r25, 0x3a	; 58
 602:	90 68       	ori	r25, 0x80	; 128
 604:	9a bf       	out	0x3a, r25	; 58
		sbi(GIMSK, INT1);
 606:	9b b7       	in	r25, 0x3b	; 59
 608:	90 68       	ori	r25, 0x80	; 128
 60a:	9b bf       	out	0x3b, r25	; 59
		
		//不正なストップビット検出
		if(!f_bitset){
 60c:	81 11       	cpse	r24, r1
 60e:	10 c0       	rjmp	.+32     	; 0x630 <__vector_13+0x76>
			suarxbit = -1;	//こうするとメインループでホストに送信しない
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <suarxbit>
			return;
 616:	26 c0       	rjmp	.+76     	; 0x664 <__vector_13+0xaa>
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 618:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <suarxbuf>
 61c:	96 95       	lsr	r25
 61e:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <suarxbuf>
		if(f_bitset){
 622:	88 23       	and	r24, r24
 624:	29 f0       	breq	.+10     	; 0x630 <__vector_13+0x76>
			suarxbuf |= 0b10000000;
 626:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <suarxbuf>
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <suarxbuf>
		}
	}
	
	//次のビットへ
	suarxbit++;
 630:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <suarxbit>
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <suarxbit>
 63a:	14 c0       	rjmp	.+40     	; 0x664 <__vector_13+0xaa>
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
		//タイマ停止
		TCCR0B &= 0b11111000;
 63c:	83 b7       	in	r24, 0x33	; 51
 63e:	88 7f       	andi	r24, 0xF8	; 248
 640:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 642:	8a b7       	in	r24, 0x3a	; 58
 644:	80 68       	ori	r24, 0x80	; 128
 646:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 648:	8b b7       	in	r24, 0x3b	; 59
 64a:	80 68       	ori	r24, 0x80	; 128
 64c:	8b bf       	out	0x3b, r24	; 59
 64e:	e0 cf       	rjmp	.-64     	; 0x610 <__vector_13+0x56>
		sbi(GIMSK, INT1);
		suarxbit = -1;
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
 650:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <suarxbit>
 654:	89 30       	cpi	r24, 0x09	; 9
 656:	91 f3       	breq	.-28     	; 0x63c <__vector_13+0x82>
			return;
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 658:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <suarxbuf>
 65c:	86 95       	lsr	r24
 65e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <suarxbuf>
 662:	e6 cf       	rjmp	.-52     	; 0x630 <__vector_13+0x76>
		}
	}
	
	//次のビットへ
	suarxbit++;
}
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

Disassembly of section .text.__vector_4:

00000672 <__vector_4>:


//タイマー1比較A一致
//ソフトUART送信
ISR(TIMER1_COMPA_vect)
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	8f 93       	push	r24
	//ストップビット
	if(suatxbit==9){
 67e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <suatxbit>
 682:	89 30       	cpi	r24, 0x09	; 9
 684:	11 f4       	brne	.+4      	; 0x68a <__vector_4+0x18>
		sbi(PORTD,4);
 686:	94 9a       	sbi	0x12, 4	; 18
 688:	17 c0       	rjmp	.+46     	; 0x6b8 <__vector_4+0x46>
	}
	//送出完了
	else if(suatxbit==10){
 68a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <suatxbit>
 68e:	8a 30       	cpi	r24, 0x0A	; 10
 690:	39 f4       	brne	.+14     	; 0x6a0 <__vector_4+0x2e>
		//タイマ停止する
		TCCR1B &= 0b11111000;
 692:	8e b5       	in	r24, 0x2e	; 46
 694:	88 7f       	andi	r24, 0xF8	; 248
 696:	8e bd       	out	0x2e, r24	; 46
		suatxbit = -1;
 698:	8f ef       	ldi	r24, 0xFF	; 255
 69a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <suatxbit>
		return;
 69e:	11 c0       	rjmp	.+34     	; 0x6c2 <__vector_4+0x50>
	}
	//データビット
	else{
		if(suatxbuf & 1)
 6a0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <suatxbuf>
 6a4:	80 ff       	sbrs	r24, 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <__vector_4+0x3a>
			sbi(PORTD,4);
 6a8:	94 9a       	sbi	0x12, 4	; 18
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <__vector_4+0x3c>
		else
			cbi(PORTD,4);
 6ac:	94 98       	cbi	0x12, 4	; 18
		suatxbuf >>= 1;			
 6ae:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <suatxbuf>
 6b2:	86 95       	lsr	r24
 6b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <suatxbuf>
	}
	
	//次のビットへ
	suatxbit++;
 6b8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <suatxbit>
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <suatxbit>
}
 6c2:	8f 91       	pop	r24
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	0f 90       	pop	r0
 6ca:	1f 90       	pop	r1
 6cc:	18 95       	reti

Disassembly of section .text.spi_exchange:

000006ce <spi_exchange>:


//4バイトSPIで交換する
//USIは使わず任意のピンを使う
void spi_exchange(uint8_t *poutdata, uint8_t *pindata)
{
 6ce:	fc 01       	movw	r30, r24
 6d0:	a6 2f       	mov	r26, r22
 6d2:	b7 2f       	mov	r27, r23
 6d4:	bc 01       	movw	r22, r24
 6d6:	6c 5f       	subi	r22, 0xFC	; 252
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t		delaycnt;

	
	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
 6da:	41 91       	ld	r20, Z+
 6dc:	38 e0       	ldi	r19, 0x08	; 8
		indata = 0;
 6de:	20 e0       	ldi	r18, 0x00	; 0
		bitcount = 8;
		while(bitcount){
			//送信データ(MSB先行)
			if(outdata&0x80)
 6e0:	44 23       	and	r20, r20
 6e2:	14 f4       	brge	.+4      	; 0x6e8 <spi_exchange+0x1a>
				sbi(PORTD,4);
 6e4:	94 9a       	sbi	0x12, 4	; 18
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <spi_exchange+0x1c>
			else
				cbi(PORTD,4);
 6e8:	94 98       	cbi	0x12, 4	; 18
			outdata <<= 1;
 6ea:	44 0f       	add	r20, r20
			//クロック上昇
			sbi(PORTB, 4);
 6ec:	c4 9a       	sbi	0x18, 4	; 24
			delaycnt = spidelay;
 6ee:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <spidelay>
			while(delaycnt) delaycnt--;
 6f2:	99 23       	and	r25, r25
 6f4:	11 f0       	breq	.+4      	; 0x6fa <spi_exchange+0x2c>
 6f6:	91 50       	subi	r25, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <spi_exchange+0x28>
			//受信データ
			indata <<= 1;
 6fa:	22 0f       	add	r18, r18
			if(PIND & 0b00001000)
 6fc:	83 99       	sbic	0x10, 3	; 16
				indata |= 1;
 6fe:	21 60       	ori	r18, 0x01	; 1
			//クロック下降
			bitcount--;
			cbi(PORTB, 4);
 700:	c4 98       	cbi	0x18, 4	; 24
			delaycnt = spidelay;
 702:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <spidelay>
			while(delaycnt) delaycnt--;
 706:	99 23       	and	r25, r25
 708:	11 f0       	breq	.+4      	; 0x70e <spi_exchange+0x40>
 70a:	91 50       	subi	r25, 0x01	; 1
 70c:	f1 f7       	brne	.-4      	; 0x70a <spi_exchange+0x3c>
 70e:	31 50       	subi	r19, 0x01	; 1
	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
		indata = 0;
		bitcount = 8;
		while(bitcount){
 710:	39 f7       	brne	.-50     	; 0x6e0 <spi_exchange+0x12>
			bitcount--;
			cbi(PORTB, 4);
			delaycnt = spidelay;
			while(delaycnt) delaycnt--;
		}
		pindata[4-bytecount] = indata;
 712:	2d 93       	st	X+, r18
	uint8_t		indata;
	uint8_t		delaycnt;

	
	bytecount = 4;
	while(bytecount){
 714:	e6 17       	cp	r30, r22
 716:	f7 07       	cpc	r31, r23
 718:	01 f7       	brne	.-64     	; 0x6da <spi_exchange+0xc>
		}
		pindata[4-bytecount] = indata;
		bytecount--;
	}

}
 71a:	08 95       	ret

Disassembly of section .text.main:

00000078 <main>:
#endif



int main(void) 
{
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	dd 27       	eor	r29, r29
  80:	c8 50       	subi	r28, 0x08	; 8
  82:	cd bf       	out	0x3d, r28	; 61
	uint16_t pagesize;		//1ページのサイズ
	uint16_t pagepos;		//ページ内の走査位置


	//マスター割り込み禁止
	cli();
  84:	f8 94       	cli
   GND ┃GN  D6┃SpeedSW
       ┗━━━┛
*/

	//IO方向セット(0入力,1出力)
	DDRB  = 0b00010000;
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	87 bb       	out	0x17, r24	; 23
	DDRD  = 0b00110010;
  8a:	82 e3       	ldi	r24, 0x32	; 50
  8c:	81 bb       	out	0x11, r24	; 17

	//ポート初期化
	//出力の場合1でHigh、0でLow
	//入力の場合1を書くとプルアップ抵抗活性化、0を書くとハイインピーダンス
	PORTB = 0b00000000;
  8e:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b01010001;
  90:	81 e5       	ldi	r24, 0x51	; 81
  92:	82 bb       	out	0x12, r24	; 18
	//タイマ設定
	
	//TCCR0
	//B3,A1,A0	動作種別、CTC動作は010
	//B210	プリスケーラ(000:停止, 001:1, 010:8, 011:64, 100:256, 101:1024, 110,111:予約)
	TCCR0A = 0b00000010;
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	90 bf       	out	0x30, r25	; 48
	TCCR0B = 0b00000000;
  98:	13 be       	out	0x33, r1	; 51

	//タイマ0比較値(AVRのクロック/UART速度/プリスケーラ)
	OCR0A = 31;
  9a:	8f e1       	ldi	r24, 0x1F	; 31
  9c:	86 bf       	out	0x36, r24	; 54
	TCNT0 = 0;
  9e:	12 be       	out	0x32, r1	; 50
	
	//TCCR1
	//B4,B3,A1,A0 動作種別 	CTCは0100(比較A一致)か1100(捕獲一致)
	//B210	プリスケーラ 設定値はタイマ0と同じ
	TCCR1A = 0;
  a0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001000;
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	8e bd       	out	0x2e, r24	; 46
	OCR1A  = 32;
  a6:	20 e2       	ldi	r18, 0x20	; 32
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	3b bd       	out	0x2b, r19	; 43
  ac:	2a bd       	out	0x2a, r18	; 42
	TCNT1  = 0;
  ae:	1d bc       	out	0x2d, r1	; 45
  b0:	1c bc       	out	0x2c, r1	; 44

	//タイマ割り込みはここで許可するが、タイマーが動いていないので割り込みはまだ発生しない
	TIMSK = 1<<OCIE0A | 1<<OCIE1A;
  b2:	21 e4       	ldi	r18, 0x41	; 65
  b4:	29 bf       	out	0x39, r18	; 57
	//MCU制御
	//7		1を書くとプルアップ禁止
	//6,5,4	休止種別、休止許可
	//3,2	INT1割り込み条件(00:Low,01:両端,10:下降,11:上昇)
	//1,0	INT0割り込み条件
	MCUCR = 0b00001000;
  b6:	85 bf       	out	0x35, r24	; 53
	//ピン割り込みは実行モードになったら許可するのでここではまだ不許可
	GIMSK = 0;
  b8:	1b be       	out	0x3b, r1	; 59

	//////////////////////////////////////////////////////////////////////
	//USART設定

	//初期化時はボーレート0にする必要がある
	UBRRH = 0;
  ba:	12 b8       	out	0x02, r1	; 2
	UBRRL = 0;
  bc:	19 b8       	out	0x09, r1	; 9

	//データレジスタ
	UDR = 0;
  be:	1c b8       	out	0x0c, r1	; 12
	//4	フレーミングエラーフラグ
	//3	データオーバーランフラグ
	//2	パリティエラーフラグ
	//1	倍速許可
	//0	マルチプロセッサ許可
	UCSRA = 0b00000000;
  c0:	1b b8       	out	0x0b, r1	; 11
	//4	受信(RXD0pin)許可
	//3	送信(TXD0pin)許可
	//2	データビット長選択2
	//1	受信追加データビット(9ビットフレームの時使用)
	//0	送信追加データビット(9ビットフレームの時使用)
	UCSRB = 0b00011000;
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
	//76 動作モード選択(00:非同期(調歩), 01:同期, 11:SPI)
	//54 パリティ選択(00:パリティなし, 10:偶数, 11:奇数)
	//3	 ストップビット(0:1bit, 1:2bit)
	//21 データビット長選択10(8bitは011)
	//0	 クロック極性(0:送信立ち上がり,受信立下り, 1:その逆、同期動作時のみ有効)
	UCSRC = 0b00000110;
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	83 b9       	out	0x03, r24	; 3

	//ボーレート
	UBRRH = 0;
  ca:	12 b8       	out	0x02, r1	; 2
	UBRRL = UBRR_VAL;
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	89 b9       	out	0x09, r24	; 9

	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
  d0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <txinpos>
	txoutpos = 0;
  d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <txoutpos>
	rxpos = 0;
	rxbuf[0] = 0x55;
  d8:	85 e5       	ldi	r24, 0x55	; 85
  da:	89 83       	std	Y+1, r24	; 0x01
	rxbuf[1] = 0x55;
  dc:	8a 83       	std	Y+2, r24	; 0x02
	cmdresp[0] = 0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8d 83       	std	Y+5, r24	; 0x05
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
  e2:	1e 82       	std	Y+6, r1	; 0x06
	cmdresp[2] = 0;
  e4:	1f 82       	std	Y+7, r1	; 0x07
	cmdresp[3] = 0;
  e6:	18 86       	std	Y+8, r1	; 0x08
	suarxbit = -1;
  e8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <suarxbit>
	suatxbit = -1;
  ec:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <suatxbit>
	blkmodetype = 0;
	spidelay = 2;
  f0:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <spidelay>
	

	//マスター割り込み許可
	sei();
  f4:	78 94       	sei
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	suarxbit = -1;
	suatxbit = -1;
	blkmodetype = 0;
  f6:	10 e0       	ldi	r17, 0x00	; 0
	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
	txoutpos = 0;
	rxpos = 0;
  f8:	31 2c       	mov	r3, r1
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
  fa:	51 2c       	mov	r5, r1
					spi_exchange(rxbuf, cmdresp);
					cmdresp[0] = 0x6F;
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
  fc:	44 24       	eor	r4, r4
  fe:	4a 94       	dec	r4
 100:	07 c0       	rjmp	.+14     	; 0x110 <__stack+0x31>
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
						blkwritepos=0;
 102:	21 2c       	mov	r2, r1
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
 104:	00 e0       	ldi	r16, 0x00	; 0
 106:	04 c0       	rjmp	.+8      	; 0x110 <__stack+0x31>
 108:	15 2d       	mov	r17, r5
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__stack+0x31>
 10c:	15 2d       	mov	r17, r5
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 10e:	35 2c       	mov	r3, r5
	while(1){
		///////////////////////////////////////////////////////////////////////
		//UART送信
		
		//ブリッジからホストへ送信
		if(txinpos != txoutpos){
 110:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <txinpos>
 114:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <txoutpos>
 118:	98 17       	cp	r25, r24
 11a:	91 f0       	breq	.+36     	; 0x140 <__stack+0x61>
			//UART送信レジスタ空き待ちフラグ(UDRE)
			if(bit_is_set(UCSRA,UDRE)){
 11c:	5d 9b       	sbis	0x0b, 5	; 11
 11e:	10 c0       	rjmp	.+32     	; 0x140 <__stack+0x61>
				//送信データセット
				//同時に送信が開始され、UDREは解除される
				UDR = txbuf[txoutpos++];
 120:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <txoutpos>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	8e 0f       	add	r24, r30
 128:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <txoutpos>
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e9 57       	subi	r30, 0x79	; 121
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	8c b9       	out	0x0c, r24	; 12
				txoutpos &= TXBUFMAXMASK; //if(txoutpos==TXBUFSIZE) txoutpos = 0;と同じ効果
 136:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <txoutpos>
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <txoutpos>
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
 140:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <suarxbit>
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	09 f0       	breq	.+2      	; 0x14a <__stack+0x6b>
 148:	d8 c1       	rjmp	.+944    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			suarxbit = -1;
 14a:	40 92 80 00 	sts	0x0080, r4	; 0x800080 <suarxbit>
			txbuf[txinpos] = 0xFF;
 14e:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e9 57       	subi	r30, 0x79	; 121
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	40 82       	st	Z, r4
			txbuf[txinpos+1] = 0xF2;
 15a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e8 57       	subi	r30, 0x78	; 120
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	82 ef       	ldi	r24, 0xF2	; 242
 166:	80 83       	st	Z, r24
			txbuf[txinpos+2] = suarxbuf;
 168:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <suarxbuf>
 172:	e7 57       	subi	r30, 0x77	; 119
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 83       	st	Z, r24
			txbuf[txinpos+3] = 0;
 178:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	e6 57       	subi	r30, 0x76	; 118
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	10 82       	st	Z, r1
			txinpos += 4;
 184:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <txinpos>
 188:	8c 5f       	subi	r24, 0xFC	; 252
 18a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
			txinpos &= TXBUFMAXMASK; //if(txinpos==TXBUFSIZE) txinpos = 0;と同じ効果
 18e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <txinpos>
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>

		///////////////////////////////////////////////////////////////////////
		//UART受信

		//ブロック転送のときは4バイト固定ではなく指定したブロック長になる
		if(blkmodetype!=0){
 198:	11 23       	and	r17, r17
 19a:	09 f4       	brne	.+2      	; 0x19e <__stack+0xbf>
 19c:	bb c0       	rjmp	.+374    	; 0x314 <__stack+0x235>
			switch(blkmodetype){
 19e:	11 3c       	cpi	r17, 0xC1	; 193
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <__stack+0xc5>
 1a2:	8c c0       	rjmp	.+280    	; 0x2bc <__stack+0x1dd>
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <__stack+0xcd>
 1a6:	10 3c       	cpi	r17, 0xC0	; 192
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <__stack+0xd9>
 1aa:	b2 cf       	rjmp	.-156    	; 0x110 <__stack+0x31>
 1ac:	12 3c       	cpi	r17, 0xC2	; 194
 1ae:	21 f0       	breq	.+8      	; 0x1b8 <__stack+0xd9>
 1b0:	13 3c       	cpi	r17, 0xC3	; 195
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <__stack+0xd7>
 1b4:	83 c0       	rjmp	.+262    	; 0x2bc <__stack+0x1dd>
 1b6:	ac cf       	rjmp	.-168    	; 0x110 <__stack+0x31>
			case 0xC0:
			case 0xC2:
				//連続書き込み
				if(UCSRA & 0b10000000){	//UART受信データがあるか
 1b8:	5f 9b       	sbis	0x0b, 7	; 11
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <__stack+0xeb>
					blkbuf[blkwritepos] = UDR;
 1bc:	e2 2d       	mov	r30, r2
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	8c b1       	in	r24, 0x0c	; 12
 1c2:	e0 5a       	subi	r30, 0xA0	; 160
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 83       	st	Z, r24
					blkwritepos++;
 1c8:	23 94       	inc	r2
				}
				if(blkreadpos < blkwritepos){
 1ca:	02 15       	cp	r16, r2
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <__stack+0xf1>
 1ce:	a0 cf       	rjmp	.-192    	; 0x110 <__stack+0x31>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
 1d0:	10 3c       	cpi	r17, 0xC0	; 192
 1d2:	19 f4       	brne	.+6      	; 0x1da <__stack+0xfb>
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 1d4:	00 ff       	sbrs	r16, 0
 1d6:	c8 c1       	rjmp	.+912    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 1d8:	b6 c1       	rjmp	.+876    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
					else if(blkmodetype==0xC2)	//EEPROMページ設定
 1da:	12 3c       	cpi	r17, 0xC2	; 194
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <__stack+0x101>
 1de:	90 c1       	rjmp	.+800    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
						spibuf[0] = 0xC1;
 1e0:	81 ec       	ldi	r24, 0xC1	; 193
 1e2:	89 83       	std	Y+1, r24	; 0x01
					spibuf[1] = pagepos>>8;
 1e4:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = pagepos&0xFF;
 1e6:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 1e8:	e0 2f       	mov	r30, r16
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e0 5a       	subi	r30, 0xA0	; 160
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	80 81       	ld	r24, Z
 1f2:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 1f4:	be 01       	movw	r22, r28
 1f6:	6b 5f       	subi	r22, 0xFB	; 251
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	67 d2       	rcall	.+1230   	; 0x6ce <spi_exchange>
				
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	a8 1a       	sub	r10, r24
 204:	b8 0a       	sbc	r11, r24
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 206:	8a 14       	cp	r8, r10
 208:	9b 04       	cpc	r9, r11
 20a:	e1 f4       	brne	.+56     	; 0x244 <__stack+0x165>
						pagepos = 0;
						if(blkmodetype==0xC0)
 20c:	10 3c       	cpi	r17, 0xC0	; 192
 20e:	19 f4       	brne	.+6      	; 0x216 <__stack+0x137>
							spibuf[0] = 0x4C;	//Flash書き込み
 210:	8c e4       	ldi	r24, 0x4C	; 76
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	04 c0       	rjmp	.+8      	; 0x21e <__stack+0x13f>
						else if(blkmodetype==0xC2)
 216:	12 3c       	cpi	r17, 0xC2	; 194
 218:	11 f4       	brne	.+4      	; 0x21e <__stack+0x13f>
							spibuf[0] = 0xC2;	//EEPROM書き込み
 21a:	82 ec       	ldi	r24, 0xC2	; 194
 21c:	89 83       	std	Y+1, r24	; 0x01
						spibuf[1] = addr>>8;
 21e:	7a 82       	std	Y+2, r7	; 0x02
						spibuf[2] = addr&0xFF;
 220:	6b 82       	std	Y+3, r6	; 0x03
						spibuf[3] = 0;
 222:	5c 82       	std	Y+4, r5	; 0x04
						spi_exchange(spibuf, cmdresp);
 224:	be 01       	movw	r22, r28
 226:	6b 5f       	subi	r22, 0xFB	; 251
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	4f d2       	rcall	.+1182   	; 0x6ce <spi_exchange>
						addr += pagesize;
 230:	68 0c       	add	r6, r8
 232:	79 1c       	adc	r7, r9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	87 ea       	ldi	r24, 0xA7	; 167
 236:	91 e6       	ldi	r25, 0x61	; 97
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <__stack+0x159>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__stack+0x15f>
 23e:	00 00       	nop
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
						pagepos = 0;
 240:	a1 2c       	mov	r10, r1
 242:	b1 2c       	mov	r11, r1
						addr += pagesize;
						_delay_ms(5);
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
 244:	0f 5f       	subi	r16, 0xFF	; 255
					if(blkreadpos==BLKSIZE){
 246:	00 32       	cpi	r16, 0x20	; 32
 248:	09 f0       	breq	.+2      	; 0x24c <__stack+0x16d>
 24a:	62 cf       	rjmp	.-316    	; 0x110 <__stack+0x31>
						blkreadpos=0;
						blkwritepos=0;
						txbuf[txinpos++] = 0xFF;
 24c:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	8e 0f       	add	r24, r30
 254:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e9 57       	subi	r30, 0x79	; 121
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	40 82       	st	Z, r4
						txbuf[txinpos++] = blkmodetype;
 260:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	8e 0f       	add	r24, r30
 268:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	e9 57       	subi	r30, 0x79	; 121
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	10 83       	st	Z, r17
						txbuf[txinpos++] = (addr>>8)&0xFF;
 274:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	8e 0f       	add	r24, r30
 27c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	e9 57       	subi	r30, 0x79	; 121
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	70 82       	st	Z, r7
						txbuf[txinpos++] = addr&0xFF;
 288:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	8e 0f       	add	r24, r30
 290:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e9 57       	subi	r30, 0x79	; 121
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	60 82       	st	Z, r6
						txinpos &= TXBUFMAXMASK;
 29c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <txinpos>
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
						
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
 2a6:	9f ef       	ldi	r25, 0xFF	; 255
 2a8:	e9 1a       	sub	r14, r25
 2aa:	f9 0a       	sbc	r15, r25
						if(cntblk == nblks){
 2ac:	ce 14       	cp	r12, r14
 2ae:	df 04       	cpc	r13, r15
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <__stack+0x1d5>
 2b2:	27 cf       	rjmp	.-434    	; 0x102 <__stack+0x23>
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
						blkwritepos=0;
 2b4:	21 2c       	mov	r2, r1
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
 2b6:	00 e0       	ldi	r16, 0x00	; 0
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
						if(cntblk == nblks){
							blkmodetype = 0;
 2b8:	15 2d       	mov	r17, r5
 2ba:	2a cf       	rjmp	.-428    	; 0x110 <__stack+0x31>
				}
				break;
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
 2bc:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <txinpos>
 2c0:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <txoutpos>
 2c4:	98 13       	cpse	r25, r24
 2c6:	24 cf       	rjmp	.-440    	; 0x110 <__stack+0x31>
					do{
						if(blkmodetype==0xC1)
 2c8:	11 3c       	cpi	r17, 0xC1	; 193
 2ca:	19 f4       	brne	.+6      	; 0x2d2 <__stack+0x1f3>
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 2cc:	00 ff       	sbrs	r16, 0
 2ce:	69 c1       	rjmp	.+722    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 2d0:	5c c1       	rjmp	.+696    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
						else if(blkmodetype==0xC3)
 2d2:	13 3c       	cpi	r17, 0xC3	; 195
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <__stack+0x1f9>
 2d6:	27 c1       	rjmp	.+590    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
							spibuf[0] = 0xA0;
 2d8:	80 ea       	ldi	r24, 0xA0	; 160
 2da:	89 83       	std	Y+1, r24	; 0x01
						spibuf[1] = addr>>8;	//アドレス上位
 2dc:	7a 82       	std	Y+2, r7	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 2de:	6b 82       	std	Y+3, r6	; 0x03
						spibuf[3] = 0;
 2e0:	5c 82       	std	Y+4, r5	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 2e2:	be 01       	movw	r22, r28
 2e4:	6b 5f       	subi	r22, 0xFB	; 251
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	f0 d1       	rcall	.+992    	; 0x6ce <spi_exchange>
						//アドレスを進める
						if( (blkmodetype==0xC1 && (blkreadpos&1)==1) || blkmodetype==0xC3){
							addr++;
 2ee:	9f ef       	ldi	r25, 0xFF	; 255
 2f0:	69 1a       	sub	r6, r25
 2f2:	79 0a       	sbc	r7, r25
						}
						
						//読み込みはブロック単位ではないがカウンタとして使う
						blkreadpos++;
 2f4:	0f 5f       	subi	r16, 0xFF	; 255
						if(blkreadpos==BLKSIZE){
 2f6:	00 32       	cpi	r16, 0x20	; 32
 2f8:	21 f4       	brne	.+8      	; 0x302 <__stack+0x223>
							cntblk++;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	e8 1a       	sub	r14, r24
 2fe:	f8 0a       	sbc	r15, r24
							blkreadpos = 0;
 300:	00 e0       	ldi	r16, 0x00	; 0
						}
						
						//ホストへ戻し
						while(bit_is_clear(UCSRA,UDRE));
 302:	5d 9b       	sbis	0x0b, 5	; 11
 304:	fe cf       	rjmp	.-4      	; 0x302 <__stack+0x223>
						UDR = cmdresp[3];
 306:	88 85       	ldd	r24, Y+8	; 0x08
 308:	8c b9       	out	0x0c, r24	; 12
						
					}while(cntblk != nblks);
 30a:	ce 14       	cp	r12, r14
 30c:	df 04       	cpc	r13, r15
 30e:	e1 f6       	brne	.-72     	; 0x2c8 <__stack+0x1e9>
					blkmodetype = 0;
 310:	15 2d       	mov	r17, r5
 312:	fe ce       	rjmp	.-516    	; 0x110 <__stack+0x31>
			//UART受信完了待ち	
#if _DEBUG
			rxbuf[rxpos++] = DBGUDR;
#else
			//UART受信あり
			if(bit_is_set(UCSRA,RXC)){
 314:	5f 9b       	sbis	0x0b, 7	; 11
 316:	09 c0       	rjmp	.+18     	; 0x32a <__stack+0x24b>
				//受信バッファ異常フラグ
				//現時点では特に処理しない
				//uarterr |= (UCSRA & 0b00011000);	//bit4=フレーム異常, bit3=オーバーラン
				
				//UDRを読むと自動的に受信完了フラグは消える
				rxbuf[rxpos++] = UDR;
 318:	8c b1       	in	r24, 0x0c	; 12
 31a:	e1 e0       	ldi	r30, 0x01	; 1
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ec 0f       	add	r30, r28
 320:	fd 1f       	adc	r31, r29
 322:	e3 0d       	add	r30, r3
 324:	f1 1d       	adc	r31, r1
 326:	80 83       	st	Z, r24
 328:	33 94       	inc	r3
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
 32a:	94 e0       	ldi	r25, 0x04	; 4
 32c:	39 12       	cpse	r3, r25
 32e:	ec ce       	rjmp	.-552    	; 0x108 <__stack+0x29>
				rxpos=0;
				if(rxbuf[0]!=0xFF && GIMSK==0){
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	8f 3f       	cpi	r24, 0xFF	; 255
 334:	69 f0       	breq	.+26     	; 0x350 <__stack+0x271>
 336:	8b b7       	in	r24, 0x3b	; 59
 338:	81 11       	cpse	r24, r1
 33a:	0a c0       	rjmp	.+20     	; 0x350 <__stack+0x271>
					//SPIでターゲットと4バイト交換する
					spi_exchange(rxbuf, cmdresp);
 33c:	be 01       	movw	r22, r28
 33e:	6b 5f       	subi	r22, 0xFB	; 251
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	c3 d1       	rcall	.+902    	; 0x6ce <spi_exchange>
					cmdresp[0] = 0x6F;
 348:	8f e6       	ldi	r24, 0x6F	; 111
 34a:	8d 83       	std	Y+5, r24	; 0x05
 34c:	15 2d       	mov	r17, r5
 34e:	f9 c0       	rjmp	.+498    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
 350:	4d 82       	std	Y+5, r4	; 0x05
					cmdresp[1] = rxbuf[1];
 352:	1a 81       	ldd	r17, Y+2	; 0x02
 354:	1e 83       	std	Y+6, r17	; 0x06
					cmdresp[2] = 0;
 356:	5f 82       	std	Y+7, r5	; 0x07
					cmdresp[3] = 0;
 358:	58 86       	std	Y+8, r5	; 0x08

					//コマンド振り分け
					switch(rxbuf[1]){
 35a:	1e 30       	cpi	r17, 0x0E	; 14
 35c:	09 f4       	brne	.+2      	; 0x360 <__stack+0x281>
 35e:	59 c0       	rjmp	.+178    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 360:	68 f4       	brcc	.+26     	; 0x37c <__stack+0x29d>
 362:	1a 30       	cpi	r17, 0x0A	; 10
 364:	f1 f1       	breq	.+124    	; 0x3e2 <__stack+0x303>
 366:	28 f4       	brcc	.+10     	; 0x372 <__stack+0x293>
 368:	11 23       	and	r17, r17
 36a:	d9 f0       	breq	.+54     	; 0x3a2 <__stack+0x2c3>
 36c:	16 30       	cpi	r17, 0x06	; 6
 36e:	e1 f0       	breq	.+56     	; 0x3a8 <__stack+0x2c9>
 370:	8d c0       	rjmp	.+282    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 372:	1c 30       	cpi	r17, 0x0C	; 12
 374:	09 f4       	brne	.+2      	; 0x378 <__stack+0x299>
 376:	41 c0       	rjmp	.+130    	; 0x3fa <__stack+0x31b>
 378:	d8 f1       	brcs	.+118    	; 0x3f0 <__stack+0x311>
 37a:	46 c0       	rjmp	.+140    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 37c:	14 3c       	cpi	r17, 0xC4	; 196
 37e:	38 f4       	brcc	.+14     	; 0x38e <__stack+0x2af>
 380:	10 3c       	cpi	r17, 0xC0	; 192
 382:	08 f0       	brcs	.+2      	; 0x386 <__stack+0x2a7>
 384:	4f c0       	rjmp	.+158    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 386:	14 31       	cpi	r17, 0x14	; 20
 388:	09 f4       	brne	.+2      	; 0x38c <__stack+0x2ad>
 38a:	48 c0       	rjmp	.+144    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 38c:	7f c0       	rjmp	.+254    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 38e:	11 3f       	cpi	r17, 0xF1	; 241
 390:	09 f4       	brne	.+2      	; 0x394 <__stack+0x2b5>
 392:	65 c0       	rjmp	.+202    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 394:	1f 3f       	cpi	r17, 0xFF	; 255
 396:	09 f4       	brne	.+2      	; 0x39a <__stack+0x2bb>
 398:	76 c0       	rjmp	.+236    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 39a:	1e 3c       	cpi	r17, 0xCE	; 206
 39c:	09 f0       	breq	.+2      	; 0x3a0 <__stack+0x2c1>
 39e:	76 c0       	rjmp	.+236    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 3a0:	55 c0       	rjmp	.+170    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
					case 0:	//null command
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 3a2:	8e ef       	ldi	r24, 0xFE	; 254
 3a4:	8d 83       	std	Y+5, r24	; 0x05
						break;
 3a6:	c9 c0       	rjmp	.+402    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
					case 6:
						//ターゲットリセットピン切り替え
						if(rxbuf[2]==0){
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	81 11       	cpse	r24, r1
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <__stack+0x2db>
							//プログラミングモードに切り替え
							//外部割り込み不許可でソフトUART使用不可に
							cbi(GIMSK, INT1);
 3ae:	8b b7       	in	r24, 0x3b	; 59
 3b0:	8f 77       	andi	r24, 0x7F	; 127
 3b2:	8b bf       	out	0x3b, r24	; 59
							//ソフトSPI MOSI Low
							cbi(PORTD, 4);
 3b4:	94 98       	cbi	0x12, 4	; 18
							//RESETをlow
							cbi(PORTD, 5);
 3b6:	95 98       	cbi	0x12, 5	; 18
 3b8:	69 c0       	rjmp	.+210    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						else if(rxbuf[2]==1){
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	49 f4       	brne	.+18     	; 0x3d0 <__stack+0x2f1>
							//実行モードに切り替え
							//ソフトUART Tx High(アイドル)
							sbi(PORTD, 4);
 3be:	94 9a       	sbi	0x12, 4	; 18
							//RESETをhiにして実行モードへ
							sbi(PORTD, 5);
 3c0:	95 9a       	sbi	0x12, 5	; 18
							//外部割り込み許可でソフトウェアUARTに
							sbi(EIFR, INTF1);	//1を書き込むと割り込みフラグ強制解除
 3c2:	8a b7       	in	r24, 0x3a	; 58
 3c4:	80 68       	ori	r24, 0x80	; 128
 3c6:	8a bf       	out	0x3a, r24	; 58
							sbi(GIMSK, INT1);
 3c8:	8b b7       	in	r24, 0x3b	; 59
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	8b bf       	out	0x3b, r24	; 59
 3ce:	5e c0       	rjmp	.+188    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						else if(rxbuf[2]==2){
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <__stack+0x2f9>
							//RESETをlow
							cbi(PORTD, 5);
 3d4:	95 98       	cbi	0x12, 5	; 18
 3d6:	5a c0       	rjmp	.+180    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						else if(rxbuf[2]==3){
 3d8:	83 30       	cpi	r24, 0x03	; 3
 3da:	09 f0       	breq	.+2      	; 0x3de <__stack+0x2ff>
 3dc:	b1 c0       	rjmp	.+354    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
							//RESETをhigh
							sbi(PORTD, 5);					
 3de:	95 9a       	sbi	0x12, 5	; 18
 3e0:	55 c0       	rjmp	.+170    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						break;
					case 10: //0x0A
						//ポートB下位ニブル変更
						PORTB = (PORTB & 0xF0) | (rxbuf[2] & 0x0F);
 3e2:	88 b3       	in	r24, 0x18	; 24
 3e4:	9b 81       	ldd	r25, Y+3	; 0x03
 3e6:	9f 70       	andi	r25, 0x0F	; 15
 3e8:	80 7f       	andi	r24, 0xF0	; 240
 3ea:	89 2b       	or	r24, r25
 3ec:	88 bb       	out	0x18, r24	; 24
						break;
 3ee:	4e c0       	rjmp	.+156    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					case 11: //0x0B
						//ポートB下位ニブル読み取り
						cmdresp[2] = PORTB & 0x0F;
 3f0:	88 b3       	in	r24, 0x18	; 24
 3f2:	8f 70       	andi	r24, 0x0F	; 15
 3f4:	8f 83       	std	Y+7, r24	; 0x07
						break;
 3f6:	15 2d       	mov	r17, r5
 3f8:	a4 c0       	rjmp	.+328    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
					case 12: //0x0C
						//ポートB下位ニブル方向変更
						DDRB = (DDRB & 0xF0) | (rxbuf[2] & 0x0F);
 3fa:	87 b3       	in	r24, 0x17	; 23
 3fc:	9b 81       	ldd	r25, Y+3	; 0x03
 3fe:	9f 70       	andi	r25, 0x0F	; 15
 400:	80 7f       	andi	r24, 0xF0	; 240
 402:	89 2b       	or	r24, r25
 404:	87 bb       	out	0x17, r24	; 23
						break;
 406:	42 c0       	rjmp	.+132    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					case 13: //0x0D
						//ポートB下位ニブル方向読み取り
						cmdresp[2] = DDRB & 0x0F;
 408:	87 b3       	in	r24, 0x17	; 23
 40a:	8f 70       	andi	r24, 0x0F	; 15
 40c:	8f 83       	std	Y+7, r24	; 0x07
						break;
 40e:	15 2d       	mov	r17, r5
 410:	98 c0       	rjmp	.+304    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
					case 14: //0x0E
						//ポートB下位ニブル読み取り
						cmdresp[2] = PINB & 0x0F;
 412:	86 b3       	in	r24, 0x16	; 22
 414:	8f 70       	andi	r24, 0x0F	; 15
 416:	8f 83       	std	Y+7, r24	; 0x07
						break;
 418:	15 2d       	mov	r17, r5
 41a:	93 c0       	rjmp	.+294    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
					//このブリッジのバージョン
					case 20: //0x14
						cmdresp[2] = VERSION;
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	9f 83       	std	Y+7, r25	; 0x07
						break;
 420:	15 2d       	mov	r17, r5
 422:	8f c0       	rjmp	.+286    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード開始
						blkmodetype = rxbuf[1];
						if(rxbuf[1] == 0xC0)
 424:	10 3c       	cpi	r17, 0xC0	; 192
 426:	11 f4       	brne	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
							pagesize /= 2; //flash書き込みはword単位
 428:	96 94       	lsr	r9
 42a:	87 94       	ror	r8
						nblks = rxbuf[2];
 42c:	cb 80       	ldd	r12, Y+3	; 0x03
 42e:	d1 2c       	mov	r13, r1
						nblks <<= 8;
 430:	dc 2c       	mov	r13, r12
 432:	cc 24       	eor	r12, r12
						nblks += rxbuf[3];
 434:	8c 81       	ldd	r24, Y+4	; 0x04
 436:	c8 0e       	add	r12, r24
 438:	d1 1c       	adc	r13, r1
						
						addr = 0;
						blkwritepos = 0;
						blkreadpos = 0;
						cntblk = 0;
						pagepos = 0;
 43a:	a1 2c       	mov	r10, r1
 43c:	b1 2c       	mov	r11, r1
							pagesize /= 2; //flash書き込みはword単位
						nblks = rxbuf[2];
						nblks <<= 8;
						nblks += rxbuf[3];
						
						addr = 0;
 43e:	61 2c       	mov	r6, r1
 440:	71 2c       	mov	r7, r1
						blkwritepos = 0;
 442:	21 2c       	mov	r2, r1
						blkreadpos = 0;
 444:	00 e0       	ldi	r16, 0x00	; 0
						cntblk = 0;
 446:	e1 2c       	mov	r14, r1
 448:	f1 2c       	mov	r15, r1
						pagepos = 0;
						break;
 44a:	7b c0       	rjmp	.+246    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
					case 0xCE:
						//ページサイズ設定
						//rxbuf[2]に上位8bit、[3]に下位8bit
						pagesize = rxbuf[2];
 44c:	8b 80       	ldd	r8, Y+3	; 0x03
 44e:	91 2c       	mov	r9, r1
						pagesize <<= 8;
 450:	98 2c       	mov	r9, r8
 452:	88 24       	eor	r8, r8
						pagesize += rxbuf[3];
 454:	8c 81       	ldd	r24, Y+4	; 0x04
 456:	88 0e       	add	r8, r24
 458:	91 1c       	adc	r9, r1
						break;
 45a:	15 2d       	mov	r17, r5
 45c:	72 c0       	rjmp	.+228    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
					case 0xF1:
						//ホストからターゲットへソフトUARTでデータ送信
						if(suatxbit != -1){
 45e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <suatxbit>
 462:	8f 3f       	cpi	r24, 0xFF	; 255
 464:	19 f0       	breq	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
							//すでに送信中
							cmdresp[3] = 0xFF;
 466:	48 86       	std	Y+8, r4	; 0x08
 468:	15 2d       	mov	r17, r5
 46a:	6b c0       	rjmp	.+214    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
						}
						else{
							suatxbuf = rxbuf[2];
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <suatxbuf>
							//タイマを開始
							TCNT1 = 0;
 472:	1d bc       	out	0x2d, r1	; 45
 474:	1c bc       	out	0x2c, r1	; 44
							TCCR1B |= 0b00000011;
 476:	8e b5       	in	r24, 0x2e	; 46
 478:	83 60       	ori	r24, 0x03	; 3
 47a:	8e bd       	out	0x2e, r24	; 46
							//スタートビット送出
							cbi(PORTD,4);
 47c:	94 98       	cbi	0x12, 4	; 18
							suatxbit = 1;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <suatxbit>
 484:	03 c0       	rjmp	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
						}
						break;
					case 0xFF:
						//padding command
						//no response
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 486:	9e ef       	ldi	r25, 0xFE	; 254
 488:	9d 83       	std	Y+5, r25	; 0x05
						break;
 48a:	57 c0       	rjmp	.+174    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	8e 3f       	cpi	r24, 0xFE	; 254
 490:	09 f4       	brne	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	3c ce       	rjmp	.-904    	; 0x10c <__stack+0x2d>
 494:	15 2d       	mov	r17, r5
					txbuf[txinpos++] = cmdresp[0];
 496:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	9e 0f       	add	r25, r30
 49e:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <txinpos>
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	e9 57       	subi	r30, 0x79	; 121
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[1];
 4aa:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	8e 0f       	add	r24, r30
 4b2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	8e 81       	ldd	r24, Y+6	; 0x06
 4ba:	e9 57       	subi	r30, 0x79	; 121
 4bc:	ff 4f       	sbci	r31, 0xFF	; 255
 4be:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[2];
 4c0:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	8e 0f       	add	r24, r30
 4c8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	8f 81       	ldd	r24, Y+7	; 0x07
 4d0:	e9 57       	subi	r30, 0x79	; 121
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[3];
 4d6:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <txinpos>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	8e 0f       	add	r24, r30
 4de:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	88 85       	ldd	r24, Y+8	; 0x08
 4e6:	e9 57       	subi	r30, 0x79	; 121
 4e8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ea:	80 83       	st	Z, r24
					txinpos &= TXBUFMAXMASK;
 4ec:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <txinpos>
 4f0:	8f 70       	andi	r24, 0x0F	; 15
 4f2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <txinpos>
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 4f6:	35 2c       	mov	r3, r5
 4f8:	0b ce       	rjmp	.-1002   	; 0x110 <__stack+0x31>

		///////////////////////////////////////////////////////////////////////
		//UART受信

		//ブロック転送のときは4バイト固定ではなく指定したブロック長になる
		if(blkmodetype!=0){
 4fa:	11 11       	cpse	r17, r1
 4fc:	50 ce       	rjmp	.-864    	; 0x19e <__stack+0xbf>
 4fe:	0a cf       	rjmp	.-492    	; 0x314 <__stack+0x235>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 500:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = pagepos&0xFF;
 502:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 504:	e0 2f       	mov	r30, r16
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	e0 5a       	subi	r30, 0xA0	; 160
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	80 81       	ld	r24, Z
 50e:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 510:	be 01       	movw	r22, r28
 512:	6b 5f       	subi	r22, 0xFB	; 251
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	ce 01       	movw	r24, r28
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	d9 d0       	rcall	.+434    	; 0x6ce <spi_exchange>
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 51c:	8a 14       	cp	r8, r10
 51e:	9b 04       	cpc	r9, r11
 520:	09 f0       	breq	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 522:	90 ce       	rjmp	.-736    	; 0x244 <__stack+0x165>
 524:	7c ce       	rjmp	.-776    	; 0x21e <__stack+0x13f>
					do{
						if(blkmodetype==0xC1)
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
						else if(blkmodetype==0xC3)
							spibuf[0] = 0xA0;
						spibuf[1] = addr>>8;	//アドレス上位
 526:	7a 82       	std	Y+2, r7	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 528:	6b 82       	std	Y+3, r6	; 0x03
						spibuf[3] = 0;
 52a:	5c 82       	std	Y+4, r5	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 52c:	be 01       	movw	r22, r28
 52e:	6b 5f       	subi	r22, 0xFB	; 251
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	ce 01       	movw	r24, r28
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	cb d0       	rcall	.+406    	; 0x6ce <spi_exchange>
 538:	dd ce       	rjmp	.-582    	; 0x2f4 <__stack+0x215>
#endif



int main(void) 
{
 53a:	15 2d       	mov	r17, r5
				rxbuf[rxpos++] = UDR;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 53c:	35 2c       	mov	r3, r5
 53e:	e8 cd       	rjmp	.-1072   	; 0x110 <__stack+0x31>
 540:	15 2d       	mov	r17, r5
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 542:	8d 81       	ldd	r24, Y+5	; 0x05
 544:	a8 cf       	rjmp	.-176    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
					blkwritepos++;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 546:	88 e4       	ldi	r24, 0x48	; 72
 548:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 54a:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = pagepos&0xFF;
 54c:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 54e:	e0 2f       	mov	r30, r16
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	e0 5a       	subi	r30, 0xA0	; 160
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	80 81       	ld	r24, Z
 558:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 55a:	be 01       	movw	r22, r28
 55c:	6b 5f       	subi	r22, 0xFB	; 251
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	b4 d0       	rcall	.+360    	; 0x6ce <spi_exchange>
 566:	4c ce       	rjmp	.-872    	; 0x200 <__stack+0x121>
					blkwritepos++;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 568:	80 e4       	ldi	r24, 0x40	; 64
 56a:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 56c:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = pagepos&0xFF;
 56e:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 570:	e0 2f       	mov	r30, r16
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	e0 5a       	subi	r30, 0xA0	; 160
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	80 81       	ld	r24, Z
 57a:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 57c:	be 01       	movw	r22, r28
 57e:	6b 5f       	subi	r22, 0xFB	; 251
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	a3 d0       	rcall	.+326    	; 0x6ce <spi_exchange>
 588:	3e ce       	rjmp	.-900    	; 0x206 <__stack+0x127>
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					do{
						if(blkmodetype==0xC1)
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 58a:	88 e2       	ldi	r24, 0x28	; 40
 58c:	89 83       	std	Y+1, r24	; 0x01
						else if(blkmodetype==0xC3)
							spibuf[0] = 0xA0;
						spibuf[1] = addr>>8;	//アドレス上位
 58e:	7a 82       	std	Y+2, r7	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 590:	6b 82       	std	Y+3, r6	; 0x03
						spibuf[3] = 0;
 592:	5c 82       	std	Y+4, r5	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 594:	be 01       	movw	r22, r28
 596:	6b 5f       	subi	r22, 0xFB	; 251
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	97 d0       	rcall	.+302    	; 0x6ce <spi_exchange>
 5a0:	a6 ce       	rjmp	.-692    	; 0x2ee <__stack+0x20f>
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					do{
						if(blkmodetype==0xC1)
							spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 5a2:	90 e2       	ldi	r25, 0x20	; 32
 5a4:	99 83       	std	Y+1, r25	; 0x01
						else if(blkmodetype==0xC3)
							spibuf[0] = 0xA0;
						spibuf[1] = addr>>8;	//アドレス上位
 5a6:	7a 82       	std	Y+2, r7	; 0x02
						spibuf[2] = addr&0xFF;	//アドレス下位
 5a8:	6b 82       	std	Y+3, r6	; 0x03
						spibuf[3] = 0;
 5aa:	5c 82       	std	Y+4, r5	; 0x04
						
						//SPI
						spi_exchange(spibuf, cmdresp);
 5ac:	be 01       	movw	r22, r28
 5ae:	6b 5f       	subi	r22, 0xFB	; 251
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	8b d0       	rcall	.+278    	; 0x6ce <spi_exchange>
 5b8:	9d ce       	rjmp	.-710    	; 0x2f4 <__stack+0x215>
