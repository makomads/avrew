
avrewbridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000078  000006bc  2**0
                  ALLOC
  2 .bss          00000017  00800060  00800060  00000850  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb7  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000578  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c1  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b9  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  0000079a  0000079a  0000084e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000030  0000076a  0000076a  0000081e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_13 000000b8  00000608  00000608  000006bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_4 0000005c  000006c0  000006c0  00000774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_exchange 0000004e  0000071c  0000071c  000007d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000590  00000078  00000078  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	cb c3       	rjmp	.+1942   	; 0x79a <__bad_interrupt>
   4:	b2 c3       	rjmp	.+1892   	; 0x76a <__vector_2>
   6:	c9 c3       	rjmp	.+1938   	; 0x79a <__bad_interrupt>
   8:	5b c3       	rjmp	.+1718   	; 0x6c0 <__vector_4>
   a:	c7 c3       	rjmp	.+1934   	; 0x79a <__bad_interrupt>
   c:	c6 c3       	rjmp	.+1932   	; 0x79a <__bad_interrupt>
   e:	c5 c3       	rjmp	.+1930   	; 0x79a <__bad_interrupt>
  10:	c4 c3       	rjmp	.+1928   	; 0x79a <__bad_interrupt>
  12:	c3 c3       	rjmp	.+1926   	; 0x79a <__bad_interrupt>
  14:	c2 c3       	rjmp	.+1924   	; 0x79a <__bad_interrupt>
  16:	c1 c3       	rjmp	.+1922   	; 0x79a <__bad_interrupt>
  18:	c0 c3       	rjmp	.+1920   	; 0x79a <__bad_interrupt>
  1a:	f6 c2       	rjmp	.+1516   	; 0x608 <__vector_13>
  1c:	be c3       	rjmp	.+1916   	; 0x79a <__bad_interrupt>
  1e:	bd c3       	rjmp	.+1914   	; 0x79a <__bad_interrupt>
  20:	bc c3       	rjmp	.+1912   	; 0x79a <__bad_interrupt>
  22:	bb c3       	rjmp	.+1910   	; 0x79a <__bad_interrupt>
  24:	ba c3       	rjmp	.+1908   	; 0x79a <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 77       	andi	r16, 0x70	; 112
  2a:	80 00       	.word	0x0080	; ????

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf ed       	ldi	r28, 0xDF	; 223
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	e6 e2       	ldi	r30, 0x26	; 38
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	17 c0       	rjmp	.+46     	; 0x6a <__do_clear_bss+0x8>
  3c:	b5 91       	lpm	r27, Z+
  3e:	a5 91       	lpm	r26, Z+
  40:	35 91       	lpm	r19, Z+
  42:	25 91       	lpm	r18, Z+
  44:	05 91       	lpm	r16, Z+
  46:	07 fd       	sbrc	r16, 7
  48:	0c c0       	rjmp	.+24     	; 0x62 <__do_clear_bss>
  4a:	95 91       	lpm	r25, Z+
  4c:	85 91       	lpm	r24, Z+
  4e:	ef 01       	movw	r28, r30
  50:	f9 2f       	mov	r31, r25
  52:	e8 2f       	mov	r30, r24
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 17       	cp	r26, r18
  5a:	b3 07       	cpc	r27, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__SREG__+0x15>
  5e:	fe 01       	movw	r30, r28
  60:	04 c0       	rjmp	.+8      	; 0x6a <__do_clear_bss+0x8>

00000062 <__do_clear_bss>:
  62:	1d 92       	st	X+, r1
  64:	a2 17       	cp	r26, r18
  66:	b3 07       	cpc	r27, r19
  68:	e1 f7       	brne	.-8      	; 0x62 <__do_clear_bss>
  6a:	eb 32       	cpi	r30, 0x2B	; 43
  6c:	f4 07       	cpc	r31, r20
  6e:	31 f7       	brne	.-52     	; 0x3c <__do_copy_data+0x8>
  70:	03 d0       	rcall	.+6      	; 0x78 <_etext>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_exit>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>

Disassembly of section .text:

0000079a <__bad_interrupt>:
 79a:	32 cc       	rjmp	.-1948   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

0000076a <__vector_2>:


//外部割り込み1(INT1)
//ソフトUART受信スタートビット検出
ISR(INT1_vect)
{
 76a:	1f 92       	push	r1
 76c:	0f 92       	push	r0
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	0f 92       	push	r0
 772:	11 24       	eor	r1, r1
 774:	8f 93       	push	r24
	suarxbuf = 0;
 776:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <suarxbuf>
	suarxbit = 0;
 77a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	//ピン変化割り込み不許可
	cbi(GIMSK, INT1);
 77e:	8b b7       	in	r24, 0x3b	; 59
 780:	8f 77       	andi	r24, 0x7F	; 127
 782:	8b bf       	out	0x3b, r24	; 59

	//タイマ開始
	TCNT0 = 15;	//パルスの真ん中で採取するためのウエイト
 784:	8f e0       	ldi	r24, 0x0F	; 15
 786:	82 bf       	out	0x32, r24	; 50
	TCCR0B |= 0b00000011;
 788:	83 b7       	in	r24, 0x33	; 51
 78a:	83 60       	ori	r24, 0x03	; 3
 78c:	83 bf       	out	0x33, r24	; 51
}
 78e:	8f 91       	pop	r24
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

Disassembly of section .text.__vector_13:

00000608 <__vector_13>:


//タイマー0比較A一致
//ソフトUART受信データビット検出
ISR(TIMER0_COMPA_vect)
{	
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	8f 93       	push	r24
 614:	9f 93       	push	r25
	uint8_t f_bitset;
	
	//ピンのhigh, low取得
	f_bitset = bit_is_set(PIND,3);
 616:	80 b3       	in	r24, 0x10	; 16
 618:	88 70       	andi	r24, 0x08	; 8
	
	//スタートビットを再確認し不正なスタートビットを検出
	if(suarxbit == 0 && f_bitset){
 61a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 61e:	91 11       	cpse	r25, r1
 620:	0f c0       	rjmp	.+30     	; 0x640 <__vector_13+0x38>
 622:	88 23       	and	r24, r24
 624:	e1 f1       	breq	.+120    	; 0x69e <__vector_13+0x96>
		//タイマ停止
		TCCR0B &= 0b11111000;
 626:	83 b7       	in	r24, 0x33	; 51
 628:	88 7f       	andi	r24, 0xF8	; 248
 62a:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 62c:	8a b7       	in	r24, 0x3a	; 58
 62e:	80 68       	ori	r24, 0x80	; 128
 630:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 632:	8b b7       	in	r24, 0x3b	; 59
 634:	80 68       	ori	r24, 0x80	; 128
 636:	8b bf       	out	0x3b, r24	; 59
		suarxbit = -1;
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return;
 63e:	39 c0       	rjmp	.+114    	; 0x6b2 <__vector_13+0xaa>
	}
	//ストップビット
	else if(suarxbit == 9){
 640:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 644:	99 30       	cpi	r25, 0x09	; 9
 646:	79 f4       	brne	.+30     	; 0x666 <__vector_13+0x5e>
		//タイマ停止
		TCCR0B &= 0b11111000;
 648:	93 b7       	in	r25, 0x33	; 51
 64a:	98 7f       	andi	r25, 0xF8	; 248
 64c:	93 bf       	out	0x33, r25	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 64e:	9a b7       	in	r25, 0x3a	; 58
 650:	90 68       	ori	r25, 0x80	; 128
 652:	9a bf       	out	0x3a, r25	; 58
		sbi(GIMSK, INT1);
 654:	9b b7       	in	r25, 0x3b	; 59
 656:	90 68       	ori	r25, 0x80	; 128
 658:	9b bf       	out	0x3b, r25	; 59
		
		//不正なストップビット検出
		if(!f_bitset){
 65a:	81 11       	cpse	r24, r1
 65c:	10 c0       	rjmp	.+32     	; 0x67e <__vector_13+0x76>
			suarxbit = -1;	//こうするとメインループでホストに送信しない
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			return;
 664:	26 c0       	rjmp	.+76     	; 0x6b2 <__vector_13+0xaa>
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 666:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <suarxbuf>
 66a:	96 95       	lsr	r25
 66c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <suarxbuf>
		if(f_bitset){
 670:	88 23       	and	r24, r24
 672:	29 f0       	breq	.+10     	; 0x67e <__vector_13+0x76>
			suarxbuf |= 0b10000000;
 674:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 678:	80 68       	ori	r24, 0x80	; 128
 67a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
		}
	}
	
	//次のビットへ
	suarxbit++;
 67e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 682:	8f 5f       	subi	r24, 0xFF	; 255
 684:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 688:	14 c0       	rjmp	.+40     	; 0x6b2 <__vector_13+0xaa>
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
		//タイマ停止
		TCCR0B &= 0b11111000;
 68a:	83 b7       	in	r24, 0x33	; 51
 68c:	88 7f       	andi	r24, 0xF8	; 248
 68e:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 690:	8a b7       	in	r24, 0x3a	; 58
 692:	80 68       	ori	r24, 0x80	; 128
 694:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 696:	8b b7       	in	r24, 0x3b	; 59
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	8b bf       	out	0x3b, r24	; 59
 69c:	e0 cf       	rjmp	.-64     	; 0x65e <__vector_13+0x56>
		sbi(GIMSK, INT1);
		suarxbit = -1;
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
 69e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6a2:	89 30       	cpi	r24, 0x09	; 9
 6a4:	91 f3       	breq	.-28     	; 0x68a <__vector_13+0x82>
			return;
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 6a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 6aa:	86 95       	lsr	r24
 6ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
 6b0:	e6 cf       	rjmp	.-52     	; 0x67e <__vector_13+0x76>
		}
	}
	
	//次のビットへ
	suarxbit++;
}
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

Disassembly of section .text.__vector_4:

000006c0 <__vector_4>:


//タイマー1比較A一致
//ソフトUART送信
ISR(TIMER1_COMPA_vect)
{
 6c0:	1f 92       	push	r1
 6c2:	0f 92       	push	r0
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	0f 92       	push	r0
 6c8:	11 24       	eor	r1, r1
 6ca:	8f 93       	push	r24
	//ストップビット
	if(suatxbit==9){
 6cc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 6d0:	89 30       	cpi	r24, 0x09	; 9
 6d2:	11 f4       	brne	.+4      	; 0x6d8 <__vector_4+0x18>
		sbi(PORTD,4);
 6d4:	94 9a       	sbi	0x12, 4	; 18
 6d6:	17 c0       	rjmp	.+46     	; 0x706 <__vector_4+0x46>
	}
	//送出完了
	else if(suatxbit==10){
 6d8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 6dc:	8a 30       	cpi	r24, 0x0A	; 10
 6de:	39 f4       	brne	.+14     	; 0x6ee <__vector_4+0x2e>
		//タイマ停止する
		TCCR1B &= 0b11111000;
 6e0:	8e b5       	in	r24, 0x2e	; 46
 6e2:	88 7f       	andi	r24, 0xF8	; 248
 6e4:	8e bd       	out	0x2e, r24	; 46
		suatxbit = -1;
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
		return;
 6ec:	11 c0       	rjmp	.+34     	; 0x710 <__vector_4+0x50>
	}
	//データビット
	else{
		if(suatxbuf & 1)
 6ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 6f2:	80 ff       	sbrs	r24, 0
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__vector_4+0x3a>
			sbi(PORTD,4);
 6f6:	94 9a       	sbi	0x12, 4	; 18
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <__vector_4+0x3c>
		else
			cbi(PORTD,4);
 6fa:	94 98       	cbi	0x12, 4	; 18
		suatxbuf >>= 1;			
 6fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 700:	86 95       	lsr	r24
 702:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <suatxbuf>
	}
	
	//次のビットへ
	suatxbit++;
 706:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 70a:	8f 5f       	subi	r24, 0xFF	; 255
 70c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
}
 710:	8f 91       	pop	r24
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

Disassembly of section .text.spi_exchange:

0000071c <spi_exchange>:


//4バイトSPIで交換する
//USIは使わず任意のピンを使う
void spi_exchange(uint8_t *poutdata, uint8_t *pindata)
{
 71c:	fc 01       	movw	r30, r24
 71e:	a6 2f       	mov	r26, r22
 720:	b7 2f       	mov	r27, r23
 722:	bc 01       	movw	r22, r24
 724:	6c 5f       	subi	r22, 0xFC	; 252
 726:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t		indata;
	uint8_t		delaycnt;

	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
 728:	41 91       	ld	r20, Z+
 72a:	38 e0       	ldi	r19, 0x08	; 8
		indata = 0;
 72c:	20 e0       	ldi	r18, 0x00	; 0
		bitcount = 8;
		while(bitcount){
			//送信データ(MSB先行)
			if(outdata&0x80)
 72e:	44 23       	and	r20, r20
 730:	14 f4       	brge	.+4      	; 0x736 <spi_exchange+0x1a>
				sbi(PORTD,4);
 732:	94 9a       	sbi	0x12, 4	; 18
 734:	01 c0       	rjmp	.+2      	; 0x738 <spi_exchange+0x1c>
			else
				cbi(PORTD,4);
 736:	94 98       	cbi	0x12, 4	; 18
			outdata <<= 1;
 738:	44 0f       	add	r20, r20
			//クロック上昇
			sbi(PORTB, 4);
 73a:	c4 9a       	sbi	0x18, 4	; 24
			delaycnt = spidelay;
 73c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;//カウント1あたり3クロック=0.15us
 740:	99 23       	and	r25, r25
 742:	11 f0       	breq	.+4      	; 0x748 <spi_exchange+0x2c>
 744:	91 50       	subi	r25, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <spi_exchange+0x28>
			//受信データ
			indata <<= 1;
 748:	22 0f       	add	r18, r18
			if(PIND & 0b00001000)
 74a:	83 99       	sbic	0x10, 3	; 16
				indata |= 1;
 74c:	21 60       	ori	r18, 0x01	; 1
			//クロック下降
			bitcount--;
			cbi(PORTB, 4);
 74e:	c4 98       	cbi	0x18, 4	; 24
			delaycnt = spidelay;
 750:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;	//カウント1あたり3クロック=0.15us
 754:	99 23       	and	r25, r25
 756:	11 f0       	breq	.+4      	; 0x75c <spi_exchange+0x40>
 758:	91 50       	subi	r25, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <spi_exchange+0x3c>
 75c:	31 50       	subi	r19, 0x01	; 1
	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
		indata = 0;
		bitcount = 8;
		while(bitcount){
 75e:	39 f7       	brne	.-50     	; 0x72e <spi_exchange+0x12>
			bitcount--;
			cbi(PORTB, 4);
			delaycnt = spidelay;
			while(delaycnt) delaycnt--;	//カウント1あたり3クロック=0.15us
		}
		pindata[4-bytecount] = indata;
 760:	2d 93       	st	X+, r18
	uint8_t		outdata;
	uint8_t		indata;
	uint8_t		delaycnt;

	bytecount = 4;
	while(bytecount){
 762:	e6 17       	cp	r30, r22
 764:	f7 07       	cpc	r31, r23
 766:	01 f7       	brne	.-64     	; 0x728 <spi_exchange+0xc>
		}
		pindata[4-bytecount] = indata;
		bytecount--;
	}

}
 768:	08 95       	ret

Disassembly of section .text.main:

00000078 <main>:
#endif



int main(void) 
{
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	dd 27       	eor	r29, r29
  80:	cc 52       	subi	r28, 0x2C	; 44
  82:	cd bf       	out	0x3d, r28	; 61
	uint16_t pagepos;		//ページ内の走査位置


reset:
	//マスター割り込み禁止
	cli();
  84:	f8 94       	cli
   GND ┃GN  D6┃SpeedSW
       ┗━━━┛
*/

	//IO方向セット(0入力,1出力)
	DDRB  = 0b00010000;
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	87 bb       	out	0x17, r24	; 23
	DDRD  = 0b00110010;
  8a:	82 e3       	ldi	r24, 0x32	; 50
  8c:	81 bb       	out	0x11, r24	; 17

	//ポート初期化
	//出力の場合1でHigh、0でLow
	//入力の場合1を書くとプルアップ抵抗活性化、0を書くとハイインピーダンス
	PORTB = 0b00000000;
  8e:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b01010001;
  90:	81 e5       	ldi	r24, 0x51	; 81
  92:	82 bb       	out	0x12, r24	; 18
	//タイマ設定
	
	//TCCR0
	//B3,A1,A0	動作種別、CTC動作は010
	//B210	プリスケーラ(000:停止, 001:1, 010:8, 011:64, 100:256, 101:1024, 110,111:予約)
	TCCR0A = 0b00000010;
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	80 bf       	out	0x30, r24	; 48
	TCCR0B = 0b00000000;
  98:	13 be       	out	0x33, r1	; 51

	//タイマ0比較値(AVRのクロック/UART速度/プリスケーラ)
	OCR0A = 31;
  9a:	9f e1       	ldi	r25, 0x1F	; 31
  9c:	96 bf       	out	0x36, r25	; 54
	TCNT0 = 0;
  9e:	12 be       	out	0x32, r1	; 50
	
	//TCCR1
	//B4,B3,A1,A0 動作種別 	CTCは0100(比較A一致)か1100(捕獲一致)
	//B210	プリスケーラ 設定値はタイマ0と同じ
	TCCR1A = 0;
  a0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001000;
  a2:	98 e0       	ldi	r25, 0x08	; 8
  a4:	9e bd       	out	0x2e, r25	; 46
	OCR1A  = 32;
  a6:	20 e2       	ldi	r18, 0x20	; 32
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	3b bd       	out	0x2b, r19	; 43
  ac:	2a bd       	out	0x2a, r18	; 42
	TCNT1  = 0;
  ae:	1d bc       	out	0x2d, r1	; 45
  b0:	1c bc       	out	0x2c, r1	; 44

	//タイマ割り込みはここで許可するが、タイマーが動いていないので割り込みはまだ発生しない
	TIMSK = 1<<OCIE0A | 1<<OCIE1A;
  b2:	21 e4       	ldi	r18, 0x41	; 65
  b4:	29 bf       	out	0x39, r18	; 57
	//MCU制御
	//7		1を書くとプルアップ禁止
	//6,5,4	休止種別、休止許可
	//3,2	INT1割り込み条件(00:Low,01:両端,10:下降,11:上昇)
	//1,0	INT0割り込み条件
	MCUCR = 0b00001000;
  b6:	95 bf       	out	0x35, r25	; 53
	//ピン割り込みは実行モードになったら許可するのでここではまだ不許可
	GIMSK = 0;
  b8:	1b be       	out	0x3b, r1	; 59

	//////////////////////////////////////////////////////////////////////
	//USART設定

	//初期化時はボーレート0にする必要がある
	UBRRH = 0;
  ba:	12 b8       	out	0x02, r1	; 2
	UBRRL = 0;
  bc:	19 b8       	out	0x09, r1	; 9

	//データレジスタ
	UDR = 0;
  be:	1c b8       	out	0x0c, r1	; 12
	//4	フレーミングエラーフラグ
	//3	データオーバーランフラグ
	//2	パリティエラーフラグ
	//1	倍速許可
	//0	マルチプロセッサ許可
	UCSRA = 0b00000000;
  c0:	1b b8       	out	0x0b, r1	; 11
	//4	受信(RXD0pin)許可
	//3	送信(TXD0pin)許可
	//2	データビット長選択2
	//1	受信追加データビット(9ビットフレームの時使用)
	//0	送信追加データビット(9ビットフレームの時使用)
	UCSRB = 0b00011000;
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	9a b9       	out	0x0a, r25	; 10
	//76 動作モード選択(00:非同期(調歩), 01:同期, 11:SPI)
	//54 パリティ選択(00:パリティなし, 10:偶数, 11:奇数)
	//3	 ストップビット(0:1bit, 1:2bit)
	//21 データビット長選択10(8bitは011)
	//0	 クロック極性(0:送信立ち上がり,受信立下り, 1:その逆、同期動作時のみ有効)
	UCSRC = 0b00000110;
  c6:	96 e0       	ldi	r25, 0x06	; 6
  c8:	93 b9       	out	0x03, r25	; 3

	//ボーレート
	UBRRH = 0;
  ca:	12 b8       	out	0x02, r1	; 2
	UBRRL = UBRR_VAL;
  cc:	9a e0       	ldi	r25, 0x0A	; 10
  ce:	99 b9       	out	0x09, r25	; 9

	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
  d0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <txinpos>
	txoutpos = 0;
  d4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <txoutpos>
	cmdresp[0] = 0xFF;
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	*/
	suarxbit = -1;
  d8:	9f ef       	ldi	r25, 0xFF	; 255
  da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	suatxbit = -1;
  de:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <suatxbit>
	blkmodetype = 0;
	spidelay = 2;
  e2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <spidelay>
	

	//マスター割り込み許可
	sei();
  e6:	78 94       	sei
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	*/
	suarxbit = -1;
	suatxbit = -1;
	blkmodetype = 0;
  e8:	10 e0       	ldi	r17, 0x00	; 0
	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
	txoutpos = 0;
	rxpos = 0;
  ea:	00 e0       	ldi	r16, 0x00	; 0
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
			suarxbit = -1;
  ec:	55 24       	eor	r5, r5
  ee:	5a 94       	dec	r5
			txbuf[txinpos] = 0xFF;
			txbuf[txinpos+1] = 0xF2;
  f0:	0f 2e       	mov	r0, r31
  f2:	f2 ef       	ldi	r31, 0xF2	; 242
  f4:	3f 2e       	mov	r3, r31
  f6:	f0 2d       	mov	r31, r0
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
		if(cnttimeout==0){
			rxpos = 0;
			blkmodetype = 0;
  f8:	71 2c       	mov	r7, r1
			if(rxpos==4){
				rxpos=0;
				if(rxbuf[0]!=0xFF && GIMSK==0){
					//SPIでターゲットと4バイト交換する
					spi_exchange(rxbuf, cmdresp);
					cmdresp[0] = 0x6F;
  fa:	0f 2e       	mov	r0, r31
  fc:	ff e6       	ldi	r31, 0x6F	; 111
  fe:	2f 2e       	mov	r2, r31
 100:	f0 2d       	mov	r31, r0
	while(1){
		///////////////////////////////////////////////////////////////////////
		//UART送信
		
		//ブリッジからホストへ送信
		if(txinpos != txoutpos){
 102:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txinpos>
 106:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 10a:	98 17       	cp	r25, r24
 10c:	91 f0       	breq	.+36     	; 0x132 <__stack+0x53>
			//UART送信レジスタ空き待ちフラグ(UDRE)
			if(bit_is_set(UCSRA,UDRE)){
 10e:	5d 9b       	sbis	0x0b, 5	; 11
 110:	10 c0       	rjmp	.+32     	; 0x132 <__stack+0x53>
				//送信データセット
				//同時に送信が開始され、UDREは解除される
				UDR = txbuf[txoutpos++];
 112:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <txoutpos>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8e 0f       	add	r24, r30
 11a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <txoutpos>
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e9 59       	subi	r30, 0x99	; 153
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	80 81       	ld	r24, Z
 126:	8c b9       	out	0x0c, r24	; 12
				txoutpos &= TXBUFMAXMASK; //if(txoutpos==TXBUFSIZE) txoutpos = 0;と同じ効果
 128:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <txoutpos>
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	8a 30       	cpi	r24, 0x0A	; 10
 138:	31 f5       	brne	.+76     	; 0x186 <__stack+0xa7>
			suarxbit = -1;
 13a:	50 92 60 00 	sts	0x0060, r5	; 0x800060 <__DATA_REGION_ORIGIN__>
			txbuf[txinpos] = 0xFF;
 13e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e9 59       	subi	r30, 0x99	; 153
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	50 82       	st	Z, r5
			txbuf[txinpos+1] = 0xF2;
 14a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	e8 59       	subi	r30, 0x98	; 152
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	30 82       	st	Z, r3
			txbuf[txinpos+2] = suarxbuf;
 156:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 160:	e7 59       	subi	r30, 0x97	; 151
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 83       	st	Z, r24
			txbuf[txinpos+3] = 0;
 166:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e6 59       	subi	r30, 0x96	; 150
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	10 82       	st	Z, r1
			txinpos += 4;
 172:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 176:	8c 5f       	subi	r24, 0xFC	; 252
 178:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
			txinpos &= TXBUFMAXMASK; //if(txinpos==TXBUFSIZE) txinpos = 0;と同じ効果
 17c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>

		///////////////////////////////////////////////////////////////////////
		//UART受信

		//ブロック転送のときは4バイト固定ではなく指定したブロック長になる
		if(blkmodetype!=0){
 186:	11 23       	and	r17, r17
 188:	09 f4       	brne	.+2      	; 0x18c <__stack+0xad>
 18a:	cc c0       	rjmp	.+408    	; 0x324 <__stack+0x245>
			switch(blkmodetype){
 18c:	11 3c       	cpi	r17, 0xC1	; 193
 18e:	09 f4       	brne	.+2      	; 0x192 <__stack+0xb3>
 190:	99 c0       	rjmp	.+306    	; 0x2c4 <__stack+0x1e5>
 192:	18 f4       	brcc	.+6      	; 0x19a <__stack+0xbb>
 194:	10 3c       	cpi	r17, 0xC0	; 192
 196:	39 f0       	breq	.+14     	; 0x1a6 <__stack+0xc7>
 198:	c5 c1       	rjmp	.+906    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 19a:	12 3c       	cpi	r17, 0xC2	; 194
 19c:	21 f0       	breq	.+8      	; 0x1a6 <__stack+0xc7>
 19e:	13 3c       	cpi	r17, 0xC3	; 195
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <__stack+0xc5>
 1a2:	90 c0       	rjmp	.+288    	; 0x2c4 <__stack+0x1e5>
 1a4:	bf c1       	rjmp	.+894    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			case 0xC0:
			case 0xC2:
				//連続書き込み
				if(UCSRA & 0b10000000){	//UART受信データがあるか
 1a6:	5f 9b       	sbis	0x0b, 7	; 11
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <__stack+0xe3>
					blkbuf[blkwritepos] = UDR;
 1aa:	8c b1       	in	r24, 0x0c	; 12
 1ac:	e9 e0       	ldi	r30, 0x09	; 9
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 0f       	add	r30, r28
 1b2:	fd 1f       	adc	r31, r29
 1b4:	e4 0d       	add	r30, r4
 1b6:	f1 1d       	adc	r31, r1
 1b8:	80 83       	st	Z, r24
					blkwritepos++;
 1ba:	43 94       	inc	r4
					cnttimeout = MAX_TIMEOUT;
 1bc:	ee 24       	eor	r14, r14
 1be:	ea 94       	dec	r14
 1c0:	fe 2c       	mov	r15, r14
				}
				if(blkreadpos < blkwritepos){
 1c2:	64 14       	cp	r6, r4
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <__stack+0xe9>
 1c6:	ae c1       	rjmp	.+860    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
 1c8:	10 3c       	cpi	r17, 0xC0	; 192
 1ca:	19 f4       	brne	.+6      	; 0x1d2 <__stack+0xf3>
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 1cc:	60 fe       	sbrs	r6, 0
 1ce:	f1 c1       	rjmp	.+994    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 1d0:	dd c1       	rjmp	.+954    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
					else if(blkmodetype==0xC2)	//EEPROMページ設定
 1d2:	12 3c       	cpi	r17, 0xC2	; 194
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <__stack+0xf9>
 1d6:	ae c1       	rjmp	.+860    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
						spibuf[0] = 0xC1;
 1d8:	81 ec       	ldi	r24, 0xC1	; 193
 1da:	89 83       	std	Y+1, r24	; 0x01
					spibuf[1] = pagepos>>8;
 1dc:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = pagepos&0xFF;
 1de:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 1e0:	e9 e0       	ldi	r30, 0x09	; 9
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e6 0d       	add	r30, r6
 1ea:	f1 1d       	adc	r31, r1
 1ec:	80 81       	ld	r24, Z
 1ee:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 1f0:	be 01       	movw	r22, r28
 1f2:	6b 5f       	subi	r22, 0xFB	; 251
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	90 d2       	rcall	.+1312   	; 0x71c <spi_exchange>
				
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	c2 1a       	sub	r12, r18
 200:	d2 0a       	sbc	r13, r18
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 202:	4b a5       	ldd	r20, Y+43	; 0x2b
 204:	5c a5       	ldd	r21, Y+44	; 0x2c
 206:	4c 15       	cp	r20, r12
 208:	5d 05       	cpc	r21, r13
 20a:	f1 f4       	brne	.+60     	; 0x248 <__stack+0x169>
						pagepos = 0;
						if(blkmodetype==0xC0)
 20c:	10 3c       	cpi	r17, 0xC0	; 192
 20e:	19 f4       	brne	.+6      	; 0x216 <__stack+0x137>
							spibuf[0] = 0x4C;	//Flash書き込み
 210:	8c e4       	ldi	r24, 0x4C	; 76
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	04 c0       	rjmp	.+8      	; 0x21e <__stack+0x13f>
						else if(blkmodetype==0xC2)
 216:	12 3c       	cpi	r17, 0xC2	; 194
 218:	11 f4       	brne	.+4      	; 0x21e <__stack+0x13f>
							spibuf[0] = 0xC2;	//EEPROM書き込み
 21a:	82 ec       	ldi	r24, 0xC2	; 194
 21c:	89 83       	std	Y+1, r24	; 0x01
						spibuf[1] = addr>>8;
 21e:	ba 82       	std	Y+2, r11	; 0x02
						spibuf[2] = addr&0xFF;
 220:	ab 82       	std	Y+3, r10	; 0x03
						spibuf[3] = 0;
 222:	7c 82       	std	Y+4, r7	; 0x04
						spi_exchange(spibuf, cmdresp);
 224:	be 01       	movw	r22, r28
 226:	6b 5f       	subi	r22, 0xFB	; 251
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	76 d2       	rcall	.+1260   	; 0x71c <spi_exchange>
						addr += pagesize;
 230:	8b a5       	ldd	r24, Y+43	; 0x2b
 232:	9c a5       	ldd	r25, Y+44	; 0x2c
 234:	a8 0e       	add	r10, r24
 236:	b9 1e       	adc	r11, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	87 ea       	ldi	r24, 0xA7	; 167
 23a:	91 e6       	ldi	r25, 0x61	; 97
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <__stack+0x15d>
 240:	00 c0       	rjmp	.+0      	; 0x242 <__stack+0x163>
 242:	00 00       	nop
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
						pagepos = 0;
 244:	c1 2c       	mov	r12, r1
 246:	d1 2c       	mov	r13, r1
						addr += pagesize;
						_delay_ms(5);
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
 248:	63 94       	inc	r6
					if(blkreadpos==BLKSIZE){
 24a:	90 e2       	ldi	r25, 0x20	; 32
 24c:	69 12       	cpse	r6, r25
 24e:	32 c0       	rjmp	.+100    	; 0x2b4 <__stack+0x1d5>
						blkreadpos=0;
						blkwritepos=0;
						txbuf[txinpos++] = 0xFF;
 250:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	8e 0f       	add	r24, r30
 258:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	e9 59       	subi	r30, 0x99	; 153
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	50 82       	st	Z, r5
						txbuf[txinpos++] = blkmodetype;
 264:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	8e 0f       	add	r24, r30
 26c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	e9 59       	subi	r30, 0x99	; 153
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	10 83       	st	Z, r17
						txbuf[txinpos++] = (addr>>8)&0xFF;
 278:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	8e 0f       	add	r24, r30
 280:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	e9 59       	subi	r30, 0x99	; 153
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	b0 82       	st	Z, r11
						txbuf[txinpos++] = addr&0xFF;
 28c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	8e 0f       	add	r24, r30
 294:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	e9 59       	subi	r30, 0x99	; 153
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	a0 82       	st	Z, r10
						txinpos &= TXBUFMAXMASK;
 2a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 2a4:	8f 70       	andi	r24, 0x0F	; 15
 2a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
						
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	82 1a       	sub	r8, r18
 2ae:	92 0a       	sbc	r9, r18
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
						blkwritepos=0;
 2b0:	41 2c       	mov	r4, r1
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
 2b2:	61 2c       	mov	r6, r1
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
					}
					if(cntblk == nblks){
 2b4:	49 a5       	ldd	r20, Y+41	; 0x29
 2b6:	5a a5       	ldd	r21, Y+42	; 0x2a
 2b8:	48 15       	cp	r20, r8
 2ba:	59 05       	cpc	r21, r9
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <__stack+0x1e1>
 2be:	32 c1       	rjmp	.+612    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
						blkmodetype = 0;
 2c0:	17 2d       	mov	r17, r7
 2c2:	30 c1       	rjmp	.+608    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
				}
				break;
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
 2c4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <txinpos>
 2c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <txoutpos>
 2cc:	98 13       	cpse	r25, r24
 2ce:	2a c1       	rjmp	.+596    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
					if(blkmodetype==0xC1)
 2d0:	11 3c       	cpi	r17, 0xC1	; 193
 2d2:	19 f4       	brne	.+6      	; 0x2da <__stack+0x1fb>
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 2d4:	60 fe       	sbrs	r6, 0
 2d6:	8c c1       	rjmp	.+792    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 2d8:	7f c1       	rjmp	.+766    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
					else if(blkmodetype==0xC3)
 2da:	13 3c       	cpi	r17, 0xC3	; 195
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <__stack+0x201>
 2de:	41 c1       	rjmp	.+642    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
						spibuf[0] = 0xA0;
 2e0:	50 ea       	ldi	r21, 0xA0	; 160
 2e2:	59 83       	std	Y+1, r21	; 0x01
					spibuf[1] = addr>>8;	//アドレス上位
 2e4:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 2e6:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = 0;
 2e8:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 2ea:	be 01       	movw	r22, r28
 2ec:	6b 5f       	subi	r22, 0xFB	; 251
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	13 d2       	rcall	.+1062   	; 0x71c <spi_exchange>
					//アドレスを進める
					if( (blkmodetype==0xC1 && (blkreadpos&1)==1) || blkmodetype==0xC3){
						addr++;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	a8 1a       	sub	r10, r24
 2fa:	b8 0a       	sbc	r11, r24
					}
						
					//ホストへ戻し
					while(bit_is_clear(UCSRA,UDRE));
 2fc:	5d 9b       	sbis	0x0b, 5	; 11
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <__stack+0x21d>
					UDR = cmdresp[3];
 300:	88 85       	ldd	r24, Y+8	; 0x08
 302:	8c b9       	out	0x0c, r24	; 12
						
					//読み込みはブロック単位ではないがカウンタとして使う
					blkreadpos++;
 304:	63 94       	inc	r6
					if(blkreadpos==BLKSIZE){
 306:	90 e2       	ldi	r25, 0x20	; 32
 308:	69 12       	cpse	r6, r25
 30a:	04 c0       	rjmp	.+8      	; 0x314 <__stack+0x235>
						cntblk++;
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	82 1a       	sub	r8, r18
 310:	92 0a       	sbc	r9, r18
						blkreadpos = 0;
 312:	61 2c       	mov	r6, r1
					}
					//終了判定
					if(cntblk == nblks)
 314:	49 a5       	ldd	r20, Y+41	; 0x29
 316:	5a a5       	ldd	r21, Y+42	; 0x2a
 318:	48 15       	cp	r20, r8
 31a:	59 05       	cpc	r21, r9
 31c:	09 f0       	breq	.+2      	; 0x320 <__stack+0x241>
 31e:	2f c1       	rjmp	.+606    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
						blkmodetype = 0;
 320:	17 2d       	mov	r17, r7
 322:	2d c1       	rjmp	.+602    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
			//UART受信完了待ち	
#if _DEBUG
			rxbuf[rxpos++] = DBGUDR;
#else
			//UART受信あり
			if(bit_is_set(UCSRA,RXC)){
 324:	5f 9b       	sbis	0x0b, 7	; 11
 326:	0c c0       	rjmp	.+24     	; 0x340 <__stack+0x261>
				//受信バッファ異常フラグ
				//現時点では特に処理しない
				//uarterr |= (UCSRA & 0b00011000);	//bit4=フレーム異常, bit3=オーバーラン
				
				//UDRを読むと自動的に受信完了フラグは消える
				rxbuf[rxpos++] = UDR;
 328:	8c b1       	in	r24, 0x0c	; 12
 32a:	e1 e0       	ldi	r30, 0x01	; 1
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ec 0f       	add	r30, r28
 330:	fd 1f       	adc	r31, r29
 332:	e0 0f       	add	r30, r16
 334:	f1 1d       	adc	r31, r1
 336:	80 83       	st	Z, r24
 338:	0f 5f       	subi	r16, 0xFF	; 255
				cnttimeout = MAX_TIMEOUT;
 33a:	ee 24       	eor	r14, r14
 33c:	ea 94       	dec	r14
 33e:	fe 2c       	mov	r15, r14
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
 340:	04 30       	cpi	r16, 0x04	; 4
 342:	09 f0       	breq	.+2      	; 0x346 <__stack+0x267>
 344:	ef c0       	rjmp	.+478    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
				rxpos=0;
				if(rxbuf[0]!=0xFF && GIMSK==0){
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	8f 3f       	cpi	r24, 0xFF	; 255
 34a:	59 f0       	breq	.+22     	; 0x362 <__stack+0x283>
 34c:	8b b7       	in	r24, 0x3b	; 59
 34e:	81 11       	cpse	r24, r1
 350:	08 c0       	rjmp	.+16     	; 0x362 <__stack+0x283>
					//SPIでターゲットと4バイト交換する
					spi_exchange(rxbuf, cmdresp);
 352:	be 01       	movw	r22, r28
 354:	6b 5f       	subi	r22, 0xFB	; 251
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	df d1       	rcall	.+958    	; 0x71c <spi_exchange>
					cmdresp[0] = 0x6F;
 35e:	2d 82       	std	Y+5, r2	; 0x05
 360:	0c c1       	rjmp	.+536    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
 362:	5d 82       	std	Y+5, r5	; 0x05
					cmdresp[1] = rxbuf[1];
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	8e 83       	std	Y+6, r24	; 0x06
					cmdresp[2] = 0;
 368:	7f 82       	std	Y+7, r7	; 0x07
					cmdresp[3] = 0;
 36a:	78 86       	std	Y+8, r7	; 0x08

					//コマンド振り分け
					switch(rxbuf[1]){
 36c:	8e 30       	cpi	r24, 0x0E	; 14
 36e:	09 f4       	brne	.+2      	; 0x372 <__stack+0x293>
 370:	5b c0       	rjmp	.+182    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 372:	70 f4       	brcc	.+28     	; 0x390 <__stack+0x2b1>
 374:	8a 30       	cpi	r24, 0x0A	; 10
 376:	09 f4       	brne	.+2      	; 0x37a <__stack+0x29b>
 378:	41 c0       	rjmp	.+130    	; 0x3fc <__stack+0x31d>
 37a:	28 f4       	brcc	.+10     	; 0x386 <__stack+0x2a7>
 37c:	88 23       	and	r24, r24
 37e:	f1 f0       	breq	.+60     	; 0x3bc <__stack+0x2dd>
 380:	86 30       	cpi	r24, 0x06	; 6
 382:	f9 f0       	breq	.+62     	; 0x3c2 <__stack+0x2e3>
 384:	99 c0       	rjmp	.+306    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 386:	8c 30       	cpi	r24, 0x0C	; 12
 388:	09 f4       	brne	.+2      	; 0x38c <__stack+0x2ad>
 38a:	43 c0       	rjmp	.+134    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 38c:	f0 f1       	brcs	.+124    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 38e:	48 c0       	rjmp	.+144    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 390:	84 3c       	cpi	r24, 0xC4	; 196
 392:	50 f4       	brcc	.+20     	; 0x3a8 <__stack+0x2c9>
 394:	80 3c       	cpi	r24, 0xC0	; 192
 396:	08 f0       	brcs	.+2      	; 0x39a <__stack+0x2bb>
 398:	52 c0       	rjmp	.+164    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 39a:	84 31       	cpi	r24, 0x14	; 20
 39c:	09 f4       	brne	.+2      	; 0x3a0 <__stack+0x2c1>
 39e:	48 c0       	rjmp	.+144    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3a0:	85 31       	cpi	r24, 0x15	; 21
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <__stack+0x2c7>
 3a4:	48 c0       	rjmp	.+144    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3a6:	88 c0       	rjmp	.+272    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 3a8:	81 3f       	cpi	r24, 0xF1	; 241
 3aa:	09 f4       	brne	.+2      	; 0x3ae <__stack+0x2cf>
 3ac:	6f c0       	rjmp	.+222    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 3ae:	8f 3f       	cpi	r24, 0xFF	; 255
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <__stack+0x2d5>
 3b2:	7f c0       	rjmp	.+254    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 3b4:	8e 3c       	cpi	r24, 0xCE	; 206
 3b6:	09 f0       	breq	.+2      	; 0x3ba <__stack+0x2db>
 3b8:	7f c0       	rjmp	.+254    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 3ba:	5d c0       	rjmp	.+186    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
					case 0:	//null command
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 3bc:	5e ef       	ldi	r21, 0xFE	; 254
 3be:	5d 83       	std	Y+5, r21	; 0x05
						break;
 3c0:	da c0       	rjmp	.+436    	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
					case 6:
						//ターゲットリセットピン切り替え
						if(rxbuf[2]==0){
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	81 11       	cpse	r24, r1
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <__stack+0x2f5>
							//プログラミングモードに切り替え
							//外部割り込み不許可でソフトUART使用不可に
							cbi(GIMSK, INT1);
 3c8:	8b b7       	in	r24, 0x3b	; 59
 3ca:	8f 77       	andi	r24, 0x7F	; 127
 3cc:	8b bf       	out	0x3b, r24	; 59
							//ソフトSPI MOSI Low
							cbi(PORTD, 4);
 3ce:	94 98       	cbi	0x12, 4	; 18
							//RESETをlow
							cbi(PORTD, 5);
 3d0:	95 98       	cbi	0x12, 5	; 18
 3d2:	72 c0       	rjmp	.+228    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
						}
						else if(rxbuf[2]==1){
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	49 f4       	brne	.+18     	; 0x3ea <__stack+0x30b>
							//実行モードに切り替え
							//ソフトUART Tx High(アイドル)
							sbi(PORTD, 4);
 3d8:	94 9a       	sbi	0x12, 4	; 18
							//RESETをhiにして実行モードへ
							sbi(PORTD, 5);
 3da:	95 9a       	sbi	0x12, 5	; 18
							//外部割り込み許可でソフトウェアUARTに
							sbi(EIFR, INTF1);	//1を書き込むと割り込みフラグ強制解除
 3dc:	8a b7       	in	r24, 0x3a	; 58
 3de:	80 68       	ori	r24, 0x80	; 128
 3e0:	8a bf       	out	0x3a, r24	; 58
							sbi(GIMSK, INT1);
 3e2:	8b b7       	in	r24, 0x3b	; 59
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	8b bf       	out	0x3b, r24	; 59
 3e8:	67 c0       	rjmp	.+206    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
						}
						else if(rxbuf[2]==2){
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <__stack+0x313>
							//RESETをlow
							cbi(PORTD, 5);
 3ee:	95 98       	cbi	0x12, 5	; 18
 3f0:	63 c0       	rjmp	.+198    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
						}
						else if(rxbuf[2]==3){
 3f2:	83 30       	cpi	r24, 0x03	; 3
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__stack+0x319>
 3f6:	c1 c0       	rjmp	.+386    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
							//RESETをhigh
							sbi(PORTD, 5);					
 3f8:	95 9a       	sbi	0x12, 5	; 18
 3fa:	5e c0       	rjmp	.+188    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
						}
						break;
					case 10: //0x0A
						//ポートB下位ニブル変更
						PORTB = (PORTB & 0xF0) | (rxbuf[2] & 0x0F);
 3fc:	88 b3       	in	r24, 0x18	; 24
 3fe:	9b 81       	ldd	r25, Y+3	; 0x03
 400:	9f 70       	andi	r25, 0x0F	; 15
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	89 2b       	or	r24, r25
 406:	88 bb       	out	0x18, r24	; 24
						break;
 408:	57 c0       	rjmp	.+174    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
					case 11: //0x0B
						//ポートB下位ニブル読み取り
						cmdresp[2] = PORTB & 0x0F;
 40a:	88 b3       	in	r24, 0x18	; 24
 40c:	8f 70       	andi	r24, 0x0F	; 15
 40e:	8f 83       	std	Y+7, r24	; 0x07
						break;
 410:	b4 c0       	rjmp	.+360    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					case 12: //0x0C
						//ポートB下位ニブル方向変更
						DDRB = (DDRB & 0xF0) | (rxbuf[2] & 0x0F);
 412:	87 b3       	in	r24, 0x17	; 23
 414:	9b 81       	ldd	r25, Y+3	; 0x03
 416:	9f 70       	andi	r25, 0x0F	; 15
 418:	80 7f       	andi	r24, 0xF0	; 240
 41a:	89 2b       	or	r24, r25
 41c:	87 bb       	out	0x17, r24	; 23
						break;
 41e:	4c c0       	rjmp	.+152    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
					case 13: //0x0D
						//ポートB下位ニブル方向読み取り
						cmdresp[2] = DDRB & 0x0F;
 420:	87 b3       	in	r24, 0x17	; 23
 422:	8f 70       	andi	r24, 0x0F	; 15
 424:	8f 83       	std	Y+7, r24	; 0x07
						break;
 426:	a9 c0       	rjmp	.+338    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					case 14: //0x0E
						//ポートB下位ニブル読み取り
						cmdresp[2] = PINB & 0x0F;
 428:	86 b3       	in	r24, 0x16	; 22
 42a:	8f 70       	andi	r24, 0x0F	; 15
 42c:	8f 83       	std	Y+7, r24	; 0x07
						break;
 42e:	a5 c0       	rjmp	.+330    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					//このブリッジのバージョン
					case 20: //0x14
						cmdresp[2] = VERSION;
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	8f 83       	std	Y+7, r24	; 0x07
						break;
 434:	a2 c0       	rjmp	.+324    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					case 21:
						//SPIディレイ設定
						spidelay = rxbuf[2];
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <spidelay>
						break;
 43c:	9e c0       	rjmp	.+316    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード開始
						blkmodetype = rxbuf[1];
						if(rxbuf[1] == 0xC0)
 43e:	80 3c       	cpi	r24, 0xC0	; 192
 440:	31 f4       	brne	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
							pagesize /= 2; //flash書き込みはword単位
 442:	2b a5       	ldd	r18, Y+43	; 0x2b
 444:	3c a5       	ldd	r19, Y+44	; 0x2c
 446:	36 95       	lsr	r19
 448:	27 95       	ror	r18
 44a:	3c a7       	std	Y+44, r19	; 0x2c
 44c:	2b a7       	std	Y+43, r18	; 0x2b
						nblks = rxbuf[2];
 44e:	2b 81       	ldd	r18, Y+3	; 0x03
 450:	30 e0       	ldi	r19, 0x00	; 0
						nblks <<= 8;
 452:	32 2f       	mov	r19, r18
 454:	22 27       	eor	r18, r18
						nblks += rxbuf[3];
 456:	9c 81       	ldd	r25, Y+4	; 0x04
 458:	a9 01       	movw	r20, r18
 45a:	49 0f       	add	r20, r25
 45c:	51 1d       	adc	r21, r1
 45e:	5a a7       	std	Y+42, r21	; 0x2a
 460:	49 a7       	std	Y+41, r20	; 0x29
					case 0xC0:
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード開始
						blkmodetype = rxbuf[1];
 462:	18 2f       	mov	r17, r24
						
						addr = 0;
						blkwritepos = 0;
						blkreadpos = 0;
						cntblk = 0;
						pagepos = 0;
 464:	c1 2c       	mov	r12, r1
 466:	d1 2c       	mov	r13, r1
							pagesize /= 2; //flash書き込みはword単位
						nblks = rxbuf[2];
						nblks <<= 8;
						nblks += rxbuf[3];
						
						addr = 0;
 468:	a1 2c       	mov	r10, r1
 46a:	b1 2c       	mov	r11, r1
						blkwritepos = 0;
 46c:	41 2c       	mov	r4, r1
						blkreadpos = 0;
 46e:	61 2c       	mov	r6, r1
						cntblk = 0;
 470:	81 2c       	mov	r8, r1
 472:	91 2c       	mov	r9, r1
						pagepos = 0;
						break;
 474:	82 c0       	rjmp	.+260    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					case 0xCE:
						//ページサイズ設定
						//rxbuf[2]に上位8bit、[3]に下位8bit
						pagesize = rxbuf[2];
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	90 e0       	ldi	r25, 0x00	; 0
						pagesize <<= 8;
 47a:	98 2f       	mov	r25, r24
 47c:	88 27       	eor	r24, r24
						pagesize += rxbuf[3];
 47e:	2c 81       	ldd	r18, Y+4	; 0x04
 480:	ac 01       	movw	r20, r24
 482:	42 0f       	add	r20, r18
 484:	51 1d       	adc	r21, r1
 486:	5c a7       	std	Y+44, r21	; 0x2c
 488:	4b a7       	std	Y+43, r20	; 0x2b
						break;
 48a:	77 c0       	rjmp	.+238    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					case 0xF1:
						//ホストからターゲットへソフトUARTでデータ送信
						if(suatxbit != -1){
 48c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 490:	8f 3f       	cpi	r24, 0xFF	; 255
 492:	11 f0       	breq	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
							//すでに送信中
							cmdresp[3] = 0xFF;
 494:	58 86       	std	Y+8, r5	; 0x08
 496:	71 c0       	rjmp	.+226    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
						}
						else{
							suatxbuf = rxbuf[2];
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <suatxbuf>
							//タイマを開始
							TCNT1 = 0;
 49e:	1d bc       	out	0x2d, r1	; 45
 4a0:	1c bc       	out	0x2c, r1	; 44
							TCCR1B |= 0b00000011;
 4a2:	8e b5       	in	r24, 0x2e	; 46
 4a4:	83 60       	ori	r24, 0x03	; 3
 4a6:	8e bd       	out	0x2e, r24	; 46
							//スタートビット送出
							cbi(PORTD,4);
 4a8:	94 98       	cbi	0x12, 4	; 18
							suatxbit = 1;
 4aa:	51 e0       	ldi	r21, 0x01	; 1
 4ac:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <suatxbit>
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
						}
						break;
					case 0xFF:
						//padding command
						//no response
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 4b2:	8e ef       	ldi	r24, 0xFE	; 254
 4b4:	8d 83       	std	Y+5, r24	; 0x05
						break;
 4b6:	5f c0       	rjmp	.+190    	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 4b8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ba:	8e 3f       	cpi	r24, 0xFE	; 254
 4bc:	91 f1       	breq	.+100    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
					txbuf[txinpos++] = cmdresp[0];
 4be:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	9e 0f       	add	r25, r30
 4c6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <txinpos>
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	e9 59       	subi	r30, 0x99	; 153
 4ce:	ff 4f       	sbci	r31, 0xFF	; 255
 4d0:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[1];
 4d2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8e 0f       	add	r24, r30
 4da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	8e 81       	ldd	r24, Y+6	; 0x06
 4e2:	e9 59       	subi	r30, 0x99	; 153
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[2];
 4e8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	8e 0f       	add	r24, r30
 4f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	8f 81       	ldd	r24, Y+7	; 0x07
 4f8:	e9 59       	subi	r30, 0x99	; 153
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	80 83       	st	Z, r24
					txbuf[txinpos++] = cmdresp[3];
 4fe:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	8e 0f       	add	r24, r30
 506:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	88 85       	ldd	r24, Y+8	; 0x08
 50e:	e9 59       	subi	r30, 0x99	; 153
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	80 83       	st	Z, r24
					txinpos &= TXBUFMAXMASK;
 514:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 518:	8f 70       	andi	r24, 0x0F	; 15
 51a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 51e:	07 2d       	mov	r16, r7
 520:	01 c0       	rjmp	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 522:	07 2d       	mov	r16, r7
			} //if(rxpos==4)
		} // if(!blockmode)
		
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	e9 1a       	sub	r14, r25
 528:	f1 08       	sbc	r15, r1
		if(cnttimeout==0){
 52a:	09 f0       	breq	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52c:	ea cd       	rjmp	.-1068   	; 0x102 <__stack+0x23>
			rxpos = 0;
			blkmodetype = 0;
 52e:	17 2d       	mov	r17, r7
		
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
		if(cnttimeout==0){
			rxpos = 0;
 530:	07 2d       	mov	r16, r7
 532:	e7 cd       	rjmp	.-1074   	; 0x102 <__stack+0x23>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 534:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = pagepos&0xFF;
 536:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 538:	e9 e0       	ldi	r30, 0x09	; 9
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ec 0f       	add	r30, r28
 53e:	fd 1f       	adc	r31, r29
 540:	e6 0d       	add	r30, r6
 542:	f1 1d       	adc	r31, r1
 544:	80 81       	ld	r24, Z
 546:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 548:	be 01       	movw	r22, r28
 54a:	6b 5f       	subi	r22, 0xFB	; 251
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	e4 d0       	rcall	.+456    	; 0x71c <spi_exchange>
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 554:	2b a5       	ldd	r18, Y+43	; 0x2b
 556:	3c a5       	ldd	r19, Y+44	; 0x2c
 558:	2c 15       	cp	r18, r12
 55a:	3d 05       	cpc	r19, r13
 55c:	09 f0       	breq	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55e:	74 ce       	rjmp	.-792    	; 0x248 <__stack+0x169>
 560:	5e ce       	rjmp	.-836    	; 0x21e <__stack+0x13f>
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					if(blkmodetype==0xC1)
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
					else if(blkmodetype==0xC3)
						spibuf[0] = 0xA0;
					spibuf[1] = addr>>8;	//アドレス上位
 562:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 564:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = 0;
 566:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 568:	be 01       	movw	r22, r28
 56a:	6b 5f       	subi	r22, 0xFB	; 251
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	d4 d0       	rcall	.+424    	; 0x71c <spi_exchange>
 574:	c3 ce       	rjmp	.-634    	; 0x2fc <__stack+0x21d>
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 576:	07 2d       	mov	r16, r7
 578:	d5 cf       	rjmp	.-86     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 57a:	8d 81       	ldd	r24, Y+5	; 0x05
 57c:	a0 cf       	rjmp	.-192    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			} //if(rxpos==4)
		} // if(!blockmode)
		
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
 57e:	0f 2e       	mov	r0, r31
 580:	fe ef       	ldi	r31, 0xFE	; 254
 582:	ef 2e       	mov	r14, r31
 584:	ff 24       	eor	r15, r15
 586:	fa 94       	dec	r15
 588:	f0 2d       	mov	r31, r0
 58a:	bb cd       	rjmp	.-1162   	; 0x102 <__stack+0x23>
					cnttimeout = MAX_TIMEOUT;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 58c:	88 e4       	ldi	r24, 0x48	; 72
 58e:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 590:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = pagepos&0xFF;
 592:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 594:	e9 e0       	ldi	r30, 0x09	; 9
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	ec 0f       	add	r30, r28
 59a:	fd 1f       	adc	r31, r29
 59c:	e6 0d       	add	r30, r6
 59e:	f1 1d       	adc	r31, r1
 5a0:	80 81       	ld	r24, Z
 5a2:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 5a4:	be 01       	movw	r22, r28
 5a6:	6b 5f       	subi	r22, 0xFB	; 251
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	ce 01       	movw	r24, r28
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	b6 d0       	rcall	.+364    	; 0x71c <spi_exchange>
 5b0:	25 ce       	rjmp	.-950    	; 0x1fc <__stack+0x11d>
					cnttimeout = MAX_TIMEOUT;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 5b2:	80 e4       	ldi	r24, 0x40	; 64
 5b4:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 5b6:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = pagepos&0xFF;
 5b8:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 5ba:	e9 e0       	ldi	r30, 0x09	; 9
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	ec 0f       	add	r30, r28
 5c0:	fd 1f       	adc	r31, r29
 5c2:	e6 0d       	add	r30, r6
 5c4:	f1 1d       	adc	r31, r1
 5c6:	80 81       	ld	r24, Z
 5c8:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 5ca:	be 01       	movw	r22, r28
 5cc:	6b 5f       	subi	r22, 0xFB	; 251
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	ce 01       	movw	r24, r28
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	a3 d0       	rcall	.+326    	; 0x71c <spi_exchange>
 5d6:	15 ce       	rjmp	.-982    	; 0x202 <__stack+0x123>
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					if(blkmodetype==0xC1)
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 5d8:	38 e2       	ldi	r19, 0x28	; 40
 5da:	39 83       	std	Y+1, r19	; 0x01
					else if(blkmodetype==0xC3)
						spibuf[0] = 0xA0;
					spibuf[1] = addr>>8;	//アドレス上位
 5dc:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 5de:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = 0;
 5e0:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 5e2:	be 01       	movw	r22, r28
 5e4:	6b 5f       	subi	r22, 0xFB	; 251
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	ce 01       	movw	r24, r28
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	97 d0       	rcall	.+302    	; 0x71c <spi_exchange>
 5ee:	83 ce       	rjmp	.-762    	; 0x2f6 <__stack+0x217>
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					if(blkmodetype==0xC1)
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 5f0:	40 e2       	ldi	r20, 0x20	; 32
 5f2:	49 83       	std	Y+1, r20	; 0x01
					else if(blkmodetype==0xC3)
						spibuf[0] = 0xA0;
					spibuf[1] = addr>>8;	//アドレス上位
 5f4:	ba 82       	std	Y+2, r11	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 5f6:	ab 82       	std	Y+3, r10	; 0x03
					spibuf[3] = 0;
 5f8:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 5fa:	be 01       	movw	r22, r28
 5fc:	6b 5f       	subi	r22, 0xFB	; 251
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	8b d0       	rcall	.+278    	; 0x71c <spi_exchange>
 606:	7a ce       	rjmp	.-780    	; 0x2fc <__stack+0x21d>
