
avrewbridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000078  000006a2  2**0
                  ALLOC
  2 .bss          00000017  00800060  00800060  00000836  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb7  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000578  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c7  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000622  00000000  00000000  000024a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000780  00000780  00000834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000030  00000750  00000750  00000804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_13 000000b8  000005ee  000005ee  000006a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_4 0000005c  000006a6  000006a6  0000075a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_exchange 0000004e  00000702  00000702  000007b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000576  00000078  00000078  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	be c3       	rjmp	.+1916   	; 0x780 <__bad_interrupt>
   4:	a5 c3       	rjmp	.+1866   	; 0x750 <__vector_2>
   6:	bc c3       	rjmp	.+1912   	; 0x780 <__bad_interrupt>
   8:	4e c3       	rjmp	.+1692   	; 0x6a6 <__vector_4>
   a:	ba c3       	rjmp	.+1908   	; 0x780 <__bad_interrupt>
   c:	b9 c3       	rjmp	.+1906   	; 0x780 <__bad_interrupt>
   e:	b8 c3       	rjmp	.+1904   	; 0x780 <__bad_interrupt>
  10:	b7 c3       	rjmp	.+1902   	; 0x780 <__bad_interrupt>
  12:	b6 c3       	rjmp	.+1900   	; 0x780 <__bad_interrupt>
  14:	b5 c3       	rjmp	.+1898   	; 0x780 <__bad_interrupt>
  16:	b4 c3       	rjmp	.+1896   	; 0x780 <__bad_interrupt>
  18:	b3 c3       	rjmp	.+1894   	; 0x780 <__bad_interrupt>
  1a:	e9 c2       	rjmp	.+1490   	; 0x5ee <__vector_13>
  1c:	b1 c3       	rjmp	.+1890   	; 0x780 <__bad_interrupt>
  1e:	b0 c3       	rjmp	.+1888   	; 0x780 <__bad_interrupt>
  20:	af c3       	rjmp	.+1886   	; 0x780 <__bad_interrupt>
  22:	ae c3       	rjmp	.+1884   	; 0x780 <__bad_interrupt>
  24:	ad c3       	rjmp	.+1882   	; 0x780 <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 77       	andi	r16, 0x70	; 112
  2a:	80 00       	.word	0x0080	; ????

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf ed       	ldi	r28, 0xDF	; 223
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	e6 e2       	ldi	r30, 0x26	; 38
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	17 c0       	rjmp	.+46     	; 0x6a <__do_clear_bss+0x8>
  3c:	b5 91       	lpm	r27, Z+
  3e:	a5 91       	lpm	r26, Z+
  40:	35 91       	lpm	r19, Z+
  42:	25 91       	lpm	r18, Z+
  44:	05 91       	lpm	r16, Z+
  46:	07 fd       	sbrc	r16, 7
  48:	0c c0       	rjmp	.+24     	; 0x62 <__do_clear_bss>
  4a:	95 91       	lpm	r25, Z+
  4c:	85 91       	lpm	r24, Z+
  4e:	ef 01       	movw	r28, r30
  50:	f9 2f       	mov	r31, r25
  52:	e8 2f       	mov	r30, r24
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 17       	cp	r26, r18
  5a:	b3 07       	cpc	r27, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__SREG__+0x15>
  5e:	fe 01       	movw	r30, r28
  60:	04 c0       	rjmp	.+8      	; 0x6a <__do_clear_bss+0x8>

00000062 <__do_clear_bss>:
  62:	1d 92       	st	X+, r1
  64:	a2 17       	cp	r26, r18
  66:	b3 07       	cpc	r27, r19
  68:	e1 f7       	brne	.-8      	; 0x62 <__do_clear_bss>
  6a:	eb 32       	cpi	r30, 0x2B	; 43
  6c:	f4 07       	cpc	r31, r20
  6e:	31 f7       	brne	.-52     	; 0x3c <__do_copy_data+0x8>
  70:	03 d0       	rcall	.+6      	; 0x78 <_etext>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_exit>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>

Disassembly of section .text:

00000780 <__bad_interrupt>:
 780:	3f cc       	rjmp	.-1922   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

00000750 <__vector_2>:


//外部割り込み1(INT1)
//ソフトUART受信スタートビット検出
ISR(INT1_vect)
{
 750:	1f 92       	push	r1
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	11 24       	eor	r1, r1
 75a:	8f 93       	push	r24
	suarxbuf = 0;
 75c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <suarxbuf>
	suarxbit = 0;
 760:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	//ピン変化割り込み不許可
	cbi(GIMSK, INT1);
 764:	8b b7       	in	r24, 0x3b	; 59
 766:	8f 77       	andi	r24, 0x7F	; 127
 768:	8b bf       	out	0x3b, r24	; 59

	//タイマ開始
	TCNT0 = 15;	//パルスの真ん中で採取するためのウエイト
 76a:	8f e0       	ldi	r24, 0x0F	; 15
 76c:	82 bf       	out	0x32, r24	; 50
	TCCR0B |= 0b00000011;
 76e:	83 b7       	in	r24, 0x33	; 51
 770:	83 60       	ori	r24, 0x03	; 3
 772:	83 bf       	out	0x33, r24	; 51
}
 774:	8f 91       	pop	r24
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

Disassembly of section .text.__vector_13:

000005ee <__vector_13>:


//タイマー0比較A一致
//ソフトUART受信データビット検出
ISR(TIMER0_COMPA_vect)
{	
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
	uint8_t f_bitset;
	
	//ピンのhigh, low取得
	f_bitset = bit_is_set(PIND,3);
 5fc:	80 b3       	in	r24, 0x10	; 16
 5fe:	88 70       	andi	r24, 0x08	; 8
	
	//スタートビットを再確認し不正なスタートビットを検出
	if(suarxbit == 0 && f_bitset){
 600:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 604:	91 11       	cpse	r25, r1
 606:	0f c0       	rjmp	.+30     	; 0x626 <__vector_13+0x38>
 608:	88 23       	and	r24, r24
 60a:	e1 f1       	breq	.+120    	; 0x684 <__vector_13+0x96>
		//タイマ停止
		TCCR0B &= 0b11111000;
 60c:	83 b7       	in	r24, 0x33	; 51
 60e:	88 7f       	andi	r24, 0xF8	; 248
 610:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 612:	8a b7       	in	r24, 0x3a	; 58
 614:	80 68       	ori	r24, 0x80	; 128
 616:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 618:	8b b7       	in	r24, 0x3b	; 59
 61a:	80 68       	ori	r24, 0x80	; 128
 61c:	8b bf       	out	0x3b, r24	; 59
		suarxbit = -1;
 61e:	8f ef       	ldi	r24, 0xFF	; 255
 620:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		return;
 624:	39 c0       	rjmp	.+114    	; 0x698 <__vector_13+0xaa>
	}
	//ストップビット
	else if(suarxbit == 9){
 626:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 62a:	99 30       	cpi	r25, 0x09	; 9
 62c:	79 f4       	brne	.+30     	; 0x64c <__vector_13+0x5e>
		//タイマ停止
		TCCR0B &= 0b11111000;
 62e:	93 b7       	in	r25, 0x33	; 51
 630:	98 7f       	andi	r25, 0xF8	; 248
 632:	93 bf       	out	0x33, r25	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 634:	9a b7       	in	r25, 0x3a	; 58
 636:	90 68       	ori	r25, 0x80	; 128
 638:	9a bf       	out	0x3a, r25	; 58
		sbi(GIMSK, INT1);
 63a:	9b b7       	in	r25, 0x3b	; 59
 63c:	90 68       	ori	r25, 0x80	; 128
 63e:	9b bf       	out	0x3b, r25	; 59
		
		//不正なストップビット検出
		if(!f_bitset){
 640:	81 11       	cpse	r24, r1
 642:	10 c0       	rjmp	.+32     	; 0x664 <__vector_13+0x76>
			suarxbit = -1;	//こうするとメインループでホストに送信しない
 644:	8f ef       	ldi	r24, 0xFF	; 255
 646:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			return;
 64a:	26 c0       	rjmp	.+76     	; 0x698 <__vector_13+0xaa>
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 64c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <suarxbuf>
 650:	96 95       	lsr	r25
 652:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <suarxbuf>
		if(f_bitset){
 656:	88 23       	and	r24, r24
 658:	29 f0       	breq	.+10     	; 0x664 <__vector_13+0x76>
			suarxbuf |= 0b10000000;
 65a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 65e:	80 68       	ori	r24, 0x80	; 128
 660:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
		}
	}
	
	//次のビットへ
	suarxbit++;
 664:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 66e:	14 c0       	rjmp	.+40     	; 0x698 <__vector_13+0xaa>
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
		//タイマ停止
		TCCR0B &= 0b11111000;
 670:	83 b7       	in	r24, 0x33	; 51
 672:	88 7f       	andi	r24, 0xF8	; 248
 674:	83 bf       	out	0x33, r24	; 51
		//ピン変化割り込み許可
		sbi(EIFR, INTF1);	//割り込みフラグ強制解除
 676:	8a b7       	in	r24, 0x3a	; 58
 678:	80 68       	ori	r24, 0x80	; 128
 67a:	8a bf       	out	0x3a, r24	; 58
		sbi(GIMSK, INT1);
 67c:	8b b7       	in	r24, 0x3b	; 59
 67e:	80 68       	ori	r24, 0x80	; 128
 680:	8b bf       	out	0x3b, r24	; 59
 682:	e0 cf       	rjmp	.-64     	; 0x644 <__vector_13+0x56>
		sbi(GIMSK, INT1);
		suarxbit = -1;
		return;
	}
	//ストップビット
	else if(suarxbit == 9){
 684:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 688:	89 30       	cpi	r24, 0x09	; 9
 68a:	91 f3       	breq	.-28     	; 0x670 <__vector_13+0x82>
			return;
		}
	}
	//データビット
	else{
		suarxbuf >>= 1;
 68c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <suarxbuf>
 690:	86 95       	lsr	r24
 692:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <suarxbuf>
 696:	e6 cf       	rjmp	.-52     	; 0x664 <__vector_13+0x76>
		}
	}
	
	//次のビットへ
	suarxbit++;
}
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

Disassembly of section .text.__vector_4:

000006a6 <__vector_4>:


//タイマー1比較A一致
//ソフトUART送信
ISR(TIMER1_COMPA_vect)
{
 6a6:	1f 92       	push	r1
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	8f 93       	push	r24
	//ストップビット
	if(suatxbit==9){
 6b2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 6b6:	89 30       	cpi	r24, 0x09	; 9
 6b8:	11 f4       	brne	.+4      	; 0x6be <__vector_4+0x18>
		sbi(PORTD,4);
 6ba:	94 9a       	sbi	0x12, 4	; 18
 6bc:	17 c0       	rjmp	.+46     	; 0x6ec <__vector_4+0x46>
	}
	//送出完了
	else if(suatxbit==10){
 6be:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 6c2:	8a 30       	cpi	r24, 0x0A	; 10
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <__vector_4+0x2e>
		//タイマ停止する
		TCCR1B &= 0b11111000;
 6c6:	8e b5       	in	r24, 0x2e	; 46
 6c8:	88 7f       	andi	r24, 0xF8	; 248
 6ca:	8e bd       	out	0x2e, r24	; 46
		suatxbit = -1;
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
		return;
 6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <__vector_4+0x50>
	}
	//データビット
	else{
		if(suatxbuf & 1)
 6d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 6d8:	80 ff       	sbrs	r24, 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <__vector_4+0x3a>
			sbi(PORTD,4);
 6dc:	94 9a       	sbi	0x12, 4	; 18
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <__vector_4+0x3c>
		else
			cbi(PORTD,4);
 6e0:	94 98       	cbi	0x12, 4	; 18
		suatxbuf >>= 1;			
 6e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <suatxbuf>
 6e6:	86 95       	lsr	r24
 6e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <suatxbuf>
	}
	
	//次のビットへ
	suatxbit++;
 6ec:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <suatxbit>
 6f0:	8f 5f       	subi	r24, 0xFF	; 255
 6f2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <suatxbit>
}
 6f6:	8f 91       	pop	r24
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

Disassembly of section .text.spi_exchange:

00000702 <spi_exchange>:


//4バイトSPIで交換する
//USIは使わず任意のピンを使う
void spi_exchange(uint8_t *poutdata, uint8_t *pindata)
{
 702:	fc 01       	movw	r30, r24
 704:	a6 2f       	mov	r26, r22
 706:	b7 2f       	mov	r27, r23
 708:	bc 01       	movw	r22, r24
 70a:	6c 5f       	subi	r22, 0xFC	; 252
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t		indata;
	uint8_t		delaycnt;

	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
 70e:	41 91       	ld	r20, Z+
 710:	38 e0       	ldi	r19, 0x08	; 8
		indata = 0;
 712:	20 e0       	ldi	r18, 0x00	; 0
		bitcount = 8;
		while(bitcount){
			//送信データ(MSB先行)
			if(outdata&0x80)
 714:	44 23       	and	r20, r20
 716:	14 f4       	brge	.+4      	; 0x71c <spi_exchange+0x1a>
				sbi(PORTD,4);
 718:	94 9a       	sbi	0x12, 4	; 18
 71a:	01 c0       	rjmp	.+2      	; 0x71e <spi_exchange+0x1c>
			else
				cbi(PORTD,4);
 71c:	94 98       	cbi	0x12, 4	; 18
			outdata <<= 1;
 71e:	44 0f       	add	r20, r20
			//クロック上昇
			sbi(PORTB, 4);
 720:	c4 9a       	sbi	0x18, 4	; 24
			delaycnt = spidelay;
 722:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;//カウント1あたり3クロック=0.15us
 726:	99 23       	and	r25, r25
 728:	11 f0       	breq	.+4      	; 0x72e <spi_exchange+0x2c>
 72a:	91 50       	subi	r25, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <spi_exchange+0x28>
			//受信データ
			indata <<= 1;
 72e:	22 0f       	add	r18, r18
			if(PIND & 0b00001000)
 730:	83 99       	sbic	0x10, 3	; 16
				indata |= 1;
 732:	21 60       	ori	r18, 0x01	; 1
			//クロック下降
			bitcount--;
			cbi(PORTB, 4);
 734:	c4 98       	cbi	0x18, 4	; 24
			delaycnt = spidelay;
 736:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <spidelay>
			while(delaycnt) delaycnt--;	//カウント1あたり3クロック=0.15us
 73a:	99 23       	and	r25, r25
 73c:	11 f0       	breq	.+4      	; 0x742 <spi_exchange+0x40>
 73e:	91 50       	subi	r25, 0x01	; 1
 740:	f1 f7       	brne	.-4      	; 0x73e <spi_exchange+0x3c>
 742:	31 50       	subi	r19, 0x01	; 1
	bytecount = 4;
	while(bytecount){
		outdata = poutdata[4-bytecount];
		indata = 0;
		bitcount = 8;
		while(bitcount){
 744:	39 f7       	brne	.-50     	; 0x714 <spi_exchange+0x12>
			bitcount--;
			cbi(PORTB, 4);
			delaycnt = spidelay;
			while(delaycnt) delaycnt--;	//カウント1あたり3クロック=0.15us
		}
		pindata[4-bytecount] = indata;
 746:	2d 93       	st	X+, r18
	uint8_t		outdata;
	uint8_t		indata;
	uint8_t		delaycnt;

	bytecount = 4;
	while(bytecount){
 748:	e6 17       	cp	r30, r22
 74a:	f7 07       	cpc	r31, r23
 74c:	01 f7       	brne	.-64     	; 0x70e <spi_exchange+0xc>
		}
		pindata[4-bytecount] = indata;
		bytecount--;
	}

}
 74e:	08 95       	ret

Disassembly of section .text.main:

00000078 <main>:
#endif



int main(void) 
{
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	cd b7       	in	r28, 0x3d	; 61
  7e:	dd 27       	eor	r29, r29
  80:	ca 52       	subi	r28, 0x2A	; 42
  82:	cd bf       	out	0x3d, r28	; 61
	uint16_t pagepos;		//ページ内の走査位置


reset:
	//マスター割り込み禁止
	cli();
  84:	f8 94       	cli
   GND ┃GN  D6┃SpeedSW
       ┗━━━┛
*/

	//IO方向セット(0入力,1出力)
	DDRB  = 0b00010000;
  86:	20 e1       	ldi	r18, 0x10	; 16
  88:	27 bb       	out	0x17, r18	; 23
	DDRD  = 0b00110010;
  8a:	22 e3       	ldi	r18, 0x32	; 50
  8c:	21 bb       	out	0x11, r18	; 17

	//ポート初期化
	//出力の場合1でHigh、0でLow
	//入力の場合1を書くとプルアップ抵抗活性化、0を書くとハイインピーダンス
	PORTB = 0b00000000;
  8e:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b01010001;
  90:	21 e5       	ldi	r18, 0x51	; 81
  92:	22 bb       	out	0x12, r18	; 18
	//タイマ設定
	
	//TCCR0
	//B3,A1,A0	動作種別、CTC動作は010
	//B210	プリスケーラ(000:停止, 001:1, 010:8, 011:64, 100:256, 101:1024, 110,111:予約)
	TCCR0A = 0b00000010;
  94:	22 e0       	ldi	r18, 0x02	; 2
  96:	20 bf       	out	0x30, r18	; 48
	TCCR0B = 0b00000000;
  98:	13 be       	out	0x33, r1	; 51

	//タイマ0比較値(AVRのクロック/UART速度/プリスケーラ)
	OCR0A = 31;
  9a:	3f e1       	ldi	r19, 0x1F	; 31
  9c:	36 bf       	out	0x36, r19	; 54
	TCNT0 = 0;
  9e:	12 be       	out	0x32, r1	; 50
	
	//TCCR1
	//B4,B3,A1,A0 動作種別 	CTCは0100(比較A一致)か1100(捕獲一致)
	//B210	プリスケーラ 設定値はタイマ0と同じ
	TCCR1A = 0;
  a0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001000;
  a2:	38 e0       	ldi	r19, 0x08	; 8
  a4:	3e bd       	out	0x2e, r19	; 46
	OCR1A  = 32;
  a6:	40 e2       	ldi	r20, 0x20	; 32
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	5b bd       	out	0x2b, r21	; 43
  ac:	4a bd       	out	0x2a, r20	; 42
	TCNT1  = 0;
  ae:	1d bc       	out	0x2d, r1	; 45
  b0:	1c bc       	out	0x2c, r1	; 44

	//タイマ割り込みはここで許可するが、タイマーが動いていないので割り込みはまだ発生しない
	TIMSK = 1<<OCIE0A | 1<<OCIE1A;
  b2:	41 e4       	ldi	r20, 0x41	; 65
  b4:	49 bf       	out	0x39, r20	; 57
	//MCU制御
	//7		1を書くとプルアップ禁止
	//6,5,4	休止種別、休止許可
	//3,2	INT1割り込み条件(00:Low,01:両端,10:下降,11:上昇)
	//1,0	INT0割り込み条件
	MCUCR = 0b00001000;
  b6:	35 bf       	out	0x35, r19	; 53
	//ピン割り込みは実行モードになったら許可するのでここではまだ不許可
	GIMSK = 0;
  b8:	1b be       	out	0x3b, r1	; 59

	//////////////////////////////////////////////////////////////////////
	//USART設定

	//初期化時はボーレート0にする必要がある
	UBRRH = 0;
  ba:	12 b8       	out	0x02, r1	; 2
	UBRRL = 0;
  bc:	19 b8       	out	0x09, r1	; 9

	//データレジスタ
	UDR = 0;
  be:	1c b8       	out	0x0c, r1	; 12
	//4	フレーミングエラーフラグ
	//3	データオーバーランフラグ
	//2	パリティエラーフラグ
	//1	倍速許可
	//0	マルチプロセッサ許可
	UCSRA = 0b00000010;
  c0:	2b b9       	out	0x0b, r18	; 11
	//4	受信(RXD0pin)許可
	//3	送信(TXD0pin)許可
	//2	データビット長選択2
	//1	受信追加データビット(9ビットフレームの時使用)
	//0	送信追加データビット(9ビットフレームの時使用)
	UCSRB = 0b00011000;
  c2:	38 e1       	ldi	r19, 0x18	; 24
  c4:	3a b9       	out	0x0a, r19	; 10
	//76 動作モード選択(00:非同期(調歩), 01:同期, 11:SPI)
	//54 パリティ選択(00:パリティなし, 10:偶数, 11:奇数)
	//3	 ストップビット(0:1bit, 1:2bit)
	//21 データビット長選択10(8bitは011)
	//0	 クロック極性(0:送信立ち上がり,受信立下り, 1:その逆、同期動作時のみ有効)
	UCSRC = 0b00000110;
  c6:	36 e0       	ldi	r19, 0x06	; 6
  c8:	33 b9       	out	0x03, r19	; 3

	//ボーレート
	UBRRH = 0;
  ca:	12 b8       	out	0x02, r1	; 2
	UBRRL = UBRR_VAL;
  cc:	3a e0       	ldi	r19, 0x0A	; 10
  ce:	39 b9       	out	0x09, r19	; 9

	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
  d0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <txinpos>
	txoutpos = 0;
  d4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <txoutpos>
	cmdresp[0] = 0xFF;
	cmdresp[1] = 0;		//実行時はコマンド番号が入る
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	*/
	suarxbit = -1;
  d8:	3f ef       	ldi	r19, 0xFF	; 255
  da:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__DATA_REGION_ORIGIN__>
	suatxbit = -1;
  de:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <suatxbit>
	blkmodetype = 0;
	spidelay = 2;
  e2:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <spidelay>
	

	//マスター割り込み許可
	sei();
  e6:	78 94       	sei
	cmdresp[2] = 0;
	cmdresp[3] = 0;
	*/
	suarxbit = -1;
	suatxbit = -1;
	blkmodetype = 0;
  e8:	10 e0       	ldi	r17, 0x00	; 0
	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	txinpos = 0;
	txoutpos = 0;
	rxpos = 0;
  ea:	00 e0       	ldi	r16, 0x00	; 0
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
			suarxbit = -1;
  ec:	55 24       	eor	r5, r5
  ee:	5a 94       	dec	r5
			txbuf[txinpos] = 0xFF;
			txbuf[txinpos+1] = 0xF2;
  f0:	0f 2e       	mov	r0, r31
  f2:	f2 ef       	ldi	r31, 0xF2	; 242
  f4:	3f 2e       	mov	r3, r31
  f6:	f0 2d       	mov	r31, r0
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
		if(cnttimeout==0){
			rxpos = 0;
			blkmodetype = 0;
  f8:	71 2c       	mov	r7, r1
			if(rxpos==4){
				rxpos=0;
				if(rxbuf[0]!=0xFF && GIMSK==0){
					//SPIでターゲットと4バイト交換する
					spi_exchange(rxbuf, cmdresp);
					cmdresp[0] = 0x6F;
  fa:	0f 2e       	mov	r0, r31
  fc:	ff e6       	ldi	r31, 0x6F	; 111
  fe:	2f 2e       	mov	r2, r31
 100:	f0 2d       	mov	r31, r0
	while(1){
		///////////////////////////////////////////////////////////////////////
		//UART送信
		
		//ブリッジからホストへ送信
		if(txinpos != txoutpos){
 102:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <txinpos>
 106:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <txoutpos>
 10a:	32 17       	cp	r19, r18
 10c:	91 f0       	breq	.+36     	; 0x132 <__stack+0x53>
			//UART送信レジスタ空き待ちフラグ(UDRE)
			if(bit_is_set(UCSRA,UDRE)){
 10e:	5d 9b       	sbis	0x0b, 5	; 11
 110:	10 c0       	rjmp	.+32     	; 0x132 <__stack+0x53>
				//送信データセット
				//同時に送信が開始され、UDREは解除される
				UDR = txbuf[txoutpos++];
 112:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <txoutpos>
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	2e 0f       	add	r18, r30
 11a:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <txoutpos>
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e9 59       	subi	r30, 0x99	; 153
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	20 81       	ld	r18, Z
 126:	2c b9       	out	0x0c, r18	; 12
				txoutpos &= TXBUFMAXMASK; //if(txoutpos==TXBUFSIZE) txoutpos = 0;と同じ効果
 128:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <txoutpos>
 12c:	2f 70       	andi	r18, 0x0F	; 15
 12e:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <txoutpos>
			}
		}

		//ターゲットから受信したソフトUARTのデータがあればホストへ送出するバッファに入れる
		if(suarxbit==10){
 132:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	2a 30       	cpi	r18, 0x0A	; 10
 138:	31 f5       	brne	.+76     	; 0x186 <__stack+0xa7>
			suarxbit = -1;
 13a:	50 92 60 00 	sts	0x0060, r5	; 0x800060 <__DATA_REGION_ORIGIN__>
			txbuf[txinpos] = 0xFF;
 13e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e9 59       	subi	r30, 0x99	; 153
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	50 82       	st	Z, r5
			txbuf[txinpos+1] = 0xF2;
 14a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	e8 59       	subi	r30, 0x98	; 152
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	30 82       	st	Z, r3
			txbuf[txinpos+2] = suarxbuf;
 156:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <suarxbuf>
 160:	e7 59       	subi	r30, 0x97	; 151
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	20 83       	st	Z, r18
			txbuf[txinpos+3] = 0;
 166:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e6 59       	subi	r30, 0x96	; 150
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	10 82       	st	Z, r1
			txinpos += 4;
 172:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <txinpos>
 176:	2c 5f       	subi	r18, 0xFC	; 252
 178:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txinpos>
			txinpos &= TXBUFMAXMASK; //if(txinpos==TXBUFSIZE) txinpos = 0;と同じ効果
 17c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <txinpos>
 180:	2f 70       	andi	r18, 0x0F	; 15
 182:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txinpos>

		///////////////////////////////////////////////////////////////////////
		//UART受信

		//ブロック転送のときは4バイト固定ではなく指定したブロック長になる
		if(blkmodetype!=0){
 186:	11 23       	and	r17, r17
 188:	09 f4       	brne	.+2      	; 0x18c <__stack+0xad>
 18a:	c7 c0       	rjmp	.+398    	; 0x31a <__stack+0x23b>
			switch(blkmodetype){
 18c:	11 3c       	cpi	r17, 0xC1	; 193
 18e:	09 f4       	brne	.+2      	; 0x192 <__stack+0xb3>
 190:	96 c0       	rjmp	.+300    	; 0x2be <__stack+0x1df>
 192:	18 f4       	brcc	.+6      	; 0x19a <__stack+0xbb>
 194:	10 3c       	cpi	r17, 0xC0	; 192
 196:	39 f0       	breq	.+14     	; 0x1a6 <__stack+0xc7>
 198:	be c1       	rjmp	.+892    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 19a:	12 3c       	cpi	r17, 0xC2	; 194
 19c:	21 f0       	breq	.+8      	; 0x1a6 <__stack+0xc7>
 19e:	13 3c       	cpi	r17, 0xC3	; 195
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <__stack+0xc5>
 1a2:	8d c0       	rjmp	.+282    	; 0x2be <__stack+0x1df>
 1a4:	b8 c1       	rjmp	.+880    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
			case 0xC0:
			case 0xC2:
				//連続書き込み
				if(UCSRA & 0b10000000){	//UART受信データがあるか
 1a6:	5f 9b       	sbis	0x0b, 7	; 11
 1a8:	0b c0       	rjmp	.+22     	; 0x1c0 <__stack+0xe1>
					blkbuf[blkwritepos] = UDR;
 1aa:	8c b1       	in	r24, 0x0c	; 12
 1ac:	e9 e0       	ldi	r30, 0x09	; 9
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 0f       	add	r30, r28
 1b2:	fd 1f       	adc	r31, r29
 1b4:	e4 0d       	add	r30, r4
 1b6:	f1 1d       	adc	r31, r1
 1b8:	80 83       	st	Z, r24
					blkwritepos++;
 1ba:	43 94       	inc	r4
					cnttimeout = MAX_TIMEOUT;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	9f ef       	ldi	r25, 0xFF	; 255
				}
				if(blkreadpos < blkwritepos){
 1c0:	64 14       	cp	r6, r4
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__stack+0xe7>
 1c4:	a8 c1       	rjmp	.+848    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
 1c6:	10 3c       	cpi	r17, 0xC0	; 192
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <__stack+0xf1>
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 1ca:	60 fe       	sbrs	r6, 0
 1cc:	e5 c1       	rjmp	.+970    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 1ce:	d1 c1       	rjmp	.+930    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
					else if(blkmodetype==0xC2)	//EEPROMページ設定
 1d0:	12 3c       	cpi	r17, 0xC2	; 194
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <__stack+0xf7>
 1d4:	a6 c1       	rjmp	.+844    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
						spibuf[0] = 0xC1;
 1d6:	81 ec       	ldi	r24, 0xC1	; 193
 1d8:	89 83       	std	Y+1, r24	; 0x01
					spibuf[1] = pagepos>>8;
 1da:	fa 82       	std	Y+2, r15	; 0x02
					spibuf[2] = pagepos&0xFF;
 1dc:	eb 82       	std	Y+3, r14	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 1de:	e9 e0       	ldi	r30, 0x09	; 9
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ec 0f       	add	r30, r28
 1e4:	fd 1f       	adc	r31, r29
 1e6:	e6 0d       	add	r30, r6
 1e8:	f1 1d       	adc	r31, r1
 1ea:	80 81       	ld	r24, Z
 1ec:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 1ee:	be 01       	movw	r22, r28
 1f0:	6b 5f       	subi	r22, 0xFB	; 251
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	84 d2       	rcall	.+1288   	; 0x702 <spi_exchange>
				
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	e2 1a       	sub	r14, r18
 1fe:	f2 0a       	sbc	r15, r18
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 200:	49 a5       	ldd	r20, Y+41	; 0x29
 202:	5a a5       	ldd	r21, Y+42	; 0x2a
 204:	4e 15       	cp	r20, r14
 206:	5f 05       	cpc	r21, r15
 208:	f1 f4       	brne	.+60     	; 0x246 <__stack+0x167>
						pagepos = 0;
						if(blkmodetype==0xC0)
 20a:	10 3c       	cpi	r17, 0xC0	; 192
 20c:	19 f4       	brne	.+6      	; 0x214 <__stack+0x135>
							spibuf[0] = 0x4C;	//Flash書き込み
 20e:	8c e4       	ldi	r24, 0x4C	; 76
 210:	89 83       	std	Y+1, r24	; 0x01
 212:	04 c0       	rjmp	.+8      	; 0x21c <__stack+0x13d>
						else if(blkmodetype==0xC2)
 214:	12 3c       	cpi	r17, 0xC2	; 194
 216:	11 f4       	brne	.+4      	; 0x21c <__stack+0x13d>
							spibuf[0] = 0xC2;	//EEPROM書き込み
 218:	82 ec       	ldi	r24, 0xC2	; 194
 21a:	89 83       	std	Y+1, r24	; 0x01
						spibuf[1] = addr>>8;
 21c:	da 82       	std	Y+2, r13	; 0x02
						spibuf[2] = addr&0xFF;
 21e:	cb 82       	std	Y+3, r12	; 0x03
						spibuf[3] = 0;
 220:	7c 82       	std	Y+4, r7	; 0x04
						spi_exchange(spibuf, cmdresp);
 222:	be 01       	movw	r22, r28
 224:	6b 5f       	subi	r22, 0xFB	; 251
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	6a d2       	rcall	.+1236   	; 0x702 <spi_exchange>
						addr += pagesize;
 22e:	69 a5       	ldd	r22, Y+41	; 0x29
 230:	7a a5       	ldd	r23, Y+42	; 0x2a
 232:	c6 0e       	add	r12, r22
 234:	d7 1e       	adc	r13, r23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	87 ea       	ldi	r24, 0xA7	; 167
 238:	91 e6       	ldi	r25, 0x61	; 97
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <__stack+0x15b>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <__stack+0x161>
 240:	00 00       	nop
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
						pagepos = 0;
 242:	e1 2c       	mov	r14, r1
 244:	f1 2c       	mov	r15, r1
						addr += pagesize;
						_delay_ms(5);
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
 246:	63 94       	inc	r6
					if(blkreadpos==BLKSIZE){
 248:	90 e2       	ldi	r25, 0x20	; 32
 24a:	69 12       	cpse	r6, r25
 24c:	32 c0       	rjmp	.+100    	; 0x2b2 <__stack+0x1d3>
						blkreadpos=0;
						blkwritepos=0;
						txbuf[txinpos++] = 0xFF;
 24e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	8e 0f       	add	r24, r30
 256:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	e9 59       	subi	r30, 0x99	; 153
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	50 82       	st	Z, r5
						txbuf[txinpos++] = blkmodetype;
 262:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	8e 0f       	add	r24, r30
 26a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	e9 59       	subi	r30, 0x99	; 153
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	10 83       	st	Z, r17
						txbuf[txinpos++] = (addr>>8)&0xFF;
 276:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	8e 0f       	add	r24, r30
 27e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	e9 59       	subi	r30, 0x99	; 153
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	d0 82       	st	Z, r13
						txbuf[txinpos++] = addr&0xFF;
 28a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	8e 0f       	add	r24, r30
 292:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	e9 59       	subi	r30, 0x99	; 153
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	c0 82       	st	Z, r12
						txinpos &= TXBUFMAXMASK;
 29e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <txinpos>
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <txinpos>
						
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	a2 1a       	sub	r10, r18
 2ac:	b2 0a       	sbc	r11, r18
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
						blkwritepos=0;
 2ae:	41 2c       	mov	r4, r1
					}
					
					//バッファ読み込み位置を進めて、バッファ端ならホストへ通知
					blkreadpos++;
					if(blkreadpos==BLKSIZE){
						blkreadpos=0;
 2b0:	61 2c       	mov	r6, r1
						//ブロックカウンタを進め、ブロック終了判定
						//終了判定はページではなくブロックで行っている
						//現時点(ver2)でAVRのROMサイズはいずれもブロックサイズ(32)の倍数なので問題ないと思われる
						cntblk++;
					}
					if(cntblk == nblks){
 2b2:	8a 14       	cp	r8, r10
 2b4:	9b 04       	cpc	r9, r11
 2b6:	09 f0       	breq	.+2      	; 0x2ba <__stack+0x1db>
 2b8:	59 c1       	rjmp	.+690    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
						blkmodetype = 0;
 2ba:	17 2d       	mov	r17, r7
 2bc:	57 c1       	rjmp	.+686    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
				}
				break;
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
 2be:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <txinpos>
 2c2:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <txoutpos>
 2c6:	32 13       	cpse	r19, r18
 2c8:	26 c1       	rjmp	.+588    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
					if(blkmodetype==0xC1)
 2ca:	11 3c       	cpi	r17, 0xC1	; 193
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <__stack+0x1f5>
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 2ce:	60 fe       	sbrs	r6, 0
 2d0:	82 c1       	rjmp	.+772    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 2d2:	75 c1       	rjmp	.+746    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
					else if(blkmodetype==0xC3)
 2d4:	13 3c       	cpi	r17, 0xC3	; 195
 2d6:	09 f0       	breq	.+2      	; 0x2da <__stack+0x1fb>
 2d8:	3b c1       	rjmp	.+630    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
						spibuf[0] = 0xA0;
 2da:	40 ea       	ldi	r20, 0xA0	; 160
 2dc:	49 83       	std	Y+1, r20	; 0x01
					spibuf[1] = addr>>8;	//アドレス上位
 2de:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 2e0:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = 0;
 2e2:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 2e4:	be 01       	movw	r22, r28
 2e6:	6b 5f       	subi	r22, 0xFB	; 251
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	09 d2       	rcall	.+1042   	; 0x702 <spi_exchange>
					//アドレスを進める
					if( (blkmodetype==0xC1 && (blkreadpos&1)==1) || blkmodetype==0xC3){
						addr++;
 2f0:	5f ef       	ldi	r21, 0xFF	; 255
 2f2:	c5 1a       	sub	r12, r21
 2f4:	d5 0a       	sbc	r13, r21
					}
						
					//ホストへ戻し
					while(bit_is_clear(UCSRA,UDRE));
 2f6:	5d 9b       	sbis	0x0b, 5	; 11
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <__stack+0x217>
					UDR = cmdresp[3];
 2fa:	88 85       	ldd	r24, Y+8	; 0x08
 2fc:	8c b9       	out	0x0c, r24	; 12
						
					//読み込みはブロック単位ではないがカウンタとして使う
					blkreadpos++;
 2fe:	63 94       	inc	r6
					if(blkreadpos==BLKSIZE){
 300:	60 e2       	ldi	r22, 0x20	; 32
 302:	66 12       	cpse	r6, r22
 304:	04 c0       	rjmp	.+8      	; 0x30e <__stack+0x22f>
						cntblk++;
 306:	7f ef       	ldi	r23, 0xFF	; 255
 308:	a7 1a       	sub	r10, r23
 30a:	b7 0a       	sbc	r11, r23
						blkreadpos = 0;
 30c:	61 2c       	mov	r6, r1
					}
					//終了判定
					if(cntblk == nblks)
 30e:	8a 14       	cp	r8, r10
 310:	9b 04       	cpc	r9, r11
 312:	09 f0       	breq	.+2      	; 0x316 <__stack+0x237>
 314:	2b c1       	rjmp	.+598    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
						blkmodetype = 0;
 316:	17 2d       	mov	r17, r7
 318:	29 c1       	rjmp	.+594    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
			//UART受信完了待ち	
#if _DEBUG
			rxbuf[rxpos++] = DBGUDR;
#else
			//UART受信あり
			if(bit_is_set(UCSRA,RXC)){
 31a:	5f 9b       	sbis	0x0b, 7	; 11
 31c:	0b c0       	rjmp	.+22     	; 0x334 <__stack+0x255>
				//受信バッファ異常フラグ
				//現時点では特に処理しない
				//uarterr |= (UCSRA & 0b00011000);	//bit4=フレーム異常, bit3=オーバーラン
				
				//UDRを読むと自動的に受信完了フラグは消える
				rxbuf[rxpos++] = UDR;
 31e:	8c b1       	in	r24, 0x0c	; 12
 320:	e1 e0       	ldi	r30, 0x01	; 1
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ec 0f       	add	r30, r28
 326:	fd 1f       	adc	r31, r29
 328:	e0 0f       	add	r30, r16
 32a:	f1 1d       	adc	r31, r1
 32c:	80 83       	st	Z, r24
 32e:	0f 5f       	subi	r16, 0xFF	; 255
				cnttimeout = MAX_TIMEOUT;
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	9f ef       	ldi	r25, 0xFF	; 255
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
 334:	04 30       	cpi	r16, 0x04	; 4
 336:	09 f0       	breq	.+2      	; 0x33a <__stack+0x25b>
 338:	ee c0       	rjmp	.+476    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				rxpos=0;
				if(rxbuf[0]!=0xFF && GIMSK==0){
 33a:	29 81       	ldd	r18, Y+1	; 0x01
 33c:	2f 3f       	cpi	r18, 0xFF	; 255
 33e:	69 f0       	breq	.+26     	; 0x35a <__stack+0x27b>
 340:	2b b7       	in	r18, 0x3b	; 59
 342:	21 11       	cpse	r18, r1
 344:	0a c0       	rjmp	.+20     	; 0x35a <__stack+0x27b>
					//SPIでターゲットと4バイト交換する
					spi_exchange(rxbuf, cmdresp);
 346:	be 01       	movw	r22, r28
 348:	6b 5f       	subi	r22, 0xFB	; 251
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	d8 d1       	rcall	.+944    	; 0x702 <spi_exchange>
					cmdresp[0] = 0x6F;
 352:	2d 82       	std	Y+5, r2	; 0x05
					cnttimeout = MAX_TIMEOUT;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	9f ef       	ldi	r25, 0xFF	; 255
 358:	07 c1       	rjmp	.+526    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
				}
				//ブリッジコマンド
				else{
					cmdresp[0] = 0xFF;
 35a:	5d 82       	std	Y+5, r5	; 0x05
					cmdresp[1] = rxbuf[1];
 35c:	2a 81       	ldd	r18, Y+2	; 0x02
 35e:	2e 83       	std	Y+6, r18	; 0x06
					cmdresp[2] = 0;
 360:	7f 82       	std	Y+7, r7	; 0x07
					cmdresp[3] = 0;
 362:	78 86       	std	Y+8, r7	; 0x08

					//コマンド振り分け
					switch(rxbuf[1]){
 364:	2e 30       	cpi	r18, 0x0E	; 14
 366:	09 f4       	brne	.+2      	; 0x36a <__stack+0x28b>
 368:	5b c0       	rjmp	.+182    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 36a:	70 f4       	brcc	.+28     	; 0x388 <__stack+0x2a9>
 36c:	2a 30       	cpi	r18, 0x0A	; 10
 36e:	09 f4       	brne	.+2      	; 0x372 <__stack+0x293>
 370:	41 c0       	rjmp	.+130    	; 0x3f4 <__stack+0x315>
 372:	28 f4       	brcc	.+10     	; 0x37e <__stack+0x29f>
 374:	22 23       	and	r18, r18
 376:	f1 f0       	breq	.+60     	; 0x3b4 <__stack+0x2d5>
 378:	26 30       	cpi	r18, 0x06	; 6
 37a:	f9 f0       	breq	.+62     	; 0x3ba <__stack+0x2db>
 37c:	96 c0       	rjmp	.+300    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 37e:	2c 30       	cpi	r18, 0x0C	; 12
 380:	09 f4       	brne	.+2      	; 0x384 <__stack+0x2a5>
 382:	43 c0       	rjmp	.+134    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 384:	f0 f1       	brcs	.+124    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 386:	48 c0       	rjmp	.+144    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 388:	24 3c       	cpi	r18, 0xC4	; 196
 38a:	50 f4       	brcc	.+20     	; 0x3a0 <__stack+0x2c1>
 38c:	20 3c       	cpi	r18, 0xC0	; 192
 38e:	08 f0       	brcs	.+2      	; 0x392 <__stack+0x2b3>
 390:	52 c0       	rjmp	.+164    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 392:	24 31       	cpi	r18, 0x14	; 20
 394:	09 f4       	brne	.+2      	; 0x398 <__stack+0x2b9>
 396:	48 c0       	rjmp	.+144    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 398:	25 31       	cpi	r18, 0x15	; 21
 39a:	09 f4       	brne	.+2      	; 0x39e <__stack+0x2bf>
 39c:	48 c0       	rjmp	.+144    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 39e:	85 c0       	rjmp	.+266    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 3a0:	21 3f       	cpi	r18, 0xF1	; 241
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <__stack+0x2c7>
 3a4:	6c c0       	rjmp	.+216    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3a6:	2f 3f       	cpi	r18, 0xFF	; 255
 3a8:	09 f4       	brne	.+2      	; 0x3ac <__stack+0x2cd>
 3aa:	7c c0       	rjmp	.+248    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 3ac:	2e 3c       	cpi	r18, 0xCE	; 206
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <__stack+0x2d3>
 3b0:	7c c0       	rjmp	.+248    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 3b2:	5a c0       	rjmp	.+180    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
					case 0:	//null command
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 3b4:	2e ef       	ldi	r18, 0xFE	; 254
 3b6:	2d 83       	std	Y+5, r18	; 0x05
						break;
 3b8:	d5 c0       	rjmp	.+426    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
					case 6:
						//ターゲットリセットピン切り替え
						if(rxbuf[2]==0){
 3ba:	2b 81       	ldd	r18, Y+3	; 0x03
 3bc:	21 11       	cpse	r18, r1
 3be:	06 c0       	rjmp	.+12     	; 0x3cc <__stack+0x2ed>
							//プログラミングモードに切り替え
							//外部割り込み不許可でソフトUART使用不可に
							cbi(GIMSK, INT1);
 3c0:	2b b7       	in	r18, 0x3b	; 59
 3c2:	2f 77       	andi	r18, 0x7F	; 127
 3c4:	2b bf       	out	0x3b, r18	; 59
							//ソフトSPI MOSI Low
							cbi(PORTD, 4);
 3c6:	94 98       	cbi	0x12, 4	; 18
							//RESETをlow
							cbi(PORTD, 5);
 3c8:	95 98       	cbi	0x12, 5	; 18
 3ca:	6f c0       	rjmp	.+222    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
						}
						else if(rxbuf[2]==1){
 3cc:	21 30       	cpi	r18, 0x01	; 1
 3ce:	49 f4       	brne	.+18     	; 0x3e2 <__stack+0x303>
							//実行モードに切り替え
							//ソフトUART Tx High(アイドル)
							sbi(PORTD, 4);
 3d0:	94 9a       	sbi	0x12, 4	; 18
							//RESETをhiにして実行モードへ
							sbi(PORTD, 5);
 3d2:	95 9a       	sbi	0x12, 5	; 18
							//外部割り込み許可でソフトウェアUARTに
							sbi(EIFR, INTF1);	//1を書き込むと割り込みフラグ強制解除
 3d4:	2a b7       	in	r18, 0x3a	; 58
 3d6:	20 68       	ori	r18, 0x80	; 128
 3d8:	2a bf       	out	0x3a, r18	; 58
							sbi(GIMSK, INT1);
 3da:	2b b7       	in	r18, 0x3b	; 59
 3dc:	20 68       	ori	r18, 0x80	; 128
 3de:	2b bf       	out	0x3b, r18	; 59
 3e0:	64 c0       	rjmp	.+200    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
						}
						else if(rxbuf[2]==2){
 3e2:	22 30       	cpi	r18, 0x02	; 2
 3e4:	11 f4       	brne	.+4      	; 0x3ea <__stack+0x30b>
							//RESETをlow
							cbi(PORTD, 5);
 3e6:	95 98       	cbi	0x12, 5	; 18
 3e8:	60 c0       	rjmp	.+192    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
						}
						else if(rxbuf[2]==3){
 3ea:	23 30       	cpi	r18, 0x03	; 3
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <__stack+0x311>
 3ee:	bc c0       	rjmp	.+376    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
							//RESETをhigh
							sbi(PORTD, 5);					
 3f0:	95 9a       	sbi	0x12, 5	; 18
 3f2:	5b c0       	rjmp	.+182    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
						}
						break;
					case 10: //0x0A
						//ポートB下位ニブル変更
						PORTB = (PORTB & 0xF0) | (rxbuf[2] & 0x0F);
 3f4:	28 b3       	in	r18, 0x18	; 24
 3f6:	3b 81       	ldd	r19, Y+3	; 0x03
 3f8:	3f 70       	andi	r19, 0x0F	; 15
 3fa:	20 7f       	andi	r18, 0xF0	; 240
 3fc:	23 2b       	or	r18, r19
 3fe:	28 bb       	out	0x18, r18	; 24
						break;
 400:	54 c0       	rjmp	.+168    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
					case 11: //0x0B
						//ポートB下位ニブル読み取り
						cmdresp[2] = PORTB & 0x0F;
 402:	28 b3       	in	r18, 0x18	; 24
 404:	2f 70       	andi	r18, 0x0F	; 15
 406:	2f 83       	std	Y+7, r18	; 0x07
						break;
 408:	af c0       	rjmp	.+350    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
					case 12: //0x0C
						//ポートB下位ニブル方向変更
						DDRB = (DDRB & 0xF0) | (rxbuf[2] & 0x0F);
 40a:	27 b3       	in	r18, 0x17	; 23
 40c:	3b 81       	ldd	r19, Y+3	; 0x03
 40e:	3f 70       	andi	r19, 0x0F	; 15
 410:	20 7f       	andi	r18, 0xF0	; 240
 412:	23 2b       	or	r18, r19
 414:	27 bb       	out	0x17, r18	; 23
						break;
 416:	49 c0       	rjmp	.+146    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
					case 13: //0x0D
						//ポートB下位ニブル方向読み取り
						cmdresp[2] = DDRB & 0x0F;
 418:	27 b3       	in	r18, 0x17	; 23
 41a:	2f 70       	andi	r18, 0x0F	; 15
 41c:	2f 83       	std	Y+7, r18	; 0x07
						break;
 41e:	a4 c0       	rjmp	.+328    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
					case 14: //0x0E
						//ポートB下位ニブル読み取り
						cmdresp[2] = PINB & 0x0F;
 420:	26 b3       	in	r18, 0x16	; 22
 422:	2f 70       	andi	r18, 0x0F	; 15
 424:	2f 83       	std	Y+7, r18	; 0x07
						break;
 426:	a0 c0       	rjmp	.+320    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
					//このブリッジのバージョン
					case 20: //0x14
						cmdresp[2] = VERSION;
 428:	42 e0       	ldi	r20, 0x02	; 2
 42a:	4f 83       	std	Y+7, r20	; 0x07
						break;
 42c:	9d c0       	rjmp	.+314    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
					case 21:
						//SPIディレイ設定
						spidelay = rxbuf[2];
 42e:	2b 81       	ldd	r18, Y+3	; 0x03
 430:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <spidelay>
						break;
 434:	99 c0       	rjmp	.+306    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード開始
						blkmodetype = rxbuf[1];
						if(rxbuf[1] == 0xC0)
 436:	20 3c       	cpi	r18, 0xC0	; 192
 438:	31 f4       	brne	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
							pagesize /= 2; //flash書き込みはword単位
 43a:	69 a5       	ldd	r22, Y+41	; 0x29
 43c:	7a a5       	ldd	r23, Y+42	; 0x2a
 43e:	76 95       	lsr	r23
 440:	67 95       	ror	r22
 442:	7a a7       	std	Y+42, r23	; 0x2a
 444:	69 a7       	std	Y+41, r22	; 0x29
						nblks = rxbuf[2];
 446:	8b 80       	ldd	r8, Y+3	; 0x03
 448:	91 2c       	mov	r9, r1
						nblks <<= 8;
 44a:	98 2c       	mov	r9, r8
 44c:	88 24       	eor	r8, r8
						nblks += rxbuf[3];
 44e:	3c 81       	ldd	r19, Y+4	; 0x04
 450:	83 0e       	add	r8, r19
 452:	91 1c       	adc	r9, r1
					case 0xC0:
					case 0xC1:
					case 0xC2:
					case 0xC3:
						//ブロック転送モード開始
						blkmodetype = rxbuf[1];
 454:	12 2f       	mov	r17, r18
						
						addr = 0;
						blkwritepos = 0;
						blkreadpos = 0;
						cntblk = 0;
						pagepos = 0;
 456:	e1 2c       	mov	r14, r1
 458:	f1 2c       	mov	r15, r1
							pagesize /= 2; //flash書き込みはword単位
						nblks = rxbuf[2];
						nblks <<= 8;
						nblks += rxbuf[3];
						
						addr = 0;
 45a:	c1 2c       	mov	r12, r1
 45c:	d1 2c       	mov	r13, r1
						blkwritepos = 0;
 45e:	41 2c       	mov	r4, r1
						blkreadpos = 0;
 460:	61 2c       	mov	r6, r1
						cntblk = 0;
 462:	a1 2c       	mov	r10, r1
 464:	b1 2c       	mov	r11, r1
						pagepos = 0;
						break;
 466:	80 c0       	rjmp	.+256    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
					case 0xCE:
						//ページサイズ設定
						//rxbuf[2]に上位8bit、[3]に下位8bit
						pagesize = rxbuf[2];
 468:	2b 81       	ldd	r18, Y+3	; 0x03
 46a:	30 e0       	ldi	r19, 0x00	; 0
						pagesize <<= 8;
 46c:	32 2f       	mov	r19, r18
 46e:	22 27       	eor	r18, r18
						pagesize += rxbuf[3];
 470:	4c 81       	ldd	r20, Y+4	; 0x04
 472:	b9 01       	movw	r22, r18
 474:	64 0f       	add	r22, r20
 476:	71 1d       	adc	r23, r1
 478:	7a a7       	std	Y+42, r23	; 0x2a
 47a:	69 a7       	std	Y+41, r22	; 0x29
						break;
 47c:	75 c0       	rjmp	.+234    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
					case 0xF1:
						//ホストからターゲットへソフトUARTでデータ送信
						if(suatxbit != -1){
 47e:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <suatxbit>
 482:	2f 3f       	cpi	r18, 0xFF	; 255
 484:	11 f0       	breq	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
							//すでに送信中
							cmdresp[3] = 0xFF;
 486:	58 86       	std	Y+8, r5	; 0x08
 488:	6f c0       	rjmp	.+222    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
						}
						else{
							suatxbuf = rxbuf[2];
 48a:	2b 81       	ldd	r18, Y+3	; 0x03
 48c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <suatxbuf>
							//タイマを開始
							TCNT1 = 0;
 490:	1d bc       	out	0x2d, r1	; 45
 492:	1c bc       	out	0x2c, r1	; 44
							TCCR1B |= 0b00000011;
 494:	2e b5       	in	r18, 0x2e	; 46
 496:	23 60       	ori	r18, 0x03	; 3
 498:	2e bd       	out	0x2e, r18	; 46
							//スタートビット送出
							cbi(PORTD,4);
 49a:	94 98       	cbi	0x12, 4	; 18
							suatxbit = 1;
 49c:	71 e0       	ldi	r23, 0x01	; 1
 49e:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <suatxbit>
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
						}
						break;
					case 0xFF:
						//padding command
						//no response
						cmdresp[0] = 0xFE; //0xFEは返信なしの意味
 4a4:	2e ef       	ldi	r18, 0xFE	; 254
 4a6:	2d 83       	std	Y+5, r18	; 0x05
						break;
 4a8:	5d c0       	rjmp	.+186    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 4aa:	2d 81       	ldd	r18, Y+5	; 0x05
 4ac:	2e 3f       	cpi	r18, 0xFE	; 254
 4ae:	91 f1       	breq	.+100    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
					txbuf[txinpos++] = cmdresp[0];
 4b0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4b4:	31 e0       	ldi	r19, 0x01	; 1
 4b6:	3e 0f       	add	r19, r30
 4b8:	30 93 62 00 	sts	0x0062, r19	; 0x800062 <txinpos>
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	e9 59       	subi	r30, 0x99	; 153
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	20 83       	st	Z, r18
					txbuf[txinpos++] = cmdresp[1];
 4c4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4c8:	21 e0       	ldi	r18, 0x01	; 1
 4ca:	2e 0f       	add	r18, r30
 4cc:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txinpos>
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	2e 81       	ldd	r18, Y+6	; 0x06
 4d4:	e9 59       	subi	r30, 0x99	; 153
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	20 83       	st	Z, r18
					txbuf[txinpos++] = cmdresp[2];
 4da:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	2e 0f       	add	r18, r30
 4e2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txinpos>
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	2f 81       	ldd	r18, Y+7	; 0x07
 4ea:	e9 59       	subi	r30, 0x99	; 153
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	20 83       	st	Z, r18
					txbuf[txinpos++] = cmdresp[3];
 4f0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <txinpos>
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	2e 0f       	add	r18, r30
 4f8:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txinpos>
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	28 85       	ldd	r18, Y+8	; 0x08
 500:	e9 59       	subi	r30, 0x99	; 153
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	20 83       	st	Z, r18
					txinpos &= TXBUFMAXMASK;
 506:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <txinpos>
 50a:	2f 70       	andi	r18, 0x0F	; 15
 50c:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <txinpos>
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 510:	07 2d       	mov	r16, r7
 512:	01 c0       	rjmp	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	07 2d       	mov	r16, r7
			} //if(rxpos==4)
		} // if(!blockmode)
		
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
 516:	01 97       	sbiw	r24, 0x01	; 1
		if(cnttimeout==0){
 518:	09 f0       	breq	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 51a:	f3 cd       	rjmp	.-1050   	; 0x102 <__stack+0x23>
			rxpos = 0;
			blkmodetype = 0;
 51c:	17 2d       	mov	r17, r7
		
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
		if(cnttimeout==0){
			rxpos = 0;
 51e:	07 2d       	mov	r16, r7
 520:	f0 cd       	rjmp	.-1056   	; 0x102 <__stack+0x23>
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 522:	fa 82       	std	Y+2, r15	; 0x02
					spibuf[2] = pagepos&0xFF;
 524:	eb 82       	std	Y+3, r14	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 526:	e9 e0       	ldi	r30, 0x09	; 9
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	ec 0f       	add	r30, r28
 52c:	fd 1f       	adc	r31, r29
 52e:	e6 0d       	add	r30, r6
 530:	f1 1d       	adc	r31, r1
 532:	80 81       	ld	r24, Z
 534:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 536:	be 01       	movw	r22, r28
 538:	6b 5f       	subi	r22, 0xFB	; 251
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	ce 01       	movw	r24, r28
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	e0 d0       	rcall	.+448    	; 0x702 <spi_exchange>
					//ページ内位置を進める
					if( (blkmodetype==0xC0 && (blkreadpos&1)==1) || blkmodetype==0xC2){
						pagepos++;
					}
					//ページ端なら書き込み
					if(pagepos == pagesize){
 542:	49 a5       	ldd	r20, Y+41	; 0x29
 544:	5a a5       	ldd	r21, Y+42	; 0x2a
 546:	4e 15       	cp	r20, r14
 548:	5f 05       	cpc	r21, r15
 54a:	09 f0       	breq	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 54c:	7c ce       	rjmp	.-776    	; 0x246 <__stack+0x167>
 54e:	66 ce       	rjmp	.-820    	; 0x21c <__stack+0x13d>
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					if(blkmodetype==0xC1)
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
					else if(blkmodetype==0xC3)
						spibuf[0] = 0xA0;
					spibuf[1] = addr>>8;	//アドレス上位
 550:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 552:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = 0;
 554:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 556:	be 01       	movw	r22, r28
 558:	6b 5f       	subi	r22, 0xFB	; 251
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	ce 01       	movw	r24, r28
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	d0 d0       	rcall	.+416    	; 0x702 <spi_exchange>
 562:	c9 ce       	rjmp	.-622    	; 0x2f6 <__stack+0x217>
				cnttimeout = MAX_TIMEOUT;
			}
#endif
			//4バイト受信したら処理する
			if(rxpos==4){
				rxpos=0;
 564:	07 2d       	mov	r16, r7
 566:	d7 cf       	rjmp	.-82     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				} //if(rxbuf[0]==0xFF)
				
				//レスポンス
				//NULLコマンドとパディングコマンドを除く
				//実際の送信はメインループ内
				if(cmdresp[0] != 0xFE){
 568:	2d 81       	ldd	r18, Y+5	; 0x05
 56a:	a2 cf       	rjmp	.-188    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			} //if(rxpos==4)
		} // if(!blockmode)
		
		//4バイト受信できないときは受信バッファをリセットする
		//ウォッチドッグタイマの代わり
		cnttimeout--;
 56c:	8e ef       	ldi	r24, 0xFE	; 254
 56e:	9f ef       	ldi	r25, 0xFF	; 255
 570:	c8 cd       	rjmp	.-1136   	; 0x102 <__stack+0x23>
					cnttimeout = MAX_TIMEOUT;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 572:	88 e4       	ldi	r24, 0x48	; 72
 574:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 576:	fa 82       	std	Y+2, r15	; 0x02
					spibuf[2] = pagepos&0xFF;
 578:	eb 82       	std	Y+3, r14	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 57a:	e9 e0       	ldi	r30, 0x09	; 9
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	ec 0f       	add	r30, r28
 580:	fd 1f       	adc	r31, r29
 582:	e6 0d       	add	r30, r6
 584:	f1 1d       	adc	r31, r1
 586:	80 81       	ld	r24, Z
 588:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 58a:	be 01       	movw	r22, r28
 58c:	6b 5f       	subi	r22, 0xFB	; 251
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	b6 d0       	rcall	.+364    	; 0x702 <spi_exchange>
 596:	31 ce       	rjmp	.-926    	; 0x1fa <__stack+0x11b>
					cnttimeout = MAX_TIMEOUT;
				}
				if(blkreadpos < blkwritepos){
					//ページ設定
					if(blkmodetype==0xC0)	//FLASHページ設定
						spibuf[0] = (blkreadpos&1)==0? 0x40: 0x48;
 598:	80 e4       	ldi	r24, 0x40	; 64
 59a:	89 83       	std	Y+1, r24	; 0x01
					else if(blkmodetype==0xC2)	//EEPROMページ設定
						spibuf[0] = 0xC1;
					spibuf[1] = pagepos>>8;
 59c:	fa 82       	std	Y+2, r15	; 0x02
					spibuf[2] = pagepos&0xFF;
 59e:	eb 82       	std	Y+3, r14	; 0x03
					spibuf[3] = blkbuf[blkreadpos]; //DBGUDR; //UDR;
 5a0:	e9 e0       	ldi	r30, 0x09	; 9
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	ec 0f       	add	r30, r28
 5a6:	fd 1f       	adc	r31, r29
 5a8:	e6 0d       	add	r30, r6
 5aa:	f1 1d       	adc	r31, r1
 5ac:	80 81       	ld	r24, Z
 5ae:	8c 83       	std	Y+4, r24	; 0x04
					//SPI
					spi_exchange(spibuf, cmdresp);
 5b0:	be 01       	movw	r22, r28
 5b2:	6b 5f       	subi	r22, 0xFB	; 251
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	a3 d0       	rcall	.+326    	; 0x702 <spi_exchange>
 5bc:	21 ce       	rjmp	.-958    	; 0x200 <__stack+0x121>
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					if(blkmodetype==0xC1)
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 5be:	58 e2       	ldi	r21, 0x28	; 40
 5c0:	59 83       	std	Y+1, r21	; 0x01
					else if(blkmodetype==0xC3)
						spibuf[0] = 0xA0;
					spibuf[1] = addr>>8;	//アドレス上位
 5c2:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 5c4:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = 0;
 5c6:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 5c8:	be 01       	movw	r22, r28
 5ca:	6b 5f       	subi	r22, 0xFB	; 251
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	ce 01       	movw	r24, r28
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	97 d0       	rcall	.+302    	; 0x702 <spi_exchange>
 5d4:	8d ce       	rjmp	.-742    	; 0x2f0 <__stack+0x211>
			case 0xC1:
			case 0xC3:
				//flash/eeprom連続読み込み
				if(txinpos == txoutpos){ //コマンドレスポンスを優先する(txbufが空になってから読み込み開始)
					if(blkmodetype==0xC1)
						spibuf[0] = (blkreadpos&1)==0? 0x20: 0x28;
 5d6:	60 e2       	ldi	r22, 0x20	; 32
 5d8:	69 83       	std	Y+1, r22	; 0x01
					else if(blkmodetype==0xC3)
						spibuf[0] = 0xA0;
					spibuf[1] = addr>>8;	//アドレス上位
 5da:	da 82       	std	Y+2, r13	; 0x02
					spibuf[2] = addr&0xFF;	//アドレス下位
 5dc:	cb 82       	std	Y+3, r12	; 0x03
					spibuf[3] = 0;
 5de:	7c 82       	std	Y+4, r7	; 0x04
						
					//SPI
					spi_exchange(spibuf, cmdresp);
 5e0:	be 01       	movw	r22, r28
 5e2:	6b 5f       	subi	r22, 0xFB	; 251
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	8b d0       	rcall	.+278    	; 0x702 <spi_exchange>
 5ec:	84 ce       	rjmp	.-760    	; 0x2f6 <__stack+0x217>
