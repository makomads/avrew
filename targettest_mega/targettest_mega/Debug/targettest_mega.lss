
targettest_mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4a  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073e  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b0  00000000  00000000  00001cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  88:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <UARTSendByte>:
	uint16_t framedata;

	//[debug]
	//data = 0x53;

	cli();
  90:	f8 94       	cli

	//スタート、ストップビットを付加
	framedata = data;
  92:	90 e0       	ldi	r25, 0x00	; 0
	framedata <<= 1;
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
	framedata |= 0x0200;
	framedata &= 0xFFFE;
  98:	92 60       	ori	r25, 0x02	; 2
  9a:	2a e0       	ldi	r18, 0x0A	; 10
	//LSBから順に送出
	bitcnt = 10;
	do{
		if(framedata&1)
  9c:	80 ff       	sbrs	r24, 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <UARTSendByte+0x14>
			sbi(SOFTUART_TX_PORT, SOFTUART_TX_PINNO);
  a0:	2c 9a       	sbi	0x05, 4	; 5
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <UARTSendByte+0x16>
		else
			cbi(SOFTUART_TX_PORT, SOFTUART_TX_PINNO);
  a4:	2c 98       	cbi	0x05, 4	; 5
		framedata >>= 1;
  a6:	96 95       	lsr	r25
  a8:	87 95       	ror	r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	3c ec       	ldi	r19, 0xCC	; 204
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <UARTSendByte+0x1c>
  b0:	3c ec       	ldi	r19, 0xCC	; 204
  b2:	3a 95       	dec	r19
  b4:	f1 f7       	brne	.-4      	; 0xb2 <UARTSendByte+0x22>
  b6:	32 ed       	ldi	r19, 0xD2	; 210
  b8:	3a 95       	dec	r19
  ba:	f1 f7       	brne	.-4      	; 0xb8 <UARTSendByte+0x28>
  bc:	21 50       	subi	r18, 0x01	; 1
		_delay_us(34);
		_delay_us(34);
		_delay_us(35);
		bitcnt--;
	}while(bitcnt);
  be:	71 f7       	brne	.-36     	; 0x9c <UARTSendByte+0xc>

	sei();
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <__vector_3>:

volatile uint8_t sua_rxdata = 0;
volatile uint8_t sua_frxcomp = 0;	//ソフトUART受信完了フラグ

ISR(PCINT0_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
	uint8_t bitcnt;

	//UARTはアイドル時High、スタートビットは立下りを検出
	if( bit_is_set(SOFTUART_RX_PIN, SOFTUART_RX_PINNO) )
  d2:	1b 99       	sbic	0x03, 3	; 3
  d4:	2f c0       	rjmp	.+94     	; 0x134 <__vector_3+0x70>
		return;

	cli();
  d6:	f8 94       	cli
  d8:	8c e9       	ldi	r24, 0x9C	; 156
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <__vector_3+0x16>
  de:	8c e9       	ldi	r24, 0x9C	; 156
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <__vector_3+0x1c>

	//スタートビットのパルス中央になるまで待つ
	_delay_us(26);
	_delay_us(26);
	sua_rxdata = 0;
  e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <sua_rxdata>
  e8:	98 e0       	ldi	r25, 0x08	; 8
  ea:	8c ec       	ldi	r24, 0xCC	; 204
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <__vector_3+0x28>
  f0:	8c ec       	ldi	r24, 0xCC	; 204
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__vector_3+0x2e>
  f6:	82 ed       	ldi	r24, 0xD2	; 210
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__vector_3+0x34>
	bitcnt = 8;
	do{
		_delay_us(34);
		_delay_us(34);
		_delay_us(35);
		sua_rxdata >>= 1;
  fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sua_rxdata>
 100:	86 95       	lsr	r24
 102:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sua_rxdata>
		if( bit_is_set(SOFTUART_RX_PIN, SOFTUART_RX_PINNO) )
 106:	1b 9b       	sbis	0x03, 3	; 3
 108:	05 c0       	rjmp	.+10     	; 0x114 <__vector_3+0x50>
			sua_rxdata |= 0x80;
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sua_rxdata>
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sua_rxdata>
 114:	91 50       	subi	r25, 0x01	; 1
		bitcnt--;
	}while(bitcnt);
 116:	49 f7       	brne	.-46     	; 0xea <__vector_3+0x26>
 118:	8c ec       	ldi	r24, 0xCC	; 204
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <__vector_3+0x56>
 11e:	8c ec       	ldi	r24, 0xCC	; 204
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <__vector_3+0x5c>
 124:	82 ed       	ldi	r24, 0xD2	; 210
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <__vector_3+0x62>
	_delay_us(34);
	_delay_us(34);
	_delay_us(35);


	sua_frxcomp = true;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	//ピン変化割り込みフラグ解除
	PCIFR = 1<<PCIF0;
 130:	8b bb       	out	0x1b, r24	; 27
	//マスター割り込み許可
	sei();
 132:	78 94       	sei

}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <main>:



int main(void) 
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	64 97       	sbiw	r28, 0x14	; 20
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
	uint8_t bufsize=20;
	uint8_t bufidx=0;
	uint8_t i;

	//マスター割り込み禁止
	cli();
 156:	f8 94       	cli

	//IO方向セット(0入力,1出力)
	DDRB = 0b00010000;
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00001010;
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00000000;
 160:	1a b8       	out	0x0a, r1	; 10

	//ポート初期化
	//出力の場合1でHigh、0でLow
	//入力の場合1を書くとプルアップ抵抗活性化、0を書くとハイインピーダンス
	PORTB = ~DDRB;
 162:	84 b1       	in	r24, 0x04	; 4
 164:	80 95       	com	r24
 166:	85 b9       	out	0x05, r24	; 5
	PORTC = ~DDRC;
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	80 95       	com	r24
 16c:	88 b9       	out	0x08, r24	; 8
	PORTD = ~DDRD;
 16e:	8a b1       	in	r24, 0x0a	; 10
 170:	80 95       	com	r24
 172:	8b b9       	out	0x0b, r24	; 11
	
	
	//////////////////////////////////////////////////////////////////////
	//ピン割り込み
	//ピン変化割り込みマスク設定
	PCMSK0 = 1<<PCINT3;
 174:	88 e0       	ldi	r24, 0x08	; 8
 176:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	//ピン割り込み許可
	PCICR = 1<<PCIE0;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCIFR = 1<<PCIF0;
 180:	8b bb       	out	0x1b, r24	; 27
	sbi(SOFTUART_TX_PORT, SOFTUART_TX_PINNO);
 182:	2c 9a       	sbi	0x05, 4	; 5

	//////////////////////////////////////////////////////////////////////
	
	//諸変数初期化
	sua_frxcomp = false;
 184:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

	//[debug]
	UARTSendByte(0x55);
 188:	85 e5       	ldi	r24, 0x55	; 85
 18a:	0e 94 48 00 	call	0x90	; 0x90 <UARTSendByte>

	//割り込み許可
	sei();
 18e:	78 94       	sei
       ┗━━━┛
*/
	
	uint8_t uartbuf[20];
	uint8_t bufsize=20;
	uint8_t bufidx=0;
 190:	00 e0       	ldi	r16, 0x00	; 0
	//割り込み許可
	sei();

	//メインループ
	while(1){
		if(bit_is_set(PINB,0))
 192:	18 9b       	sbis	0x03, 0	; 3
 194:	02 c0       	rjmp	.+4      	; 0x19a <main+0x58>
			sbi(PORTB,1);
 196:	29 9a       	sbi	0x05, 1	; 5
 198:	01 c0       	rjmp	.+2      	; 0x19c <main+0x5a>
		else
			cbi(PORTB,1);
 19a:	29 98       	cbi	0x05, 1	; 5
		if(bit_is_set(PINB,2))
 19c:	1a 9b       	sbis	0x03, 2	; 3
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <main+0x62>
			sbi(PORTB,3);
 1a0:	2b 9a       	sbi	0x05, 3	; 5
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <main+0x64>
		else
			cbi(PORTB,3);
 1a4:	2b 98       	cbi	0x05, 3	; 5
			
		//ソフトUART受信完了待ち
		if(sua_frxcomp){
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	88 23       	and	r24, r24
 1ac:	61 f0       	breq	.+24     	; 0x1c6 <main+0x84>
			sua_frxcomp = false;
 1ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			uartbuf[bufidx++] = sua_rxdata;
 1b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sua_rxdata>
 1b6:	e1 e0       	ldi	r30, 0x01	; 1
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	e0 0f       	add	r30, r16
 1c0:	f1 1d       	adc	r31, r1
 1c2:	80 83       	st	Z, r24
 1c4:	0f 5f       	subi	r16, 0xFF	; 255
		}
		//返信
		if(sua_rxdata=='\n' || bufidx==bufsize){
 1c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sua_rxdata>
 1ca:	8a 30       	cpi	r24, 0x0A	; 10
 1cc:	39 f4       	brne	.+14     	; 0x1dc <main+0x9a>
			for(i=0; i<bufidx; i++){
 1ce:	00 23       	and	r16, r16
 1d0:	01 f3       	breq	.-64     	; 0x192 <main+0x50>
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	7c 01       	movw	r14, r24
			cbi(PORTB,3);
			
		//ソフトUART受信完了待ち
		if(sua_frxcomp){
			sua_frxcomp = false;
			uartbuf[bufidx++] = sua_rxdata;
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <main+0xa0>
		}
		//返信
		if(sua_rxdata=='\n' || bufidx==bufsize){
 1dc:	04 31       	cpi	r16, 0x14	; 20
 1de:	c9 f6       	brne	.-78     	; 0x192 <main+0x50>
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <main+0x90>
			for(i=0; i<bufidx; i++){
				if(uartbuf[i]>=0x20)
 1e2:	f7 01       	movw	r30, r14
 1e4:	81 91       	ld	r24, Z+
 1e6:	7f 01       	movw	r14, r30
 1e8:	80 32       	cpi	r24, 0x20	; 32
 1ea:	18 f0       	brcs	.+6      	; 0x1f2 <main+0xb0>
					UARTSendByte(uartbuf[i]+1);
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	0e 94 48 00 	call	0x90	; 0x90 <UARTSendByte>
			sua_frxcomp = false;
			uartbuf[bufidx++] = sua_rxdata;
		}
		//返信
		if(sua_rxdata=='\n' || bufidx==bufsize){
			for(i=0; i<bufidx; i++){
 1f2:	1f 5f       	subi	r17, 0xFF	; 255
 1f4:	10 17       	cp	r17, r16
 1f6:	a8 f3       	brcs	.-22     	; 0x1e2 <main+0xa0>
				if(uartbuf[i]>=0x20)
					UARTSendByte(uartbuf[i]+1);
			}
			bufidx=0;
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	cb cf       	rjmp	.-106    	; 0x192 <main+0x50>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
